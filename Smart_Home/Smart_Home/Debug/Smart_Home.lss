
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b6  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000653  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cd  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c8  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000151  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "HAL/Keypad/keypad.h"
#include "MCAL/I2C/I2C.h"

int main(void)
{
	I2C_init();
  82:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_init>
	DDRD = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	81 bb       	out	0x11, r24	; 17
	while (1)
	{
		I2C_start(0x20);
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	0e 94 6d 00 	call	0xda	; 0xda <I2C_start>
		I2C_write(0x55);
  90:	85 e5       	ldi	r24, 0x55	; 85
  92:	0e 94 ab 00 	call	0x156	; 0x156 <I2C_write>
		I2C_repeatedStart(0x22);
  96:	82 e2       	ldi	r24, 0x22	; 34
  98:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_repeatedStart>
		I2C_write(0xBB);
  9c:	8b eb       	ldi	r24, 0xBB	; 187
  9e:	0e 94 ab 00 	call	0x156	; 0x156 <I2C_write>
		I2C_stop();
  a2:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_stop>
		PORTD = 0;
  a6:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	89 e6       	ldi	r24, 0x69	; 105
  ac:	98 e1       	ldi	r25, 0x18	; 24
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x36>
  b8:	00 00       	nop
		_delay_ms(500);
		PORTD = 0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	82 bb       	out	0x12, r24	; 18
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x42>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4c>
  ce:	00 00       	nop
  d0:	dc cf       	rjmp	.-72     	; 0x8a <main+0x8>

000000d2 <I2C_init>:
  while (read_bit(TWCR, TWINT) == 0);
  *data = TWDR;
  if ((TWSR & 0xF8) == 0x58)
    return DATA_RECEIVED_NACK_SENT;
  return ERROR;
  }
  d2:	11 b8       	out	0x01, r1	; 1
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	80 b9       	out	0x00, r24	; 0
  d8:	08 95       	ret

000000da <I2C_start>:
  da:	94 ea       	ldi	r25, 0xA4	; 164
  dc:	96 bf       	out	0x36, r25	; 54
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <I2C_start+0x4>
  e4:	91 b1       	in	r25, 0x01	; 1
  e6:	98 7f       	andi	r25, 0xF8	; 248
  e8:	98 30       	cpi	r25, 0x08	; 8
  ea:	81 f4       	brne	.+32     	; 0x10c <I2C_start+0x32>
  ec:	83 b9       	out	0x03, r24	; 3
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	86 bf       	out	0x36, r24	; 54
  f2:	06 b6       	in	r0, 0x36	; 54
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <I2C_start+0x18>
  f8:	81 b1       	in	r24, 0x01	; 1
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	88 31       	cpi	r24, 0x18	; 24
  fe:	41 f0       	breq	.+16     	; 0x110 <I2C_start+0x36>
 100:	81 b1       	in	r24, 0x01	; 1
 102:	88 7f       	andi	r24, 0xF8	; 248
 104:	80 32       	cpi	r24, 0x20	; 32
 106:	31 f4       	brne	.+12     	; 0x114 <I2C_start+0x3a>
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	08 95       	ret
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	08 95       	ret

00000118 <I2C_repeatedStart>:
 118:	94 ea       	ldi	r25, 0xA4	; 164
 11a:	96 bf       	out	0x36, r25	; 54
 11c:	06 b6       	in	r0, 0x36	; 54
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <I2C_repeatedStart+0x4>
 122:	91 b1       	in	r25, 0x01	; 1
 124:	98 7f       	andi	r25, 0xF8	; 248
 126:	90 31       	cpi	r25, 0x10	; 16
 128:	81 f4       	brne	.+32     	; 0x14a <I2C_repeatedStart+0x32>
 12a:	83 b9       	out	0x03, r24	; 3
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	86 bf       	out	0x36, r24	; 54
 130:	06 b6       	in	r0, 0x36	; 54
 132:	07 fe       	sbrs	r0, 7
 134:	fd cf       	rjmp	.-6      	; 0x130 <I2C_repeatedStart+0x18>
 136:	81 b1       	in	r24, 0x01	; 1
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	80 34       	cpi	r24, 0x40	; 64
 13c:	41 f0       	breq	.+16     	; 0x14e <I2C_repeatedStart+0x36>
 13e:	81 b1       	in	r24, 0x01	; 1
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	88 34       	cpi	r24, 0x48	; 72
 144:	31 f4       	brne	.+12     	; 0x152 <I2C_repeatedStart+0x3a>
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	08 95       	ret
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	08 95       	ret
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	08 95       	ret
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	08 95       	ret

00000156 <I2C_write>:
 156:	83 b9       	out	0x03, r24	; 3
 158:	84 e8       	ldi	r24, 0x84	; 132
 15a:	86 bf       	out	0x36, r24	; 54
 15c:	06 b6       	in	r0, 0x36	; 54
 15e:	07 fe       	sbrs	r0, 7
 160:	fd cf       	rjmp	.-6      	; 0x15c <I2C_write+0x6>
 162:	81 b1       	in	r24, 0x01	; 1
 164:	88 7f       	andi	r24, 0xF8	; 248
 166:	88 32       	cpi	r24, 0x28	; 40
 168:	31 f0       	breq	.+12     	; 0x176 <I2C_write+0x20>
 16a:	81 b1       	in	r24, 0x01	; 1
 16c:	88 7f       	andi	r24, 0xF8	; 248
 16e:	80 33       	cpi	r24, 0x30	; 48
 170:	21 f4       	brne	.+8      	; 0x17a <I2C_write+0x24>
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	08 95       	ret
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	08 95       	ret
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	08 95       	ret

0000017e <I2C_stop>:

void I2C_stop(void) {
  TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	86 bf       	out	0x36, r24	; 54
  // set_bit(TWCR, TWSTO);
  // set_bit(TWCR, TWEN);
  // set_bit(TWCR, TWINT);
  while (read_bit(TWCR, TWSTO));	// Wait until stop condition finishes
 182:	06 b6       	in	r0, 0x36	; 54
 184:	04 fc       	sbrc	r0, 4
 186:	fd cf       	rjmp	.-6      	; 0x182 <I2C_stop+0x4>
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
