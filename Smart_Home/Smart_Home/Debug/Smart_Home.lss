
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3c  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000675  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b27  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00002494  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000818  00000000  00000000  00002a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b3 03 	jmp	0x766	; 0x766 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "HAL/EEPROM/eeprom.h"
#include "MCAL/ADC/adc.h"
#include "MCAL/Timer/timer.h"

int main(void) {
	set_bit(DDRD, 5);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 62       	ori	r24, 0x20	; 32
  96:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, 4);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	81 bb       	out	0x11, r24	; 17

	PWM_init(OC_1A, 0.3, PWM_PHASE_CORRECT);
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	4a e9       	ldi	r20, 0x9A	; 154
  a2:	59 e9       	ldi	r21, 0x99	; 153
  a4:	69 e9       	ldi	r22, 0x99	; 153
  a6:	7e e3       	ldi	r23, 0x3E	; 62
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 06 02 	call	0x40c	; 0x40c <PWM_init>
	PWM_init(OC_1B, 0.7, PWM_PHASE_CORRECT);
  ae:	22 e0       	ldi	r18, 0x02	; 2
  b0:	43 e3       	ldi	r20, 0x33	; 51
  b2:	53 e3       	ldi	r21, 0x33	; 51
  b4:	63 e3       	ldi	r22, 0x33	; 51
  b6:	7f e3       	ldi	r23, 0x3F	; 63
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 06 02 	call	0x40c	; 0x40c <PWM_init>

	Timer_start(TIMER_1, 8);
  be:	68 e0       	ldi	r22, 0x08	; 8
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Timer_start>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x36>

000000ca <isValidTimer>:
          }
        break;
    }
  // Everything went well
  return TIMER_OK;
  }
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	10 f4       	brcc	.+4      	; 0xd2 <isValidTimer+0x8>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret

000000d6 <set_prescalar>:
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	18 2f       	mov	r17, r24
  de:	eb 01       	movw	r28, r22
  e0:	0e 94 65 00 	call	0xca	; 0xca <isValidTimer>
  e4:	88 23       	and	r24, r24
  e6:	09 f4       	brne	.+2      	; 0xea <set_prescalar+0x14>
  e8:	6a c1       	rjmp	.+724    	; 0x3be <set_prescalar+0x2e8>
  ea:	11 30       	cpi	r17, 0x01	; 1
  ec:	09 f4       	brne	.+2      	; 0xf0 <set_prescalar+0x1a>
  ee:	6f c0       	rjmp	.+222    	; 0x1ce <set_prescalar+0xf8>
  f0:	20 f0       	brcs	.+8      	; 0xfa <set_prescalar+0x24>
  f2:	12 30       	cpi	r17, 0x02	; 2
  f4:	09 f4       	brne	.+2      	; 0xf8 <set_prescalar+0x22>
  f6:	d5 c0       	rjmp	.+426    	; 0x2a2 <set_prescalar+0x1cc>
  f8:	64 c1       	rjmp	.+712    	; 0x3c2 <set_prescalar+0x2ec>
  fa:	c2 30       	cpi	r28, 0x02	; 2
  fc:	d1 05       	cpc	r29, r1
  fe:	78 f0       	brcs	.+30     	; 0x11e <set_prescalar+0x48>
 100:	c8 30       	cpi	r28, 0x08	; 8
 102:	d1 05       	cpc	r29, r1
 104:	61 f0       	breq	.+24     	; 0x11e <set_prescalar+0x48>
 106:	c0 34       	cpi	r28, 0x40	; 64
 108:	d1 05       	cpc	r29, r1
 10a:	49 f0       	breq	.+18     	; 0x11e <set_prescalar+0x48>
 10c:	c1 15       	cp	r28, r1
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	d8 07       	cpc	r29, r24
 112:	29 f0       	breq	.+10     	; 0x11e <set_prescalar+0x48>
 114:	c1 15       	cp	r28, r1
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	d8 07       	cpc	r29, r24
 11a:	09 f0       	breq	.+2      	; 0x11e <set_prescalar+0x48>
 11c:	54 c1       	rjmp	.+680    	; 0x3c6 <set_prescalar+0x2f0>
 11e:	c8 30       	cpi	r28, 0x08	; 8
 120:	d1 05       	cpc	r29, r1
 122:	49 f1       	breq	.+82     	; 0x176 <set_prescalar+0xa0>
 124:	28 f4       	brcc	.+10     	; 0x130 <set_prescalar+0x5a>
 126:	20 97       	sbiw	r28, 0x00	; 0
 128:	81 f0       	breq	.+32     	; 0x14a <set_prescalar+0x74>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	c9 f0       	breq	.+50     	; 0x160 <set_prescalar+0x8a>
 12e:	4d c1       	rjmp	.+666    	; 0x3ca <set_prescalar+0x2f4>
 130:	c1 15       	cp	r28, r1
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	d8 07       	cpc	r29, r24
 136:	a9 f1       	breq	.+106    	; 0x1a2 <set_prescalar+0xcc>
 138:	c1 15       	cp	r28, r1
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	d8 07       	cpc	r29, r24
 13e:	e1 f1       	breq	.+120    	; 0x1b8 <set_prescalar+0xe2>
 140:	c0 34       	cpi	r28, 0x40	; 64
 142:	d1 05       	cpc	r29, r1
 144:	09 f0       	breq	.+2      	; 0x148 <set_prescalar+0x72>
 146:	41 c1       	rjmp	.+642    	; 0x3ca <set_prescalar+0x2f4>
 148:	21 c0       	rjmp	.+66     	; 0x18c <set_prescalar+0xb6>
 14a:	83 b7       	in	r24, 0x33	; 51
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	83 bf       	out	0x33, r24	; 51
 150:	83 b7       	in	r24, 0x33	; 51
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	83 bf       	out	0x33, r24	; 51
 156:	83 b7       	in	r24, 0x33	; 51
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	83 bf       	out	0x33, r24	; 51
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	3e c1       	rjmp	.+636    	; 0x3dc <set_prescalar+0x306>
 160:	83 b7       	in	r24, 0x33	; 51
 162:	81 60       	ori	r24, 0x01	; 1
 164:	83 bf       	out	0x33, r24	; 51
 166:	83 b7       	in	r24, 0x33	; 51
 168:	8d 7f       	andi	r24, 0xFD	; 253
 16a:	83 bf       	out	0x33, r24	; 51
 16c:	83 b7       	in	r24, 0x33	; 51
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	83 bf       	out	0x33, r24	; 51
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	33 c1       	rjmp	.+614    	; 0x3dc <set_prescalar+0x306>
 176:	83 b7       	in	r24, 0x33	; 51
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	83 bf       	out	0x33, r24	; 51
 17c:	83 b7       	in	r24, 0x33	; 51
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	83 bf       	out	0x33, r24	; 51
 182:	83 b7       	in	r24, 0x33	; 51
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	83 bf       	out	0x33, r24	; 51
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	28 c1       	rjmp	.+592    	; 0x3dc <set_prescalar+0x306>
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	83 bf       	out	0x33, r24	; 51
 192:	83 b7       	in	r24, 0x33	; 51
 194:	82 60       	ori	r24, 0x02	; 2
 196:	83 bf       	out	0x33, r24	; 51
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	83 bf       	out	0x33, r24	; 51
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	1d c1       	rjmp	.+570    	; 0x3dc <set_prescalar+0x306>
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	83 bf       	out	0x33, r24	; 51
 1a8:	83 b7       	in	r24, 0x33	; 51
 1aa:	8d 7f       	andi	r24, 0xFD	; 253
 1ac:	83 bf       	out	0x33, r24	; 51
 1ae:	83 b7       	in	r24, 0x33	; 51
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	83 bf       	out	0x33, r24	; 51
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	12 c1       	rjmp	.+548    	; 0x3dc <set_prescalar+0x306>
 1b8:	83 b7       	in	r24, 0x33	; 51
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	83 bf       	out	0x33, r24	; 51
 1be:	83 b7       	in	r24, 0x33	; 51
 1c0:	8d 7f       	andi	r24, 0xFD	; 253
 1c2:	83 bf       	out	0x33, r24	; 51
 1c4:	83 b7       	in	r24, 0x33	; 51
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	83 bf       	out	0x33, r24	; 51
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	07 c1       	rjmp	.+526    	; 0x3dc <set_prescalar+0x306>
 1ce:	c2 30       	cpi	r28, 0x02	; 2
 1d0:	d1 05       	cpc	r29, r1
 1d2:	78 f0       	brcs	.+30     	; 0x1f2 <set_prescalar+0x11c>
 1d4:	c8 30       	cpi	r28, 0x08	; 8
 1d6:	d1 05       	cpc	r29, r1
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <set_prescalar+0x11c>
 1da:	c0 34       	cpi	r28, 0x40	; 64
 1dc:	d1 05       	cpc	r29, r1
 1de:	49 f0       	breq	.+18     	; 0x1f2 <set_prescalar+0x11c>
 1e0:	c1 15       	cp	r28, r1
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	d8 07       	cpc	r29, r24
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <set_prescalar+0x11c>
 1e8:	c1 15       	cp	r28, r1
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	d8 07       	cpc	r29, r24
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <set_prescalar+0x11c>
 1f0:	ee c0       	rjmp	.+476    	; 0x3ce <set_prescalar+0x2f8>
 1f2:	c8 30       	cpi	r28, 0x08	; 8
 1f4:	d1 05       	cpc	r29, r1
 1f6:	49 f1       	breq	.+82     	; 0x24a <set_prescalar+0x174>
 1f8:	28 f4       	brcc	.+10     	; 0x204 <set_prescalar+0x12e>
 1fa:	20 97       	sbiw	r28, 0x00	; 0
 1fc:	81 f0       	breq	.+32     	; 0x21e <set_prescalar+0x148>
 1fe:	21 97       	sbiw	r28, 0x01	; 1
 200:	c9 f0       	breq	.+50     	; 0x234 <set_prescalar+0x15e>
 202:	e7 c0       	rjmp	.+462    	; 0x3d2 <set_prescalar+0x2fc>
 204:	c1 15       	cp	r28, r1
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	d8 07       	cpc	r29, r24
 20a:	a9 f1       	breq	.+106    	; 0x276 <set_prescalar+0x1a0>
 20c:	c1 15       	cp	r28, r1
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	d8 07       	cpc	r29, r24
 212:	e1 f1       	breq	.+120    	; 0x28c <set_prescalar+0x1b6>
 214:	c0 34       	cpi	r28, 0x40	; 64
 216:	d1 05       	cpc	r29, r1
 218:	09 f0       	breq	.+2      	; 0x21c <set_prescalar+0x146>
 21a:	db c0       	rjmp	.+438    	; 0x3d2 <set_prescalar+0x2fc>
 21c:	21 c0       	rjmp	.+66     	; 0x260 <set_prescalar+0x18a>
 21e:	8e b5       	in	r24, 0x2e	; 46
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	8e bd       	out	0x2e, r24	; 46
 224:	8e b5       	in	r24, 0x2e	; 46
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	8e bd       	out	0x2e, r24	; 46
 22a:	8e b5       	in	r24, 0x2e	; 46
 22c:	8b 7f       	andi	r24, 0xFB	; 251
 22e:	8e bd       	out	0x2e, r24	; 46
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	d4 c0       	rjmp	.+424    	; 0x3dc <set_prescalar+0x306>
 234:	8e b5       	in	r24, 0x2e	; 46
 236:	81 60       	ori	r24, 0x01	; 1
 238:	8e bd       	out	0x2e, r24	; 46
 23a:	8e b5       	in	r24, 0x2e	; 46
 23c:	8d 7f       	andi	r24, 0xFD	; 253
 23e:	8e bd       	out	0x2e, r24	; 46
 240:	8e b5       	in	r24, 0x2e	; 46
 242:	8b 7f       	andi	r24, 0xFB	; 251
 244:	8e bd       	out	0x2e, r24	; 46
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	c9 c0       	rjmp	.+402    	; 0x3dc <set_prescalar+0x306>
 24a:	8e b5       	in	r24, 0x2e	; 46
 24c:	8e 7f       	andi	r24, 0xFE	; 254
 24e:	8e bd       	out	0x2e, r24	; 46
 250:	8e b5       	in	r24, 0x2e	; 46
 252:	82 60       	ori	r24, 0x02	; 2
 254:	8e bd       	out	0x2e, r24	; 46
 256:	8e b5       	in	r24, 0x2e	; 46
 258:	8b 7f       	andi	r24, 0xFB	; 251
 25a:	8e bd       	out	0x2e, r24	; 46
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	be c0       	rjmp	.+380    	; 0x3dc <set_prescalar+0x306>
 260:	8e b5       	in	r24, 0x2e	; 46
 262:	81 60       	ori	r24, 0x01	; 1
 264:	8e bd       	out	0x2e, r24	; 46
 266:	8e b5       	in	r24, 0x2e	; 46
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	8e bd       	out	0x2e, r24	; 46
 26c:	8e b5       	in	r24, 0x2e	; 46
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	8e bd       	out	0x2e, r24	; 46
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	b3 c0       	rjmp	.+358    	; 0x3dc <set_prescalar+0x306>
 276:	8e b5       	in	r24, 0x2e	; 46
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	8e bd       	out	0x2e, r24	; 46
 27c:	8e b5       	in	r24, 0x2e	; 46
 27e:	8d 7f       	andi	r24, 0xFD	; 253
 280:	8e bd       	out	0x2e, r24	; 46
 282:	8e b5       	in	r24, 0x2e	; 46
 284:	84 60       	ori	r24, 0x04	; 4
 286:	8e bd       	out	0x2e, r24	; 46
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	a8 c0       	rjmp	.+336    	; 0x3dc <set_prescalar+0x306>
 28c:	8e b5       	in	r24, 0x2e	; 46
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	8e bd       	out	0x2e, r24	; 46
 292:	8e b5       	in	r24, 0x2e	; 46
 294:	8d 7f       	andi	r24, 0xFD	; 253
 296:	8e bd       	out	0x2e, r24	; 46
 298:	8e b5       	in	r24, 0x2e	; 46
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	8e bd       	out	0x2e, r24	; 46
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	9d c0       	rjmp	.+314    	; 0x3dc <set_prescalar+0x306>
 2a2:	c2 30       	cpi	r28, 0x02	; 2
 2a4:	d1 05       	cpc	r29, r1
 2a6:	a8 f0       	brcs	.+42     	; 0x2d2 <set_prescalar+0x1fc>
 2a8:	c8 30       	cpi	r28, 0x08	; 8
 2aa:	d1 05       	cpc	r29, r1
 2ac:	91 f0       	breq	.+36     	; 0x2d2 <set_prescalar+0x1fc>
 2ae:	c0 32       	cpi	r28, 0x20	; 32
 2b0:	d1 05       	cpc	r29, r1
 2b2:	79 f0       	breq	.+30     	; 0x2d2 <set_prescalar+0x1fc>
 2b4:	c0 34       	cpi	r28, 0x40	; 64
 2b6:	d1 05       	cpc	r29, r1
 2b8:	61 f0       	breq	.+24     	; 0x2d2 <set_prescalar+0x1fc>
 2ba:	c0 38       	cpi	r28, 0x80	; 128
 2bc:	d1 05       	cpc	r29, r1
 2be:	49 f0       	breq	.+18     	; 0x2d2 <set_prescalar+0x1fc>
 2c0:	c1 15       	cp	r28, r1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	d8 07       	cpc	r29, r24
 2c6:	29 f0       	breq	.+10     	; 0x2d2 <set_prescalar+0x1fc>
 2c8:	c1 15       	cp	r28, r1
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	d8 07       	cpc	r29, r24
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <set_prescalar+0x1fc>
 2d0:	82 c0       	rjmp	.+260    	; 0x3d6 <set_prescalar+0x300>
 2d2:	c0 32       	cpi	r28, 0x20	; 32
 2d4:	d1 05       	cpc	r29, r1
 2d6:	e1 f1       	breq	.+120    	; 0x350 <set_prescalar+0x27a>
 2d8:	38 f4       	brcc	.+14     	; 0x2e8 <set_prescalar+0x212>
 2da:	c1 30       	cpi	r28, 0x01	; 1
 2dc:	d1 05       	cpc	r29, r1
 2de:	11 f1       	breq	.+68     	; 0x324 <set_prescalar+0x24e>
 2e0:	b0 f0       	brcs	.+44     	; 0x30e <set_prescalar+0x238>
 2e2:	28 97       	sbiw	r28, 0x08	; 8
 2e4:	51 f1       	breq	.+84     	; 0x33a <set_prescalar+0x264>
 2e6:	79 c0       	rjmp	.+242    	; 0x3da <set_prescalar+0x304>
 2e8:	c0 38       	cpi	r28, 0x80	; 128
 2ea:	d1 05       	cpc	r29, r1
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <set_prescalar+0x21a>
 2ee:	46 c0       	rjmp	.+140    	; 0x37c <set_prescalar+0x2a6>
 2f0:	20 f4       	brcc	.+8      	; 0x2fa <set_prescalar+0x224>
 2f2:	c0 34       	cpi	r28, 0x40	; 64
 2f4:	d1 05       	cpc	r29, r1
 2f6:	b9 f1       	breq	.+110    	; 0x366 <set_prescalar+0x290>
 2f8:	70 c0       	rjmp	.+224    	; 0x3da <set_prescalar+0x304>
 2fa:	c1 15       	cp	r28, r1
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	d8 07       	cpc	r29, r24
 300:	09 f4       	brne	.+2      	; 0x304 <set_prescalar+0x22e>
 302:	47 c0       	rjmp	.+142    	; 0x392 <set_prescalar+0x2bc>
 304:	c1 15       	cp	r28, r1
 306:	d4 40       	sbci	r29, 0x04	; 4
 308:	09 f4       	brne	.+2      	; 0x30c <set_prescalar+0x236>
 30a:	4e c0       	rjmp	.+156    	; 0x3a8 <set_prescalar+0x2d2>
 30c:	66 c0       	rjmp	.+204    	; 0x3da <set_prescalar+0x304>
 30e:	85 b5       	in	r24, 0x25	; 37
 310:	8e 7f       	andi	r24, 0xFE	; 254
 312:	85 bd       	out	0x25, r24	; 37
 314:	85 b5       	in	r24, 0x25	; 37
 316:	8d 7f       	andi	r24, 0xFD	; 253
 318:	85 bd       	out	0x25, r24	; 37
 31a:	85 b5       	in	r24, 0x25	; 37
 31c:	8b 7f       	andi	r24, 0xFB	; 251
 31e:	85 bd       	out	0x25, r24	; 37
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	5c c0       	rjmp	.+184    	; 0x3dc <set_prescalar+0x306>
 324:	85 b5       	in	r24, 0x25	; 37
 326:	81 60       	ori	r24, 0x01	; 1
 328:	85 bd       	out	0x25, r24	; 37
 32a:	85 b5       	in	r24, 0x25	; 37
 32c:	8d 7f       	andi	r24, 0xFD	; 253
 32e:	85 bd       	out	0x25, r24	; 37
 330:	85 b5       	in	r24, 0x25	; 37
 332:	8b 7f       	andi	r24, 0xFB	; 251
 334:	85 bd       	out	0x25, r24	; 37
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	51 c0       	rjmp	.+162    	; 0x3dc <set_prescalar+0x306>
 33a:	85 b5       	in	r24, 0x25	; 37
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	85 bd       	out	0x25, r24	; 37
 340:	85 b5       	in	r24, 0x25	; 37
 342:	82 60       	ori	r24, 0x02	; 2
 344:	85 bd       	out	0x25, r24	; 37
 346:	85 b5       	in	r24, 0x25	; 37
 348:	8b 7f       	andi	r24, 0xFB	; 251
 34a:	85 bd       	out	0x25, r24	; 37
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	46 c0       	rjmp	.+140    	; 0x3dc <set_prescalar+0x306>
 350:	85 b5       	in	r24, 0x25	; 37
 352:	81 60       	ori	r24, 0x01	; 1
 354:	85 bd       	out	0x25, r24	; 37
 356:	85 b5       	in	r24, 0x25	; 37
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	85 bd       	out	0x25, r24	; 37
 35c:	85 b5       	in	r24, 0x25	; 37
 35e:	8b 7f       	andi	r24, 0xFB	; 251
 360:	85 bd       	out	0x25, r24	; 37
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	3b c0       	rjmp	.+118    	; 0x3dc <set_prescalar+0x306>
 366:	85 b5       	in	r24, 0x25	; 37
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	85 bd       	out	0x25, r24	; 37
 36c:	85 b5       	in	r24, 0x25	; 37
 36e:	8d 7f       	andi	r24, 0xFD	; 253
 370:	85 bd       	out	0x25, r24	; 37
 372:	85 b5       	in	r24, 0x25	; 37
 374:	84 60       	ori	r24, 0x04	; 4
 376:	85 bd       	out	0x25, r24	; 37
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	30 c0       	rjmp	.+96     	; 0x3dc <set_prescalar+0x306>
 37c:	85 b5       	in	r24, 0x25	; 37
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	85 bd       	out	0x25, r24	; 37
 382:	85 b5       	in	r24, 0x25	; 37
 384:	8d 7f       	andi	r24, 0xFD	; 253
 386:	85 bd       	out	0x25, r24	; 37
 388:	85 b5       	in	r24, 0x25	; 37
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	85 bd       	out	0x25, r24	; 37
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	25 c0       	rjmp	.+74     	; 0x3dc <set_prescalar+0x306>
 392:	85 b5       	in	r24, 0x25	; 37
 394:	8e 7f       	andi	r24, 0xFE	; 254
 396:	85 bd       	out	0x25, r24	; 37
 398:	85 b5       	in	r24, 0x25	; 37
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	85 bd       	out	0x25, r24	; 37
 39e:	85 b5       	in	r24, 0x25	; 37
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	85 bd       	out	0x25, r24	; 37
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	1a c0       	rjmp	.+52     	; 0x3dc <set_prescalar+0x306>
 3a8:	85 b5       	in	r24, 0x25	; 37
 3aa:	81 60       	ori	r24, 0x01	; 1
 3ac:	85 bd       	out	0x25, r24	; 37
 3ae:	85 b5       	in	r24, 0x25	; 37
 3b0:	82 60       	ori	r24, 0x02	; 2
 3b2:	85 bd       	out	0x25, r24	; 37
 3b4:	85 b5       	in	r24, 0x25	; 37
 3b6:	84 60       	ori	r24, 0x04	; 4
 3b8:	85 bd       	out	0x25, r24	; 37
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <set_prescalar+0x306>
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0d c0       	rjmp	.+26     	; 0x3dc <set_prescalar+0x306>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <set_prescalar+0x306>
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <set_prescalar+0x306>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <set_prescalar+0x306>
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <set_prescalar+0x306>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <set_prescalar+0x306>
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <set_prescalar+0x306>
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	08 95       	ret

000003e4 <Timer_start>:
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	c8 2f       	mov	r28, r24
 3ec:	8b 01       	movw	r16, r22
 3ee:	0e 94 65 00 	call	0xca	; 0xca <isValidTimer>
 3f2:	88 23       	and	r24, r24
 3f4:	31 f0       	breq	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f6:	b8 01       	movw	r22, r16
 3f8:	8c 2f       	mov	r24, r28
 3fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <set_prescalar>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	01 c0       	rjmp	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <PWM_init>:

// *The pwm frequency can be calculated from the equation: (F_CPU/(N*256)) for fast pwm and (F_CPU/(N*510)) for phase correct pwm
// Initialize the timers to start in pwm mode
EN_timerError_t PWM_init(uint8_t pwmPin, double dutyCycle, uint8_t mode) {
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
 414:	84 30       	cpi	r24, 0x04	; 4
 416:	08 f0       	brcs	.+2      	; 0x41a <PWM_init+0xe>
 418:	ad c0       	rjmp	.+346    	; 0x574 <PWM_init+0x168>
    return WRONG_PWM_PIN;
    }
  if (mode != PWM_FAST && mode != PWM_PHASE_CORRECT) {
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	92 0f       	add	r25, r18
 41e:	92 30       	cpi	r25, 0x02	; 2
 420:	08 f0       	brcs	.+2      	; 0x424 <PWM_init+0x18>
 422:	aa c0       	rjmp	.+340    	; 0x578 <PWM_init+0x16c>
 424:	6a 01       	movw	r12, r20
 426:	7b 01       	movw	r14, r22
    return WRONG_PWM_MODE;
    }
  switch (pwmPin) {
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	18 f4       	brcc	.+6      	; 0x432 <PWM_init+0x26>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	28 f0       	brcs	.+10     	; 0x43a <PWM_init+0x2e>
 430:	29 c0       	rjmp	.+82     	; 0x484 <PWM_init+0x78>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	09 f4       	brne	.+2      	; 0x438 <PWM_init+0x2c>
 436:	79 c0       	rjmp	.+242    	; 0x52a <PWM_init+0x11e>
 438:	a1 c0       	rjmp	.+322    	; 0x57c <PWM_init+0x170>
      case OC_0:
        switch (mode) {
 43a:	21 30       	cpi	r18, 0x01	; 1
 43c:	19 f0       	breq	.+6      	; 0x444 <PWM_init+0x38>
 43e:	22 30       	cpi	r18, 0x02	; 2
 440:	41 f0       	breq	.+16     	; 0x452 <PWM_init+0x46>
 442:	0d c0       	rjmp	.+26     	; 0x45e <PWM_init+0x52>
            case PWM_FAST:
              set_bit(TCCR0, WGM00);
 444:	83 b7       	in	r24, 0x33	; 51
 446:	80 64       	ori	r24, 0x40	; 64
 448:	83 bf       	out	0x33, r24	; 51
              set_bit(TCCR0, WGM01);
 44a:	83 b7       	in	r24, 0x33	; 51
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	83 bf       	out	0x33, r24	; 51
              break;
 450:	06 c0       	rjmp	.+12     	; 0x45e <PWM_init+0x52>
            case PWM_PHASE_CORRECT:
              set_bit(TCCR0, WGM00);
 452:	83 b7       	in	r24, 0x33	; 51
 454:	80 64       	ori	r24, 0x40	; 64
 456:	83 bf       	out	0x33, r24	; 51
              clear_bit(TCCR0, WGM01);
 458:	83 b7       	in	r24, 0x33	; 51
 45a:	87 7f       	andi	r24, 0xF7	; 247
 45c:	83 bf       	out	0x33, r24	; 51
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR0, COM00);
 45e:	83 b7       	in	r24, 0x33	; 51
 460:	8f 7e       	andi	r24, 0xEF	; 239
 462:	83 bf       	out	0x33, r24	; 51
        set_bit(TCCR0, COM01);
 464:	83 b7       	in	r24, 0x33	; 51
 466:	80 62       	ori	r24, 0x20	; 32
 468:	83 bf       	out	0x33, r24	; 51
#else 
        set_bit(TCCR0, COM00);
        set_bit(TCCR0, COM01);
#endif
        // The value in the OCR determines the duty cycle
        OCR0 = (uint8_t)(dutyCycle * 255);
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	4f e7       	ldi	r20, 0x7F	; 127
 470:	53 e4       	ldi	r21, 0x43	; 67
 472:	c7 01       	movw	r24, r14
 474:	b6 01       	movw	r22, r12
 476:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 47a:	0e 94 c6 02 	call	0x58c	; 0x58c <__fixunssfsi>
 47e:	6c bf       	out	0x3c, r22	; 60
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 480:	80 e0       	ldi	r24, 0x00	; 0
        set_bit(TCCR0, COM00);
        set_bit(TCCR0, COM01);
#endif
        // The value in the OCR determines the duty cycle
        OCR0 = (uint8_t)(dutyCycle * 255);
        break;
 482:	7f c0       	rjmp	.+254    	; 0x582 <PWM_init+0x176>
        //? The fix for this issue is to use ICR1 as TOP instead (mode 14 in fast pwm), thus allowing OCR1A and OCR1B to be used to set the duty cycle while ICR1 is used tyo set the frequency.
        //? Mode 15 can be used at the cost of disabling PWM on OC1A, but we get more glitch-free variable frequency PWM signal on OC1B due to the double buffering of OC1A, which ICR1 doesn't have.
        //? Since I don't need a variable frequency pwm signal, ICR1 will be used as TOP by default and set to MAX.
      case OC_1A:
      case OC_1B:
        switch (mode) {
 484:	21 30       	cpi	r18, 0x01	; 1
 486:	19 f0       	breq	.+6      	; 0x48e <PWM_init+0x82>
 488:	22 30       	cpi	r18, 0x02	; 2
 48a:	91 f0       	breq	.+36     	; 0x4b0 <PWM_init+0xa4>
 48c:	21 c0       	rjmp	.+66     	; 0x4d0 <PWM_init+0xc4>
              set_bit(TCCR1A, WGM10);
              set_bit(TCCR1A, WGM11);
              set_bit(TCCR1B, WGM12);
              clear_bit(TCCR1B, WGM13);
#elif TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1
              clear_bit(TCCR1A, WGM10);
 48e:	9f b5       	in	r25, 0x2f	; 47
 490:	9e 7f       	andi	r25, 0xFE	; 254
 492:	9f bd       	out	0x2f, r25	; 47
              set_bit(TCCR1A, WGM11);
 494:	9f b5       	in	r25, 0x2f	; 47
 496:	92 60       	ori	r25, 0x02	; 2
 498:	9f bd       	out	0x2f, r25	; 47
              set_bit(TCCR1B, WGM12);
 49a:	9e b5       	in	r25, 0x2e	; 46
 49c:	98 60       	ori	r25, 0x08	; 8
 49e:	9e bd       	out	0x2e, r25	; 46
              set_bit(TCCR1B, WGM13);
 4a0:	9e b5       	in	r25, 0x2e	; 46
 4a2:	90 61       	ori	r25, 0x10	; 16
 4a4:	9e bd       	out	0x2e, r25	; 46
              ICR1 = TIMER_1_FAST_PWM_TOP_ICR1_VALUE;
 4a6:	2f ef       	ldi	r18, 0xFF	; 255
 4a8:	3f ef       	ldi	r19, 0xFF	; 255
 4aa:	37 bd       	out	0x27, r19	; 39
 4ac:	26 bd       	out	0x26, r18	; 38
              set_bit(TCCR1A, WGM10);
              set_bit(TCCR1A, WGM11);
              set_bit(TCCR1B, WGM12);
              set_bit(TCCR1B, WGM13);
#endif
              break;
 4ae:	10 c0       	rjmp	.+32     	; 0x4d0 <PWM_init+0xc4>
              set_bit(TCCR1A, WGM10);
              set_bit(TCCR1A, WGM11);
              clear_bit(TCCR1B, WGM12);
              clear_bit(TCCR1B, WGM13);
#elif TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1
              clear_bit(TCCR1A, WGM10);
 4b0:	9f b5       	in	r25, 0x2f	; 47
 4b2:	9e 7f       	andi	r25, 0xFE	; 254
 4b4:	9f bd       	out	0x2f, r25	; 47
              set_bit(TCCR1A, WGM11);
 4b6:	9f b5       	in	r25, 0x2f	; 47
 4b8:	92 60       	ori	r25, 0x02	; 2
 4ba:	9f bd       	out	0x2f, r25	; 47
              clear_bit(TCCR1B, WGM12);
 4bc:	9e b5       	in	r25, 0x2e	; 46
 4be:	97 7f       	andi	r25, 0xF7	; 247
 4c0:	9e bd       	out	0x2e, r25	; 46
              set_bit(TCCR1B, WGM13);
 4c2:	9e b5       	in	r25, 0x2e	; 46
 4c4:	90 61       	ori	r25, 0x10	; 16
 4c6:	9e bd       	out	0x2e, r25	; 46
              ICR1 = TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1_VALUE;
 4c8:	2f ef       	ldi	r18, 0xFF	; 255
 4ca:	3f ef       	ldi	r19, 0xFF	; 255
 4cc:	37 bd       	out	0x27, r19	; 39
 4ce:	26 bd       	out	0x26, r18	; 38
              set_bit(TCCR1B, WGM13);
#endif
              break;
          }
        // Enable the PWM function of the OC pin.
        switch (pwmPin) {
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	19 f0       	breq	.+6      	; 0x4da <PWM_init+0xce>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	a9 f0       	breq	.+42     	; 0x502 <PWM_init+0xf6>
 4d8:	53 c0       	rjmp	.+166    	; 0x580 <PWM_init+0x174>
            case OC_1A:
#ifdef PWM_NON_INVERTED_MODE
              clear_bit(TCCR1A, COM1A0);
 4da:	8f b5       	in	r24, 0x2f	; 47
 4dc:	8f 7b       	andi	r24, 0xBF	; 191
 4de:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, COM1A1);
 4e0:	8f b5       	in	r24, 0x2f	; 47
 4e2:	80 68       	ori	r24, 0x80	; 128
 4e4:	8f bd       	out	0x2f, r24	; 47
#else 
              set_bit(TCCR1A, COM1A0);
              set_bit(TCCR1A, COM1A1);
#endif
        OCR1A = (uint16_t)(dutyCycle * 65535);
 4e6:	20 e0       	ldi	r18, 0x00	; 0
 4e8:	3f ef       	ldi	r19, 0xFF	; 255
 4ea:	4f e7       	ldi	r20, 0x7F	; 127
 4ec:	57 e4       	ldi	r21, 0x47	; 71
 4ee:	c7 01       	movw	r24, r14
 4f0:	b6 01       	movw	r22, r12
 4f2:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 4f6:	0e 94 c6 02 	call	0x58c	; 0x58c <__fixunssfsi>
 4fa:	7b bd       	out	0x2b, r23	; 43
 4fc:	6a bd       	out	0x2a, r22	; 42
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
#else 
              set_bit(TCCR1A, COM1A0);
              set_bit(TCCR1A, COM1A1);
#endif
        OCR1A = (uint16_t)(dutyCycle * 65535);
              break;
 500:	40 c0       	rjmp	.+128    	; 0x582 <PWM_init+0x176>
            case OC_1B:
#ifdef PWM_NON_INVERTED_MODE
              clear_bit(TCCR1A, COM1B0);
 502:	8f b5       	in	r24, 0x2f	; 47
 504:	8f 7e       	andi	r24, 0xEF	; 239
 506:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, COM1B1);
 508:	8f b5       	in	r24, 0x2f	; 47
 50a:	80 62       	ori	r24, 0x20	; 32
 50c:	8f bd       	out	0x2f, r24	; 47
#else 
              set_bit(TCCR1A, COM1B0);
              set_bit(TCCR1A, COM1B1);
#endif
        OCR1B = (uint16_t)(dutyCycle * 65535);
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	3f ef       	ldi	r19, 0xFF	; 255
 512:	4f e7       	ldi	r20, 0x7F	; 127
 514:	57 e4       	ldi	r21, 0x47	; 71
 516:	c7 01       	movw	r24, r14
 518:	b6 01       	movw	r22, r12
 51a:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 51e:	0e 94 c6 02 	call	0x58c	; 0x58c <__fixunssfsi>
 522:	79 bd       	out	0x29, r23	; 41
 524:	68 bd       	out	0x28, r22	; 40
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 526:	80 e0       	ldi	r24, 0x00	; 0
#else 
              set_bit(TCCR1A, COM1B0);
              set_bit(TCCR1A, COM1B1);
#endif
        OCR1B = (uint16_t)(dutyCycle * 65535);
              break;
 528:	2c c0       	rjmp	.+88     	; 0x582 <PWM_init+0x176>
          }
        break;
      case OC_2:
        switch (mode) {
 52a:	21 30       	cpi	r18, 0x01	; 1
 52c:	19 f0       	breq	.+6      	; 0x534 <PWM_init+0x128>
 52e:	22 30       	cpi	r18, 0x02	; 2
 530:	41 f0       	breq	.+16     	; 0x542 <PWM_init+0x136>
 532:	0d c0       	rjmp	.+26     	; 0x54e <PWM_init+0x142>
            case PWM_FAST:
              set_bit(TCCR2, WGM20);
 534:	85 b5       	in	r24, 0x25	; 37
 536:	80 64       	ori	r24, 0x40	; 64
 538:	85 bd       	out	0x25, r24	; 37
              set_bit(TCCR2, WGM21);
 53a:	85 b5       	in	r24, 0x25	; 37
 53c:	88 60       	ori	r24, 0x08	; 8
 53e:	85 bd       	out	0x25, r24	; 37
              break;
 540:	06 c0       	rjmp	.+12     	; 0x54e <PWM_init+0x142>
            case PWM_PHASE_CORRECT:
              set_bit(TCCR2, WGM20);
 542:	85 b5       	in	r24, 0x25	; 37
 544:	80 64       	ori	r24, 0x40	; 64
 546:	85 bd       	out	0x25, r24	; 37
              clear_bit(TCCR2, WGM21);
 548:	85 b5       	in	r24, 0x25	; 37
 54a:	87 7f       	andi	r24, 0xF7	; 247
 54c:	85 bd       	out	0x25, r24	; 37
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR2, COM20);
 54e:	85 b5       	in	r24, 0x25	; 37
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	85 bd       	out	0x25, r24	; 37
        set_bit(TCCR2, COM21);
 554:	85 b5       	in	r24, 0x25	; 37
 556:	80 62       	ori	r24, 0x20	; 32
 558:	85 bd       	out	0x25, r24	; 37
#else 
        set_bit(TCCR2, COM20);
        set_bit(TCCR2, COM21);
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	4f e7       	ldi	r20, 0x7F	; 127
 560:	53 e4       	ldi	r21, 0x43	; 67
 562:	c7 01       	movw	r24, r14
 564:	b6 01       	movw	r22, r12
 566:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 56a:	0e 94 c6 02 	call	0x58c	; 0x58c <__fixunssfsi>
 56e:	63 bd       	out	0x23, r22	; 35
        break;
    }
  return TIMER_OK;
 570:	80 e0       	ldi	r24, 0x00	; 0
        set_bit(TCCR2, COM20);
        set_bit(TCCR2, COM21);
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
 572:	07 c0       	rjmp	.+14     	; 0x582 <PWM_init+0x176>

// *The pwm frequency can be calculated from the equation: (F_CPU/(N*256)) for fast pwm and (F_CPU/(N*510)) for phase correct pwm
// Initialize the timers to start in pwm mode
EN_timerError_t PWM_init(uint8_t pwmPin, double dutyCycle, uint8_t mode) {
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
    return WRONG_PWM_PIN;
 574:	86 e0       	ldi	r24, 0x06	; 6
 576:	05 c0       	rjmp	.+10     	; 0x582 <PWM_init+0x176>
    }
  if (mode != PWM_FAST && mode != PWM_PHASE_CORRECT) {
    return WRONG_PWM_MODE;
 578:	85 e0       	ldi	r24, 0x05	; 5
 57a:	03 c0       	rjmp	.+6      	; 0x582 <PWM_init+0x176>
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	01 c0       	rjmp	.+2      	; 0x582 <PWM_init+0x176>
 580:	80 e0       	ldi	r24, 0x00	; 0
  }
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	08 95       	ret

0000058c <__fixunssfsi>:
 58c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_splitA>
 590:	88 f0       	brcs	.+34     	; 0x5b4 <__fixunssfsi+0x28>
 592:	9f 57       	subi	r25, 0x7F	; 127
 594:	98 f0       	brcs	.+38     	; 0x5bc <__fixunssfsi+0x30>
 596:	b9 2f       	mov	r27, r25
 598:	99 27       	eor	r25, r25
 59a:	b7 51       	subi	r27, 0x17	; 23
 59c:	b0 f0       	brcs	.+44     	; 0x5ca <__fixunssfsi+0x3e>
 59e:	e1 f0       	breq	.+56     	; 0x5d8 <__fixunssfsi+0x4c>
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	1a f0       	brmi	.+6      	; 0x5b0 <__fixunssfsi+0x24>
 5aa:	ba 95       	dec	r27
 5ac:	c9 f7       	brne	.-14     	; 0x5a0 <__fixunssfsi+0x14>
 5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <__fixunssfsi+0x4c>
 5b0:	b1 30       	cpi	r27, 0x01	; 1
 5b2:	91 f0       	breq	.+36     	; 0x5d8 <__fixunssfsi+0x4c>
 5b4:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_zero>
 5b8:	b1 e0       	ldi	r27, 0x01	; 1
 5ba:	08 95       	ret
 5bc:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 5c0:	67 2f       	mov	r22, r23
 5c2:	78 2f       	mov	r23, r24
 5c4:	88 27       	eor	r24, r24
 5c6:	b8 5f       	subi	r27, 0xF8	; 248
 5c8:	39 f0       	breq	.+14     	; 0x5d8 <__fixunssfsi+0x4c>
 5ca:	b9 3f       	cpi	r27, 0xF9	; 249
 5cc:	cc f3       	brlt	.-14     	; 0x5c0 <__fixunssfsi+0x34>
 5ce:	86 95       	lsr	r24
 5d0:	77 95       	ror	r23
 5d2:	67 95       	ror	r22
 5d4:	b3 95       	inc	r27
 5d6:	d9 f7       	brne	.-10     	; 0x5ce <__fixunssfsi+0x42>
 5d8:	3e f4       	brtc	.+14     	; 0x5e8 <__fixunssfsi+0x5c>
 5da:	90 95       	com	r25
 5dc:	80 95       	com	r24
 5de:	70 95       	com	r23
 5e0:	61 95       	neg	r22
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__mulsf3>:
 63c:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3x>
 640:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_round>
 644:	0e 94 94 03 	call	0x728	; 0x728 <__fp_pscA>
 648:	38 f0       	brcs	.+14     	; 0x658 <__mulsf3+0x1c>
 64a:	0e 94 9b 03 	call	0x736	; 0x736 <__fp_pscB>
 64e:	20 f0       	brcs	.+8      	; 0x658 <__mulsf3+0x1c>
 650:	95 23       	and	r25, r21
 652:	11 f0       	breq	.+4      	; 0x658 <__mulsf3+0x1c>
 654:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_inf>
 658:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_nan>
 65c:	11 24       	eor	r1, r1
 65e:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>

00000662 <__mulsf3x>:
 662:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 666:	70 f3       	brcs	.-36     	; 0x644 <__mulsf3+0x8>

00000668 <__mulsf3_pse>:
 668:	95 9f       	mul	r25, r21
 66a:	c1 f3       	breq	.-16     	; 0x65c <__mulsf3+0x20>
 66c:	95 0f       	add	r25, r21
 66e:	50 e0       	ldi	r21, 0x00	; 0
 670:	55 1f       	adc	r21, r21
 672:	62 9f       	mul	r22, r18
 674:	f0 01       	movw	r30, r0
 676:	72 9f       	mul	r23, r18
 678:	bb 27       	eor	r27, r27
 67a:	f0 0d       	add	r31, r0
 67c:	b1 1d       	adc	r27, r1
 67e:	63 9f       	mul	r22, r19
 680:	aa 27       	eor	r26, r26
 682:	f0 0d       	add	r31, r0
 684:	b1 1d       	adc	r27, r1
 686:	aa 1f       	adc	r26, r26
 688:	64 9f       	mul	r22, r20
 68a:	66 27       	eor	r22, r22
 68c:	b0 0d       	add	r27, r0
 68e:	a1 1d       	adc	r26, r1
 690:	66 1f       	adc	r22, r22
 692:	82 9f       	mul	r24, r18
 694:	22 27       	eor	r18, r18
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	62 1f       	adc	r22, r18
 69c:	73 9f       	mul	r23, r19
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	62 1f       	adc	r22, r18
 6a4:	83 9f       	mul	r24, r19
 6a6:	a0 0d       	add	r26, r0
 6a8:	61 1d       	adc	r22, r1
 6aa:	22 1f       	adc	r18, r18
 6ac:	74 9f       	mul	r23, r20
 6ae:	33 27       	eor	r19, r19
 6b0:	a0 0d       	add	r26, r0
 6b2:	61 1d       	adc	r22, r1
 6b4:	23 1f       	adc	r18, r19
 6b6:	84 9f       	mul	r24, r20
 6b8:	60 0d       	add	r22, r0
 6ba:	21 1d       	adc	r18, r1
 6bc:	82 2f       	mov	r24, r18
 6be:	76 2f       	mov	r23, r22
 6c0:	6a 2f       	mov	r22, r26
 6c2:	11 24       	eor	r1, r1
 6c4:	9f 57       	subi	r25, 0x7F	; 127
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	9a f0       	brmi	.+38     	; 0x6f0 <__mulsf3_pse+0x88>
 6ca:	f1 f0       	breq	.+60     	; 0x708 <__mulsf3_pse+0xa0>
 6cc:	88 23       	and	r24, r24
 6ce:	4a f0       	brmi	.+18     	; 0x6e2 <__mulsf3_pse+0x7a>
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	bb 1f       	adc	r27, r27
 6d6:	66 1f       	adc	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	a9 f7       	brne	.-22     	; 0x6cc <__mulsf3_pse+0x64>
 6e2:	9e 3f       	cpi	r25, 0xFE	; 254
 6e4:	51 05       	cpc	r21, r1
 6e6:	80 f0       	brcs	.+32     	; 0x708 <__mulsf3_pse+0xa0>
 6e8:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_inf>
 6ec:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 6f0:	5f 3f       	cpi	r21, 0xFF	; 255
 6f2:	e4 f3       	brlt	.-8      	; 0x6ec <__mulsf3_pse+0x84>
 6f4:	98 3e       	cpi	r25, 0xE8	; 232
 6f6:	d4 f3       	brlt	.-12     	; 0x6ec <__mulsf3_pse+0x84>
 6f8:	86 95       	lsr	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b7 95       	ror	r27
 700:	f7 95       	ror	r31
 702:	e7 95       	ror	r30
 704:	9f 5f       	subi	r25, 0xFF	; 255
 706:	c1 f7       	brne	.-16     	; 0x6f8 <__mulsf3_pse+0x90>
 708:	fe 2b       	or	r31, r30
 70a:	88 0f       	add	r24, r24
 70c:	91 1d       	adc	r25, r1
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__fp_inf>:
 716:	97 f9       	bld	r25, 7
 718:	9f 67       	ori	r25, 0x7F	; 127
 71a:	80 e8       	ldi	r24, 0x80	; 128
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	08 95       	ret

00000722 <__fp_nan>:
 722:	9f ef       	ldi	r25, 0xFF	; 255
 724:	80 ec       	ldi	r24, 0xC0	; 192
 726:	08 95       	ret

00000728 <__fp_pscA>:
 728:	00 24       	eor	r0, r0
 72a:	0a 94       	dec	r0
 72c:	16 16       	cp	r1, r22
 72e:	17 06       	cpc	r1, r23
 730:	18 06       	cpc	r1, r24
 732:	09 06       	cpc	r0, r25
 734:	08 95       	ret

00000736 <__fp_pscB>:
 736:	00 24       	eor	r0, r0
 738:	0a 94       	dec	r0
 73a:	12 16       	cp	r1, r18
 73c:	13 06       	cpc	r1, r19
 73e:	14 06       	cpc	r1, r20
 740:	05 06       	cpc	r0, r21
 742:	08 95       	ret

00000744 <__fp_round>:
 744:	09 2e       	mov	r0, r25
 746:	03 94       	inc	r0
 748:	00 0c       	add	r0, r0
 74a:	11 f4       	brne	.+4      	; 0x750 <__fp_round+0xc>
 74c:	88 23       	and	r24, r24
 74e:	52 f0       	brmi	.+20     	; 0x764 <__fp_round+0x20>
 750:	bb 0f       	add	r27, r27
 752:	40 f4       	brcc	.+16     	; 0x764 <__fp_round+0x20>
 754:	bf 2b       	or	r27, r31
 756:	11 f4       	brne	.+4      	; 0x75c <__fp_round+0x18>
 758:	60 ff       	sbrs	r22, 0
 75a:	04 c0       	rjmp	.+8      	; 0x764 <__fp_round+0x20>
 75c:	6f 5f       	subi	r22, 0xFF	; 255
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
