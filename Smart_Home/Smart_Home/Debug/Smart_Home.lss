
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e4c  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e0  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f1d  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00002fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a2  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf4  00000000  00000000  000037da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000043ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8a:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <servo_init>:

#include "servo.h"

 // Initialized the servo
void servo_init(){
  DIO_init(SERVO_PIN, SERVO_PORT, OUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e4       	ldi	r22, 0x44	; 68
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_init>
  PWM_init(SERVO_PWM_PIN, 0.05, PWM_PHASE_CORRECT);
  9c:	22 e0       	ldi	r18, 0x02	; 2
  9e:	4d ec       	ldi	r20, 0xCD	; 205
  a0:	5c ec       	ldi	r21, 0xCC	; 204
  a2:	6c e4       	ldi	r22, 0x4C	; 76
  a4:	7d e3       	ldi	r23, 0x3D	; 61
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 ad 02 	call	0x55a	; 0x55a <PWM_init>
  Timer_start(TIMER_1, 8);
  ac:	68 e0       	ldi	r22, 0x08	; 8
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 99 02 	call	0x532	; 0x532 <Timer_start>
  b6:	08 95       	ret

000000b8 <main>:
#include "HAL/Servo/servo.h"
#include "MCAL/ADC/adc.h"
#include "MCAL/Timer/timer.h"

int main(void) {
	servo_init();
  b8:	0e 94 49 00 	call	0x92	; 0x92 <servo_init>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x4>

000000be <isValidPinNumber>:
bool isValidState(uint8_t state) {
	if (state == HIGH || state == LOW) {
		return true;
		}
	return false;
	}
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	10 f4       	brcc	.+4      	; 0xc6 <isValidPinNumber+0x8>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret

000000ca <isValidPortNumber>:
  ca:	81 54       	subi	r24, 0x41	; 65
  cc:	84 30       	cpi	r24, 0x04	; 4
  ce:	10 f4       	brcc	.+4      	; 0xd4 <isValidPortNumber+0xa>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	08 95       	ret
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret

000000d8 <isValidDirection>:
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	10 f4       	brcc	.+4      	; 0xe0 <isValidDirection+0x8>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	08 95       	ret
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret

000000e4 <DIO_init>:

// Initialize the pin direction
EN_dioError_t DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction) {
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	c8 2f       	mov	r28, r24
  ec:	d6 2f       	mov	r29, r22
  ee:	14 2f       	mov	r17, r20
	// Validate the pin number
	if (!isValidPinNumber(pinNumber)) {
  f0:	0e 94 5f 00 	call	0xbe	; 0xbe <isValidPinNumber>
  f4:	88 23       	and	r24, r24
  f6:	09 f4       	brne	.+2      	; 0xfa <DIO_init+0x16>
  f8:	84 c0       	rjmp	.+264    	; 0x202 <DIO_init+0x11e>
		return WRONG_PIN;
		}
	// Validate the port number
	if (!isValidPortNumber(portNumber)) {
  fa:	8d 2f       	mov	r24, r29
  fc:	0e 94 65 00 	call	0xca	; 0xca <isValidPortNumber>
 100:	88 23       	and	r24, r24
 102:	09 f4       	brne	.+2      	; 0x106 <DIO_init+0x22>
 104:	80 c0       	rjmp	.+256    	; 0x206 <DIO_init+0x122>
		return WRONG_PORT;
		}
	// Validate the direction
	if (!isValidDirection(direction)) {
 106:	81 2f       	mov	r24, r17
 108:	0e 94 6c 00 	call	0xd8	; 0xd8 <isValidDirection>
 10c:	88 23       	and	r24, r24
 10e:	09 f4       	brne	.+2      	; 0x112 <DIO_init+0x2e>
 110:	7c c0       	rjmp	.+248    	; 0x20a <DIO_init+0x126>
		return WRONG_DIRECTION;
		}
	switch (portNumber) {
 112:	d2 34       	cpi	r29, 0x42	; 66
 114:	29 f1       	breq	.+74     	; 0x160 <DIO_init+0x7c>
 116:	18 f4       	brcc	.+6      	; 0x11e <DIO_init+0x3a>
 118:	d1 34       	cpi	r29, 0x41	; 65
 11a:	39 f0       	breq	.+14     	; 0x12a <DIO_init+0x46>
 11c:	78 c0       	rjmp	.+240    	; 0x20e <DIO_init+0x12a>
 11e:	d3 34       	cpi	r29, 0x43	; 67
 120:	d1 f1       	breq	.+116    	; 0x196 <DIO_init+0xb2>
 122:	d4 34       	cpi	r29, 0x44	; 68
 124:	09 f4       	brne	.+2      	; 0x128 <DIO_init+0x44>
 126:	52 c0       	rjmp	.+164    	; 0x1cc <DIO_init+0xe8>
 128:	72 c0       	rjmp	.+228    	; 0x20e <DIO_init+0x12a>
			case PORT_A:
				if (direction == OUT) {
 12a:	11 30       	cpi	r17, 0x01	; 1
 12c:	61 f4       	brne	.+24     	; 0x146 <DIO_init+0x62>
					set_bit(DDRA, pinNumber);
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_init+0x56>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	ca 95       	dec	r28
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_init+0x52>
 13e:	82 2b       	or	r24, r18
 140:	8a bb       	out	0x1a, r24	; 26
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	65 c0       	rjmp	.+202    	; 0x210 <DIO_init+0x12c>
			case PORT_A:
				if (direction == OUT) {
					set_bit(DDRA, pinNumber);
					}
				else {
					clear_bit(DDRA, pinNumber);
 146:	2a b3       	in	r18, 0x1a	; 26
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_init+0x6e>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	ca 95       	dec	r28
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_init+0x6a>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	8a bb       	out	0x1a, r24	; 26
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	58 c0       	rjmp	.+176    	; 0x210 <DIO_init+0x12c>
				else {
					clear_bit(DDRA, pinNumber);
					}
				break;
			case PORT_B:
				if (direction == OUT) {
 160:	11 30       	cpi	r17, 0x01	; 1
 162:	61 f4       	brne	.+24     	; 0x17c <DIO_init+0x98>
					set_bit(DDRB, pinNumber);
 164:	27 b3       	in	r18, 0x17	; 23
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_init+0x8c>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	ca 95       	dec	r28
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_init+0x88>
 174:	82 2b       	or	r24, r18
 176:	87 bb       	out	0x17, r24	; 23
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	4a c0       	rjmp	.+148    	; 0x210 <DIO_init+0x12c>
			case PORT_B:
				if (direction == OUT) {
					set_bit(DDRB, pinNumber);
					}
				else {
					clear_bit(DDRB, pinNumber);
 17c:	27 b3       	in	r18, 0x17	; 23
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_init+0xa4>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	ca 95       	dec	r28
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_init+0xa0>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	87 bb       	out	0x17, r24	; 23
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	3d c0       	rjmp	.+122    	; 0x210 <DIO_init+0x12c>
				else {
					clear_bit(DDRB, pinNumber);
					}
				break;
			case PORT_C:
				if (direction == OUT) {
 196:	11 30       	cpi	r17, 0x01	; 1
 198:	61 f4       	brne	.+24     	; 0x1b2 <DIO_init+0xce>
					set_bit(DDRC, pinNumber);
 19a:	24 b3       	in	r18, 0x14	; 20
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_init+0xc2>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	ca 95       	dec	r28
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_init+0xbe>
 1aa:	82 2b       	or	r24, r18
 1ac:	84 bb       	out	0x14, r24	; 20
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <DIO_init+0x12c>
			case PORT_C:
				if (direction == OUT) {
					set_bit(DDRC, pinNumber);
					}
				else {
					clear_bit(DDRC, pinNumber);
 1b2:	24 b3       	in	r18, 0x14	; 20
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_init+0xda>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	ca 95       	dec	r28
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_init+0xd6>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	84 bb       	out	0x14, r24	; 20
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	22 c0       	rjmp	.+68     	; 0x210 <DIO_init+0x12c>
				else {
					clear_bit(DDRC, pinNumber);
					}
				break;
			case PORT_D:
				if (direction == OUT) {
 1cc:	11 30       	cpi	r17, 0x01	; 1
 1ce:	61 f4       	brne	.+24     	; 0x1e8 <DIO_init+0x104>
					set_bit(DDRD, pinNumber);
 1d0:	21 b3       	in	r18, 0x11	; 17
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_init+0xf8>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	ca 95       	dec	r28
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_init+0xf4>
 1e0:	82 2b       	or	r24, r18
 1e2:	81 bb       	out	0x11, r24	; 17
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	14 c0       	rjmp	.+40     	; 0x210 <DIO_init+0x12c>
			case PORT_D:
				if (direction == OUT) {
					set_bit(DDRD, pinNumber);
					}
				else {
					clear_bit(DDRD, pinNumber);
 1e8:	21 b3       	in	r18, 0x11	; 17
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_init+0x110>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	ca 95       	dec	r28
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_init+0x10c>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	81 bb       	out	0x11, r24	; 17
					}
				break;
		}
	return DIO_OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	07 c0       	rjmp	.+14     	; 0x210 <DIO_init+0x12c>

// Initialize the pin direction
EN_dioError_t DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction) {
	// Validate the pin number
	if (!isValidPinNumber(pinNumber)) {
		return WRONG_PIN;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	05 c0       	rjmp	.+10     	; 0x210 <DIO_init+0x12c>
		}
	// Validate the port number
	if (!isValidPortNumber(portNumber)) {
		return WRONG_PORT;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	03 c0       	rjmp	.+6      	; 0x210 <DIO_init+0x12c>
		}
	// Validate the direction
	if (!isValidDirection(direction)) {
		return WRONG_DIRECTION;
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	01 c0       	rjmp	.+2      	; 0x210 <DIO_init+0x12c>
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
	}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	08 95       	ret

00000218 <isValidTimer>:
          }
        break;
    }
  // Everything went well
  return TIMER_OK;
  }
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	10 f4       	brcc	.+4      	; 0x220 <isValidTimer+0x8>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <set_prescalar>:
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	18 2f       	mov	r17, r24
 22c:	eb 01       	movw	r28, r22
 22e:	0e 94 0c 01 	call	0x218	; 0x218 <isValidTimer>
 232:	88 23       	and	r24, r24
 234:	09 f4       	brne	.+2      	; 0x238 <set_prescalar+0x14>
 236:	6a c1       	rjmp	.+724    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 238:	11 30       	cpi	r17, 0x01	; 1
 23a:	09 f4       	brne	.+2      	; 0x23e <set_prescalar+0x1a>
 23c:	6f c0       	rjmp	.+222    	; 0x31c <set_prescalar+0xf8>
 23e:	20 f0       	brcs	.+8      	; 0x248 <set_prescalar+0x24>
 240:	12 30       	cpi	r17, 0x02	; 2
 242:	09 f4       	brne	.+2      	; 0x246 <set_prescalar+0x22>
 244:	d5 c0       	rjmp	.+426    	; 0x3f0 <set_prescalar+0x1cc>
 246:	64 c1       	rjmp	.+712    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 248:	c2 30       	cpi	r28, 0x02	; 2
 24a:	d1 05       	cpc	r29, r1
 24c:	78 f0       	brcs	.+30     	; 0x26c <set_prescalar+0x48>
 24e:	c8 30       	cpi	r28, 0x08	; 8
 250:	d1 05       	cpc	r29, r1
 252:	61 f0       	breq	.+24     	; 0x26c <set_prescalar+0x48>
 254:	c0 34       	cpi	r28, 0x40	; 64
 256:	d1 05       	cpc	r29, r1
 258:	49 f0       	breq	.+18     	; 0x26c <set_prescalar+0x48>
 25a:	c1 15       	cp	r28, r1
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	d8 07       	cpc	r29, r24
 260:	29 f0       	breq	.+10     	; 0x26c <set_prescalar+0x48>
 262:	c1 15       	cp	r28, r1
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	d8 07       	cpc	r29, r24
 268:	09 f0       	breq	.+2      	; 0x26c <set_prescalar+0x48>
 26a:	54 c1       	rjmp	.+680    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 26c:	c8 30       	cpi	r28, 0x08	; 8
 26e:	d1 05       	cpc	r29, r1
 270:	49 f1       	breq	.+82     	; 0x2c4 <set_prescalar+0xa0>
 272:	28 f4       	brcc	.+10     	; 0x27e <set_prescalar+0x5a>
 274:	20 97       	sbiw	r28, 0x00	; 0
 276:	81 f0       	breq	.+32     	; 0x298 <set_prescalar+0x74>
 278:	21 97       	sbiw	r28, 0x01	; 1
 27a:	c9 f0       	breq	.+50     	; 0x2ae <set_prescalar+0x8a>
 27c:	4d c1       	rjmp	.+666    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 27e:	c1 15       	cp	r28, r1
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	d8 07       	cpc	r29, r24
 284:	a9 f1       	breq	.+106    	; 0x2f0 <set_prescalar+0xcc>
 286:	c1 15       	cp	r28, r1
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	d8 07       	cpc	r29, r24
 28c:	e1 f1       	breq	.+120    	; 0x306 <set_prescalar+0xe2>
 28e:	c0 34       	cpi	r28, 0x40	; 64
 290:	d1 05       	cpc	r29, r1
 292:	09 f0       	breq	.+2      	; 0x296 <set_prescalar+0x72>
 294:	41 c1       	rjmp	.+642    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 296:	21 c0       	rjmp	.+66     	; 0x2da <set_prescalar+0xb6>
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	83 bf       	out	0x33, r24	; 51
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	8d 7f       	andi	r24, 0xFD	; 253
 2a2:	83 bf       	out	0x33, r24	; 51
 2a4:	83 b7       	in	r24, 0x33	; 51
 2a6:	8b 7f       	andi	r24, 0xFB	; 251
 2a8:	83 bf       	out	0x33, r24	; 51
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	3e c1       	rjmp	.+636    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 2ae:	83 b7       	in	r24, 0x33	; 51
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	83 bf       	out	0x33, r24	; 51
 2b4:	83 b7       	in	r24, 0x33	; 51
 2b6:	8d 7f       	andi	r24, 0xFD	; 253
 2b8:	83 bf       	out	0x33, r24	; 51
 2ba:	83 b7       	in	r24, 0x33	; 51
 2bc:	8b 7f       	andi	r24, 0xFB	; 251
 2be:	83 bf       	out	0x33, r24	; 51
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	33 c1       	rjmp	.+614    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 2c4:	83 b7       	in	r24, 0x33	; 51
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	83 bf       	out	0x33, r24	; 51
 2ca:	83 b7       	in	r24, 0x33	; 51
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	83 bf       	out	0x33, r24	; 51
 2d0:	83 b7       	in	r24, 0x33	; 51
 2d2:	8b 7f       	andi	r24, 0xFB	; 251
 2d4:	83 bf       	out	0x33, r24	; 51
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	28 c1       	rjmp	.+592    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 2da:	83 b7       	in	r24, 0x33	; 51
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	83 bf       	out	0x33, r24	; 51
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	83 bf       	out	0x33, r24	; 51
 2e6:	83 b7       	in	r24, 0x33	; 51
 2e8:	8b 7f       	andi	r24, 0xFB	; 251
 2ea:	83 bf       	out	0x33, r24	; 51
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	1d c1       	rjmp	.+570    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 2f0:	83 b7       	in	r24, 0x33	; 51
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	83 bf       	out	0x33, r24	; 51
 2f6:	83 b7       	in	r24, 0x33	; 51
 2f8:	8d 7f       	andi	r24, 0xFD	; 253
 2fa:	83 bf       	out	0x33, r24	; 51
 2fc:	83 b7       	in	r24, 0x33	; 51
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	83 bf       	out	0x33, r24	; 51
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	12 c1       	rjmp	.+548    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 306:	83 b7       	in	r24, 0x33	; 51
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	83 bf       	out	0x33, r24	; 51
 30c:	83 b7       	in	r24, 0x33	; 51
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	83 bf       	out	0x33, r24	; 51
 312:	83 b7       	in	r24, 0x33	; 51
 314:	84 60       	ori	r24, 0x04	; 4
 316:	83 bf       	out	0x33, r24	; 51
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	07 c1       	rjmp	.+526    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 31c:	c2 30       	cpi	r28, 0x02	; 2
 31e:	d1 05       	cpc	r29, r1
 320:	78 f0       	brcs	.+30     	; 0x340 <set_prescalar+0x11c>
 322:	c8 30       	cpi	r28, 0x08	; 8
 324:	d1 05       	cpc	r29, r1
 326:	61 f0       	breq	.+24     	; 0x340 <set_prescalar+0x11c>
 328:	c0 34       	cpi	r28, 0x40	; 64
 32a:	d1 05       	cpc	r29, r1
 32c:	49 f0       	breq	.+18     	; 0x340 <set_prescalar+0x11c>
 32e:	c1 15       	cp	r28, r1
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	d8 07       	cpc	r29, r24
 334:	29 f0       	breq	.+10     	; 0x340 <set_prescalar+0x11c>
 336:	c1 15       	cp	r28, r1
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	d8 07       	cpc	r29, r24
 33c:	09 f0       	breq	.+2      	; 0x340 <set_prescalar+0x11c>
 33e:	ee c0       	rjmp	.+476    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 340:	c8 30       	cpi	r28, 0x08	; 8
 342:	d1 05       	cpc	r29, r1
 344:	49 f1       	breq	.+82     	; 0x398 <set_prescalar+0x174>
 346:	28 f4       	brcc	.+10     	; 0x352 <set_prescalar+0x12e>
 348:	20 97       	sbiw	r28, 0x00	; 0
 34a:	81 f0       	breq	.+32     	; 0x36c <set_prescalar+0x148>
 34c:	21 97       	sbiw	r28, 0x01	; 1
 34e:	c9 f0       	breq	.+50     	; 0x382 <set_prescalar+0x15e>
 350:	e7 c0       	rjmp	.+462    	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 352:	c1 15       	cp	r28, r1
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	d8 07       	cpc	r29, r24
 358:	a9 f1       	breq	.+106    	; 0x3c4 <set_prescalar+0x1a0>
 35a:	c1 15       	cp	r28, r1
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	d8 07       	cpc	r29, r24
 360:	e1 f1       	breq	.+120    	; 0x3da <set_prescalar+0x1b6>
 362:	c0 34       	cpi	r28, 0x40	; 64
 364:	d1 05       	cpc	r29, r1
 366:	09 f0       	breq	.+2      	; 0x36a <set_prescalar+0x146>
 368:	db c0       	rjmp	.+438    	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 36a:	21 c0       	rjmp	.+66     	; 0x3ae <set_prescalar+0x18a>
 36c:	8e b5       	in	r24, 0x2e	; 46
 36e:	8e 7f       	andi	r24, 0xFE	; 254
 370:	8e bd       	out	0x2e, r24	; 46
 372:	8e b5       	in	r24, 0x2e	; 46
 374:	8d 7f       	andi	r24, 0xFD	; 253
 376:	8e bd       	out	0x2e, r24	; 46
 378:	8e b5       	in	r24, 0x2e	; 46
 37a:	8b 7f       	andi	r24, 0xFB	; 251
 37c:	8e bd       	out	0x2e, r24	; 46
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	d4 c0       	rjmp	.+424    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 382:	8e b5       	in	r24, 0x2e	; 46
 384:	81 60       	ori	r24, 0x01	; 1
 386:	8e bd       	out	0x2e, r24	; 46
 388:	8e b5       	in	r24, 0x2e	; 46
 38a:	8d 7f       	andi	r24, 0xFD	; 253
 38c:	8e bd       	out	0x2e, r24	; 46
 38e:	8e b5       	in	r24, 0x2e	; 46
 390:	8b 7f       	andi	r24, 0xFB	; 251
 392:	8e bd       	out	0x2e, r24	; 46
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	c9 c0       	rjmp	.+402    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 398:	8e b5       	in	r24, 0x2e	; 46
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	8e bd       	out	0x2e, r24	; 46
 39e:	8e b5       	in	r24, 0x2e	; 46
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	8e bd       	out	0x2e, r24	; 46
 3a4:	8e b5       	in	r24, 0x2e	; 46
 3a6:	8b 7f       	andi	r24, 0xFB	; 251
 3a8:	8e bd       	out	0x2e, r24	; 46
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	be c0       	rjmp	.+380    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 3ae:	8e b5       	in	r24, 0x2e	; 46
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	8e bd       	out	0x2e, r24	; 46
 3b4:	8e b5       	in	r24, 0x2e	; 46
 3b6:	82 60       	ori	r24, 0x02	; 2
 3b8:	8e bd       	out	0x2e, r24	; 46
 3ba:	8e b5       	in	r24, 0x2e	; 46
 3bc:	8b 7f       	andi	r24, 0xFB	; 251
 3be:	8e bd       	out	0x2e, r24	; 46
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	b3 c0       	rjmp	.+358    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 3c4:	8e b5       	in	r24, 0x2e	; 46
 3c6:	8e 7f       	andi	r24, 0xFE	; 254
 3c8:	8e bd       	out	0x2e, r24	; 46
 3ca:	8e b5       	in	r24, 0x2e	; 46
 3cc:	8d 7f       	andi	r24, 0xFD	; 253
 3ce:	8e bd       	out	0x2e, r24	; 46
 3d0:	8e b5       	in	r24, 0x2e	; 46
 3d2:	84 60       	ori	r24, 0x04	; 4
 3d4:	8e bd       	out	0x2e, r24	; 46
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	a8 c0       	rjmp	.+336    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 3da:	8e b5       	in	r24, 0x2e	; 46
 3dc:	81 60       	ori	r24, 0x01	; 1
 3de:	8e bd       	out	0x2e, r24	; 46
 3e0:	8e b5       	in	r24, 0x2e	; 46
 3e2:	8d 7f       	andi	r24, 0xFD	; 253
 3e4:	8e bd       	out	0x2e, r24	; 46
 3e6:	8e b5       	in	r24, 0x2e	; 46
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	8e bd       	out	0x2e, r24	; 46
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	9d c0       	rjmp	.+314    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 3f0:	c2 30       	cpi	r28, 0x02	; 2
 3f2:	d1 05       	cpc	r29, r1
 3f4:	a8 f0       	brcs	.+42     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3f6:	c8 30       	cpi	r28, 0x08	; 8
 3f8:	d1 05       	cpc	r29, r1
 3fa:	91 f0       	breq	.+36     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3fc:	c0 32       	cpi	r28, 0x20	; 32
 3fe:	d1 05       	cpc	r29, r1
 400:	79 f0       	breq	.+30     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 402:	c0 34       	cpi	r28, 0x40	; 64
 404:	d1 05       	cpc	r29, r1
 406:	61 f0       	breq	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 408:	c0 38       	cpi	r28, 0x80	; 128
 40a:	d1 05       	cpc	r29, r1
 40c:	49 f0       	breq	.+18     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 40e:	c1 15       	cp	r28, r1
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	d8 07       	cpc	r29, r24
 414:	29 f0       	breq	.+10     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 416:	c1 15       	cp	r28, r1
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	d8 07       	cpc	r29, r24
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	82 c0       	rjmp	.+260    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 420:	c0 32       	cpi	r28, 0x20	; 32
 422:	d1 05       	cpc	r29, r1
 424:	e1 f1       	breq	.+120    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 426:	38 f4       	brcc	.+14     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 428:	c1 30       	cpi	r28, 0x01	; 1
 42a:	d1 05       	cpc	r29, r1
 42c:	11 f1       	breq	.+68     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 42e:	b0 f0       	brcs	.+44     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 430:	28 97       	sbiw	r28, 0x08	; 8
 432:	51 f1       	breq	.+84     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 434:	79 c0       	rjmp	.+242    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 436:	c0 38       	cpi	r28, 0x80	; 128
 438:	d1 05       	cpc	r29, r1
 43a:	09 f4       	brne	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	46 c0       	rjmp	.+140    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 43e:	20 f4       	brcc	.+8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 440:	c0 34       	cpi	r28, 0x40	; 64
 442:	d1 05       	cpc	r29, r1
 444:	b9 f1       	breq	.+110    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 446:	70 c0       	rjmp	.+224    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 448:	c1 15       	cp	r28, r1
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	d8 07       	cpc	r29, r24
 44e:	09 f4       	brne	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	47 c0       	rjmp	.+142    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 452:	c1 15       	cp	r28, r1
 454:	d4 40       	sbci	r29, 0x04	; 4
 456:	09 f4       	brne	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 458:	4e c0       	rjmp	.+156    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 45a:	66 c0       	rjmp	.+204    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 45c:	85 b5       	in	r24, 0x25	; 37
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	85 bd       	out	0x25, r24	; 37
 462:	85 b5       	in	r24, 0x25	; 37
 464:	8d 7f       	andi	r24, 0xFD	; 253
 466:	85 bd       	out	0x25, r24	; 37
 468:	85 b5       	in	r24, 0x25	; 37
 46a:	8b 7f       	andi	r24, 0xFB	; 251
 46c:	85 bd       	out	0x25, r24	; 37
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	5c c0       	rjmp	.+184    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 472:	85 b5       	in	r24, 0x25	; 37
 474:	81 60       	ori	r24, 0x01	; 1
 476:	85 bd       	out	0x25, r24	; 37
 478:	85 b5       	in	r24, 0x25	; 37
 47a:	8d 7f       	andi	r24, 0xFD	; 253
 47c:	85 bd       	out	0x25, r24	; 37
 47e:	85 b5       	in	r24, 0x25	; 37
 480:	8b 7f       	andi	r24, 0xFB	; 251
 482:	85 bd       	out	0x25, r24	; 37
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	51 c0       	rjmp	.+162    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 488:	85 b5       	in	r24, 0x25	; 37
 48a:	8e 7f       	andi	r24, 0xFE	; 254
 48c:	85 bd       	out	0x25, r24	; 37
 48e:	85 b5       	in	r24, 0x25	; 37
 490:	82 60       	ori	r24, 0x02	; 2
 492:	85 bd       	out	0x25, r24	; 37
 494:	85 b5       	in	r24, 0x25	; 37
 496:	8b 7f       	andi	r24, 0xFB	; 251
 498:	85 bd       	out	0x25, r24	; 37
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	46 c0       	rjmp	.+140    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 49e:	85 b5       	in	r24, 0x25	; 37
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	85 bd       	out	0x25, r24	; 37
 4a4:	85 b5       	in	r24, 0x25	; 37
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	85 bd       	out	0x25, r24	; 37
 4aa:	85 b5       	in	r24, 0x25	; 37
 4ac:	8b 7f       	andi	r24, 0xFB	; 251
 4ae:	85 bd       	out	0x25, r24	; 37
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	3b c0       	rjmp	.+118    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 4b4:	85 b5       	in	r24, 0x25	; 37
 4b6:	8e 7f       	andi	r24, 0xFE	; 254
 4b8:	85 bd       	out	0x25, r24	; 37
 4ba:	85 b5       	in	r24, 0x25	; 37
 4bc:	8d 7f       	andi	r24, 0xFD	; 253
 4be:	85 bd       	out	0x25, r24	; 37
 4c0:	85 b5       	in	r24, 0x25	; 37
 4c2:	84 60       	ori	r24, 0x04	; 4
 4c4:	85 bd       	out	0x25, r24	; 37
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	30 c0       	rjmp	.+96     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 4ca:	85 b5       	in	r24, 0x25	; 37
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	85 bd       	out	0x25, r24	; 37
 4d0:	85 b5       	in	r24, 0x25	; 37
 4d2:	8d 7f       	andi	r24, 0xFD	; 253
 4d4:	85 bd       	out	0x25, r24	; 37
 4d6:	85 b5       	in	r24, 0x25	; 37
 4d8:	84 60       	ori	r24, 0x04	; 4
 4da:	85 bd       	out	0x25, r24	; 37
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	25 c0       	rjmp	.+74     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 4e0:	85 b5       	in	r24, 0x25	; 37
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
 4e4:	85 bd       	out	0x25, r24	; 37
 4e6:	85 b5       	in	r24, 0x25	; 37
 4e8:	82 60       	ori	r24, 0x02	; 2
 4ea:	85 bd       	out	0x25, r24	; 37
 4ec:	85 b5       	in	r24, 0x25	; 37
 4ee:	84 60       	ori	r24, 0x04	; 4
 4f0:	85 bd       	out	0x25, r24	; 37
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	1a c0       	rjmp	.+52     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 4f6:	85 b5       	in	r24, 0x25	; 37
 4f8:	81 60       	ori	r24, 0x01	; 1
 4fa:	85 bd       	out	0x25, r24	; 37
 4fc:	85 b5       	in	r24, 0x25	; 37
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	85 bd       	out	0x25, r24	; 37
 502:	85 b5       	in	r24, 0x25	; 37
 504:	84 60       	ori	r24, 0x04	; 4
 506:	85 bd       	out	0x25, r24	; 37
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0f c0       	rjmp	.+30     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0d c0       	rjmp	.+26     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0b c0       	rjmp	.+22     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	09 c0       	rjmp	.+18     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	05 c0       	rjmp	.+10     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	03 c0       	rjmp	.+6      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	01 c0       	rjmp	.+2      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	08 95       	ret

00000532 <Timer_start>:
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	c8 2f       	mov	r28, r24
 53a:	8b 01       	movw	r16, r22
 53c:	0e 94 0c 01 	call	0x218	; 0x218 <isValidTimer>
 540:	88 23       	and	r24, r24
 542:	31 f0       	breq	.+12     	; 0x550 <Timer_start+0x1e>
 544:	b8 01       	movw	r22, r16
 546:	8c 2f       	mov	r24, r28
 548:	0e 94 12 01 	call	0x224	; 0x224 <set_prescalar>
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	01 c0       	rjmp	.+2      	; 0x552 <Timer_start+0x20>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	08 95       	ret

0000055a <PWM_init>:

// *The pwm frequency can be calculated from the equation: (F_CPU/(N*256)) for fast pwm and (F_CPU/(N*510)) for phase correct pwm
// Initialize the timers to start in pwm mode
EN_timerError_t PWM_init(uint8_t pwmPin, double dutyCycle, uint8_t mode) {
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
 562:	84 30       	cpi	r24, 0x04	; 4
 564:	08 f0       	brcs	.+2      	; 0x568 <PWM_init+0xe>
 566:	ad c0       	rjmp	.+346    	; 0x6c2 <PWM_init+0x168>
    return WRONG_PWM_PIN;
    }
  if (mode != PWM_FAST && mode != PWM_PHASE_CORRECT) {
 568:	9f ef       	ldi	r25, 0xFF	; 255
 56a:	92 0f       	add	r25, r18
 56c:	92 30       	cpi	r25, 0x02	; 2
 56e:	08 f0       	brcs	.+2      	; 0x572 <PWM_init+0x18>
 570:	aa c0       	rjmp	.+340    	; 0x6c6 <PWM_init+0x16c>
 572:	6a 01       	movw	r12, r20
 574:	7b 01       	movw	r14, r22
    return WRONG_PWM_MODE;
    }
  switch (pwmPin) {
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	18 f4       	brcc	.+6      	; 0x580 <PWM_init+0x26>
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	28 f0       	brcs	.+10     	; 0x588 <PWM_init+0x2e>
 57e:	29 c0       	rjmp	.+82     	; 0x5d2 <PWM_init+0x78>
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	09 f4       	brne	.+2      	; 0x586 <PWM_init+0x2c>
 584:	79 c0       	rjmp	.+242    	; 0x678 <PWM_init+0x11e>
 586:	a1 c0       	rjmp	.+322    	; 0x6ca <PWM_init+0x170>
      case OC_0:
        switch (mode) {
 588:	21 30       	cpi	r18, 0x01	; 1
 58a:	19 f0       	breq	.+6      	; 0x592 <PWM_init+0x38>
 58c:	22 30       	cpi	r18, 0x02	; 2
 58e:	41 f0       	breq	.+16     	; 0x5a0 <PWM_init+0x46>
 590:	0d c0       	rjmp	.+26     	; 0x5ac <PWM_init+0x52>
            case PWM_FAST:
              set_bit(TCCR0, WGM00);
 592:	83 b7       	in	r24, 0x33	; 51
 594:	80 64       	ori	r24, 0x40	; 64
 596:	83 bf       	out	0x33, r24	; 51
              set_bit(TCCR0, WGM01);
 598:	83 b7       	in	r24, 0x33	; 51
 59a:	88 60       	ori	r24, 0x08	; 8
 59c:	83 bf       	out	0x33, r24	; 51
              break;
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <PWM_init+0x52>
            case PWM_PHASE_CORRECT:
              set_bit(TCCR0, WGM00);
 5a0:	83 b7       	in	r24, 0x33	; 51
 5a2:	80 64       	ori	r24, 0x40	; 64
 5a4:	83 bf       	out	0x33, r24	; 51
              clear_bit(TCCR0, WGM01);
 5a6:	83 b7       	in	r24, 0x33	; 51
 5a8:	87 7f       	andi	r24, 0xF7	; 247
 5aa:	83 bf       	out	0x33, r24	; 51
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR0, COM00);
 5ac:	83 b7       	in	r24, 0x33	; 51
 5ae:	8f 7e       	andi	r24, 0xEF	; 239
 5b0:	83 bf       	out	0x33, r24	; 51
        set_bit(TCCR0, COM01);
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	80 62       	ori	r24, 0x20	; 32
 5b6:	83 bf       	out	0x33, r24	; 51
#else 
        set_bit(TCCR0, COM00);
        set_bit(TCCR0, COM01);
#endif
        // The value in the OCR determines the duty cycle
        OCR0 = (uint8_t)(dutyCycle * 255);
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	4f e7       	ldi	r20, 0x7F	; 127
 5be:	53 e4       	ldi	r21, 0x43	; 67
 5c0:	c7 01       	movw	r24, r14
 5c2:	b6 01       	movw	r22, r12
 5c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__mulsf3>
 5c8:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 5cc:	6c bf       	out	0x3c, r22	; 60
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
        set_bit(TCCR0, COM00);
        set_bit(TCCR0, COM01);
#endif
        // The value in the OCR determines the duty cycle
        OCR0 = (uint8_t)(dutyCycle * 255);
        break;
 5d0:	7f c0       	rjmp	.+254    	; 0x6d0 <PWM_init+0x176>
        //? The fix for this issue is to use ICR1 as TOP instead (mode 14 in fast pwm), thus allowing OCR1A and OCR1B to be used to set the duty cycle while ICR1 is used tyo set the frequency.
        //? Mode 15 can be used at the cost of disabling PWM on OC1A, but we get more glitch-free variable frequency PWM signal on OC1B due to the double buffering of OC1A, which ICR1 doesn't have.
        //? Since I don't need a variable frequency pwm signal, ICR1 will be used as TOP by default and set to MAX.
      case OC_1A:
      case OC_1B:
        switch (mode) {
 5d2:	21 30       	cpi	r18, 0x01	; 1
 5d4:	19 f0       	breq	.+6      	; 0x5dc <PWM_init+0x82>
 5d6:	22 30       	cpi	r18, 0x02	; 2
 5d8:	91 f0       	breq	.+36     	; 0x5fe <PWM_init+0xa4>
 5da:	21 c0       	rjmp	.+66     	; 0x61e <PWM_init+0xc4>
              set_bit(TCCR1A, WGM10);
              set_bit(TCCR1A, WGM11);
              set_bit(TCCR1B, WGM12);
              clear_bit(TCCR1B, WGM13);
#elif TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1
              clear_bit(TCCR1A, WGM10);
 5dc:	9f b5       	in	r25, 0x2f	; 47
 5de:	9e 7f       	andi	r25, 0xFE	; 254
 5e0:	9f bd       	out	0x2f, r25	; 47
              set_bit(TCCR1A, WGM11);
 5e2:	9f b5       	in	r25, 0x2f	; 47
 5e4:	92 60       	ori	r25, 0x02	; 2
 5e6:	9f bd       	out	0x2f, r25	; 47
              set_bit(TCCR1B, WGM12);
 5e8:	9e b5       	in	r25, 0x2e	; 46
 5ea:	98 60       	ori	r25, 0x08	; 8
 5ec:	9e bd       	out	0x2e, r25	; 46
              set_bit(TCCR1B, WGM13);
 5ee:	9e b5       	in	r25, 0x2e	; 46
 5f0:	90 61       	ori	r25, 0x10	; 16
 5f2:	9e bd       	out	0x2e, r25	; 46
              ICR1 = TIMER_1_PWM_TOP_ICR1_VALUE;
 5f4:	20 e2       	ldi	r18, 0x20	; 32
 5f6:	3e e4       	ldi	r19, 0x4E	; 78
 5f8:	37 bd       	out	0x27, r19	; 39
 5fa:	26 bd       	out	0x26, r18	; 38
              set_bit(TCCR1A, WGM10);
              set_bit(TCCR1A, WGM11);
              set_bit(TCCR1B, WGM12);
              set_bit(TCCR1B, WGM13);
#endif
              break;
 5fc:	10 c0       	rjmp	.+32     	; 0x61e <PWM_init+0xc4>
              set_bit(TCCR1A, WGM10);
              set_bit(TCCR1A, WGM11);
              clear_bit(TCCR1B, WGM12);
              clear_bit(TCCR1B, WGM13);
#elif TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1
              clear_bit(TCCR1A, WGM10);
 5fe:	9f b5       	in	r25, 0x2f	; 47
 600:	9e 7f       	andi	r25, 0xFE	; 254
 602:	9f bd       	out	0x2f, r25	; 47
              set_bit(TCCR1A, WGM11);
 604:	9f b5       	in	r25, 0x2f	; 47
 606:	92 60       	ori	r25, 0x02	; 2
 608:	9f bd       	out	0x2f, r25	; 47
              clear_bit(TCCR1B, WGM12);
 60a:	9e b5       	in	r25, 0x2e	; 46
 60c:	97 7f       	andi	r25, 0xF7	; 247
 60e:	9e bd       	out	0x2e, r25	; 46
              set_bit(TCCR1B, WGM13);
 610:	9e b5       	in	r25, 0x2e	; 46
 612:	90 61       	ori	r25, 0x10	; 16
 614:	9e bd       	out	0x2e, r25	; 46
              ICR1 = TIMER_1_PWM_TOP_ICR1_VALUE;
 616:	20 e2       	ldi	r18, 0x20	; 32
 618:	3e e4       	ldi	r19, 0x4E	; 78
 61a:	37 bd       	out	0x27, r19	; 39
 61c:	26 bd       	out	0x26, r18	; 38
              set_bit(TCCR1B, WGM13);
#endif
              break;
          }
        // Enable the PWM function of the OC pin.
        switch (pwmPin) {
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	19 f0       	breq	.+6      	; 0x628 <PWM_init+0xce>
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	a9 f0       	breq	.+42     	; 0x650 <PWM_init+0xf6>
 626:	53 c0       	rjmp	.+166    	; 0x6ce <PWM_init+0x174>
            case OC_1A:
#ifdef PWM_NON_INVERTED_MODE
              clear_bit(TCCR1A, COM1A0);
 628:	8f b5       	in	r24, 0x2f	; 47
 62a:	8f 7b       	andi	r24, 0xBF	; 191
 62c:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, COM1A1);
 62e:	8f b5       	in	r24, 0x2f	; 47
 630:	80 68       	ori	r24, 0x80	; 128
 632:	8f bd       	out	0x2f, r24	; 47
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_9_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_9_BIT)
              OCR1A = (uint16_t)(dutyCycle * 0x01FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_10_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_10_BIT)
              OCR1A = (uint16_t)(dutyCycle * 0x03FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
              OCR1A = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	30 e4       	ldi	r19, 0x40	; 64
 638:	4c e9       	ldi	r20, 0x9C	; 156
 63a:	56 e4       	ldi	r21, 0x46	; 70
 63c:	c7 01       	movw	r24, r14
 63e:	b6 01       	movw	r22, r12
 640:	0e 94 c5 03 	call	0x78a	; 0x78a <__mulsf3>
 644:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 648:	7b bd       	out	0x2b, r23	; 43
 64a:	6a bd       	out	0x2a, r22	; 42
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 64c:	80 e0       	ldi	r24, 0x00	; 0
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
              OCR1A = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_OCR1A || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_OCR1A)
              OCR1A = (uint16_t)(dutyCycle * 65535);
#endif
              break;
 64e:	40 c0       	rjmp	.+128    	; 0x6d0 <PWM_init+0x176>
            case OC_1B:
#ifdef PWM_NON_INVERTED_MODE
              clear_bit(TCCR1A, COM1B0);
 650:	8f b5       	in	r24, 0x2f	; 47
 652:	8f 7e       	andi	r24, 0xEF	; 239
 654:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, COM1B1);
 656:	8f b5       	in	r24, 0x2f	; 47
 658:	80 62       	ori	r24, 0x20	; 32
 65a:	8f bd       	out	0x2f, r24	; 47
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_9_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_9_BIT)
              OCR1B = (uint16_t)(dutyCycle * 0x01FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_10_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_10_BIT)
              OCR1B = (uint16_t)(dutyCycle * 0x03FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
              OCR1B = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	30 e4       	ldi	r19, 0x40	; 64
 660:	4c e9       	ldi	r20, 0x9C	; 156
 662:	56 e4       	ldi	r21, 0x46	; 70
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	0e 94 c5 03 	call	0x78a	; 0x78a <__mulsf3>
 66c:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 670:	79 bd       	out	0x29, r23	; 41
 672:	68 bd       	out	0x28, r22	; 40
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 674:	80 e0       	ldi	r24, 0x00	; 0
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
              OCR1B = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_OCR1A || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_OCR1A)
              OCR1B = (uint16_t)(dutyCycle * 65535);
#endif
              break;
 676:	2c c0       	rjmp	.+88     	; 0x6d0 <PWM_init+0x176>
          }
        break;
      case OC_2:
        switch (mode) {
 678:	21 30       	cpi	r18, 0x01	; 1
 67a:	19 f0       	breq	.+6      	; 0x682 <PWM_init+0x128>
 67c:	22 30       	cpi	r18, 0x02	; 2
 67e:	41 f0       	breq	.+16     	; 0x690 <PWM_init+0x136>
 680:	0d c0       	rjmp	.+26     	; 0x69c <PWM_init+0x142>
            case PWM_FAST:
              set_bit(TCCR2, WGM20);
 682:	85 b5       	in	r24, 0x25	; 37
 684:	80 64       	ori	r24, 0x40	; 64
 686:	85 bd       	out	0x25, r24	; 37
              set_bit(TCCR2, WGM21);
 688:	85 b5       	in	r24, 0x25	; 37
 68a:	88 60       	ori	r24, 0x08	; 8
 68c:	85 bd       	out	0x25, r24	; 37
              break;
 68e:	06 c0       	rjmp	.+12     	; 0x69c <PWM_init+0x142>
            case PWM_PHASE_CORRECT:
              set_bit(TCCR2, WGM20);
 690:	85 b5       	in	r24, 0x25	; 37
 692:	80 64       	ori	r24, 0x40	; 64
 694:	85 bd       	out	0x25, r24	; 37
              clear_bit(TCCR2, WGM21);
 696:	85 b5       	in	r24, 0x25	; 37
 698:	87 7f       	andi	r24, 0xF7	; 247
 69a:	85 bd       	out	0x25, r24	; 37
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR2, COM20);
 69c:	85 b5       	in	r24, 0x25	; 37
 69e:	8f 7e       	andi	r24, 0xEF	; 239
 6a0:	85 bd       	out	0x25, r24	; 37
        set_bit(TCCR2, COM21);
 6a2:	85 b5       	in	r24, 0x25	; 37
 6a4:	80 62       	ori	r24, 0x20	; 32
 6a6:	85 bd       	out	0x25, r24	; 37
#else 
        set_bit(TCCR2, COM20);
        set_bit(TCCR2, COM21);
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	4f e7       	ldi	r20, 0x7F	; 127
 6ae:	53 e4       	ldi	r21, 0x43	; 67
 6b0:	c7 01       	movw	r24, r14
 6b2:	b6 01       	movw	r22, r12
 6b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__mulsf3>
 6b8:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 6bc:	63 bd       	out	0x23, r22	; 35
        break;
    }
  return TIMER_OK;
 6be:	80 e0       	ldi	r24, 0x00	; 0
        set_bit(TCCR2, COM20);
        set_bit(TCCR2, COM21);
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
 6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <PWM_init+0x176>

// *The pwm frequency can be calculated from the equation: (F_CPU/(N*256)) for fast pwm and (F_CPU/(N*510)) for phase correct pwm
// Initialize the timers to start in pwm mode
EN_timerError_t PWM_init(uint8_t pwmPin, double dutyCycle, uint8_t mode) {
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
    return WRONG_PWM_PIN;
 6c2:	86 e0       	ldi	r24, 0x06	; 6
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <PWM_init+0x176>
    }
  if (mode != PWM_FAST && mode != PWM_PHASE_CORRECT) {
    return WRONG_PWM_MODE;
 6c6:	85 e0       	ldi	r24, 0x05	; 5
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <PWM_init+0x176>
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <PWM_init+0x176>
 6ce:	80 e0       	ldi	r24, 0x00	; 0
  }
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	08 95       	ret

000006da <__fixunssfsi>:
 6da:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_splitA>
 6de:	88 f0       	brcs	.+34     	; 0x702 <__fixunssfsi+0x28>
 6e0:	9f 57       	subi	r25, 0x7F	; 127
 6e2:	98 f0       	brcs	.+38     	; 0x70a <__fixunssfsi+0x30>
 6e4:	b9 2f       	mov	r27, r25
 6e6:	99 27       	eor	r25, r25
 6e8:	b7 51       	subi	r27, 0x17	; 23
 6ea:	b0 f0       	brcs	.+44     	; 0x718 <__fixunssfsi+0x3e>
 6ec:	e1 f0       	breq	.+56     	; 0x726 <__fixunssfsi+0x4c>
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a f0       	brmi	.+6      	; 0x6fe <__fixunssfsi+0x24>
 6f8:	ba 95       	dec	r27
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__fixunssfsi+0x14>
 6fc:	14 c0       	rjmp	.+40     	; 0x726 <__fixunssfsi+0x4c>
 6fe:	b1 30       	cpi	r27, 0x01	; 1
 700:	91 f0       	breq	.+36     	; 0x726 <__fixunssfsi+0x4c>
 702:	0e 94 be 03 	call	0x77c	; 0x77c <__fp_zero>
 706:	b1 e0       	ldi	r27, 0x01	; 1
 708:	08 95       	ret
 70a:	0c 94 be 03 	jmp	0x77c	; 0x77c <__fp_zero>
 70e:	67 2f       	mov	r22, r23
 710:	78 2f       	mov	r23, r24
 712:	88 27       	eor	r24, r24
 714:	b8 5f       	subi	r27, 0xF8	; 248
 716:	39 f0       	breq	.+14     	; 0x726 <__fixunssfsi+0x4c>
 718:	b9 3f       	cpi	r27, 0xF9	; 249
 71a:	cc f3       	brlt	.-14     	; 0x70e <__fixunssfsi+0x34>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b3 95       	inc	r27
 724:	d9 f7       	brne	.-10     	; 0x71c <__fixunssfsi+0x42>
 726:	3e f4       	brtc	.+14     	; 0x736 <__fixunssfsi+0x5c>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <__fp_split3>:
 738:	57 fd       	sbrc	r21, 7
 73a:	90 58       	subi	r25, 0x80	; 128
 73c:	44 0f       	add	r20, r20
 73e:	55 1f       	adc	r21, r21
 740:	59 f0       	breq	.+22     	; 0x758 <__fp_splitA+0x10>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	71 f0       	breq	.+28     	; 0x762 <__fp_splitA+0x1a>
 746:	47 95       	ror	r20

00000748 <__fp_splitA>:
 748:	88 0f       	add	r24, r24
 74a:	97 fb       	bst	r25, 7
 74c:	99 1f       	adc	r25, r25
 74e:	61 f0       	breq	.+24     	; 0x768 <__fp_splitA+0x20>
 750:	9f 3f       	cpi	r25, 0xFF	; 255
 752:	79 f0       	breq	.+30     	; 0x772 <__fp_splitA+0x2a>
 754:	87 95       	ror	r24
 756:	08 95       	ret
 758:	12 16       	cp	r1, r18
 75a:	13 06       	cpc	r1, r19
 75c:	14 06       	cpc	r1, r20
 75e:	55 1f       	adc	r21, r21
 760:	f2 cf       	rjmp	.-28     	; 0x746 <__fp_split3+0xe>
 762:	46 95       	lsr	r20
 764:	f1 df       	rcall	.-30     	; 0x748 <__fp_splitA>
 766:	08 c0       	rjmp	.+16     	; 0x778 <__fp_splitA+0x30>
 768:	16 16       	cp	r1, r22
 76a:	17 06       	cpc	r1, r23
 76c:	18 06       	cpc	r1, r24
 76e:	99 1f       	adc	r25, r25
 770:	f1 cf       	rjmp	.-30     	; 0x754 <__fp_splitA+0xc>
 772:	86 95       	lsr	r24
 774:	71 05       	cpc	r23, r1
 776:	61 05       	cpc	r22, r1
 778:	08 94       	sec
 77a:	08 95       	ret

0000077c <__fp_zero>:
 77c:	e8 94       	clt

0000077e <__fp_szero>:
 77e:	bb 27       	eor	r27, r27
 780:	66 27       	eor	r22, r22
 782:	77 27       	eor	r23, r23
 784:	cb 01       	movw	r24, r22
 786:	97 f9       	bld	r25, 7
 788:	08 95       	ret

0000078a <__mulsf3>:
 78a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__mulsf3x>
 78e:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>
 792:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscA>
 796:	38 f0       	brcs	.+14     	; 0x7a6 <__mulsf3+0x1c>
 798:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscB>
 79c:	20 f0       	brcs	.+8      	; 0x7a6 <__mulsf3+0x1c>
 79e:	95 23       	and	r25, r21
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <__mulsf3+0x1c>
 7a2:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 7a6:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 7aa:	11 24       	eor	r1, r1
 7ac:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_szero>

000007b0 <__mulsf3x>:
 7b0:	0e 94 9c 03 	call	0x738	; 0x738 <__fp_split3>
 7b4:	70 f3       	brcs	.-36     	; 0x792 <__mulsf3+0x8>

000007b6 <__mulsf3_pse>:
 7b6:	95 9f       	mul	r25, r21
 7b8:	c1 f3       	breq	.-16     	; 0x7aa <__mulsf3+0x20>
 7ba:	95 0f       	add	r25, r21
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	55 1f       	adc	r21, r21
 7c0:	62 9f       	mul	r22, r18
 7c2:	f0 01       	movw	r30, r0
 7c4:	72 9f       	mul	r23, r18
 7c6:	bb 27       	eor	r27, r27
 7c8:	f0 0d       	add	r31, r0
 7ca:	b1 1d       	adc	r27, r1
 7cc:	63 9f       	mul	r22, r19
 7ce:	aa 27       	eor	r26, r26
 7d0:	f0 0d       	add	r31, r0
 7d2:	b1 1d       	adc	r27, r1
 7d4:	aa 1f       	adc	r26, r26
 7d6:	64 9f       	mul	r22, r20
 7d8:	66 27       	eor	r22, r22
 7da:	b0 0d       	add	r27, r0
 7dc:	a1 1d       	adc	r26, r1
 7de:	66 1f       	adc	r22, r22
 7e0:	82 9f       	mul	r24, r18
 7e2:	22 27       	eor	r18, r18
 7e4:	b0 0d       	add	r27, r0
 7e6:	a1 1d       	adc	r26, r1
 7e8:	62 1f       	adc	r22, r18
 7ea:	73 9f       	mul	r23, r19
 7ec:	b0 0d       	add	r27, r0
 7ee:	a1 1d       	adc	r26, r1
 7f0:	62 1f       	adc	r22, r18
 7f2:	83 9f       	mul	r24, r19
 7f4:	a0 0d       	add	r26, r0
 7f6:	61 1d       	adc	r22, r1
 7f8:	22 1f       	adc	r18, r18
 7fa:	74 9f       	mul	r23, r20
 7fc:	33 27       	eor	r19, r19
 7fe:	a0 0d       	add	r26, r0
 800:	61 1d       	adc	r22, r1
 802:	23 1f       	adc	r18, r19
 804:	84 9f       	mul	r24, r20
 806:	60 0d       	add	r22, r0
 808:	21 1d       	adc	r18, r1
 80a:	82 2f       	mov	r24, r18
 80c:	76 2f       	mov	r23, r22
 80e:	6a 2f       	mov	r22, r26
 810:	11 24       	eor	r1, r1
 812:	9f 57       	subi	r25, 0x7F	; 127
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	9a f0       	brmi	.+38     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 818:	f1 f0       	breq	.+60     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 81a:	88 23       	and	r24, r24
 81c:	4a f0       	brmi	.+18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 81e:	ee 0f       	add	r30, r30
 820:	ff 1f       	adc	r31, r31
 822:	bb 1f       	adc	r27, r27
 824:	66 1f       	adc	r22, r22
 826:	77 1f       	adc	r23, r23
 828:	88 1f       	adc	r24, r24
 82a:	91 50       	subi	r25, 0x01	; 1
 82c:	50 40       	sbci	r21, 0x00	; 0
 82e:	a9 f7       	brne	.-22     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 830:	9e 3f       	cpi	r25, 0xFE	; 254
 832:	51 05       	cpc	r21, r1
 834:	80 f0       	brcs	.+32     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 836:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 83a:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__fp_szero>
 83e:	5f 3f       	cpi	r21, 0xFF	; 255
 840:	e4 f3       	brlt	.-8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 842:	98 3e       	cpi	r25, 0xE8	; 232
 844:	d4 f3       	brlt	.-12     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 846:	86 95       	lsr	r24
 848:	77 95       	ror	r23
 84a:	67 95       	ror	r22
 84c:	b7 95       	ror	r27
 84e:	f7 95       	ror	r31
 850:	e7 95       	ror	r30
 852:	9f 5f       	subi	r25, 0xFF	; 255
 854:	c1 f7       	brne	.-16     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 856:	fe 2b       	or	r31, r30
 858:	88 0f       	add	r24, r24
 85a:	91 1d       	adc	r25, r1
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__fp_inf>:
 864:	97 f9       	bld	r25, 7
 866:	9f 67       	ori	r25, 0x7F	; 127
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	08 95       	ret

00000870 <__fp_nan>:
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	80 ec       	ldi	r24, 0xC0	; 192
 874:	08 95       	ret

00000876 <__fp_pscA>:
 876:	00 24       	eor	r0, r0
 878:	0a 94       	dec	r0
 87a:	16 16       	cp	r1, r22
 87c:	17 06       	cpc	r1, r23
 87e:	18 06       	cpc	r1, r24
 880:	09 06       	cpc	r0, r25
 882:	08 95       	ret

00000884 <__fp_pscB>:
 884:	00 24       	eor	r0, r0
 886:	0a 94       	dec	r0
 888:	12 16       	cp	r1, r18
 88a:	13 06       	cpc	r1, r19
 88c:	14 06       	cpc	r1, r20
 88e:	05 06       	cpc	r0, r21
 890:	08 95       	ret

00000892 <__fp_round>:
 892:	09 2e       	mov	r0, r25
 894:	03 94       	inc	r0
 896:	00 0c       	add	r0, r0
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0xc>
 89a:	88 23       	and	r24, r24
 89c:	52 f0       	brmi	.+20     	; 0x8b2 <__fp_round+0x20>
 89e:	bb 0f       	add	r27, r27
 8a0:	40 f4       	brcc	.+16     	; 0x8b2 <__fp_round+0x20>
 8a2:	bf 2b       	or	r27, r31
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__fp_round+0x18>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__fp_round+0x20>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	08 95       	ret

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
