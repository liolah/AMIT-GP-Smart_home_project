
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800068  00800068  000003a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8f  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000720  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002aa  00000000  00000000  00002756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  8a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BT_sendString>:
void BT_sendChar(char data){
  UART_sendChar(data);
}

void BT_sendString(char* str){
  UART_sendString(str);
  92:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_sendString>
  96:	08 95       	ret

00000098 <main>:
#include "MCAL/Timer/timer.h"
#include "Services/User/user.h"
#include "Services/Remote_access/remote.h"

int main(void) {
	UART_init(9600U);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	95 e2       	ldi	r25, 0x25	; 37
  9c:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
	
	while (1) {
		test();
  a0:	0e 94 25 01 	call	0x24a	; 0x24a <test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	83 ed       	ldi	r24, 0xD3	; 211
  a8:	90 e3       	ldi	r25, 0x30	; 48
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x12>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x1c>
  b4:	00 00       	nop
  b6:	f4 cf       	rjmp	.-24     	; 0xa0 <main+0x8>

000000b8 <UART_init>:

// Receive a char using UART
void UART_receiveChar(char* x) {
  while (!read_bit(UCSRA, RXC)); // Wait for the data to be received.
  *x = UDR;
  }
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <UART_init+0x6>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	80 36       	cpi	r24, 0x60	; 96
  cc:	99 40       	sbci	r25, 0x09	; 9
  ce:	59 f4       	brne	.+22     	; 0xe6 <UART_init+0x2e>
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	89 e2       	ldi	r24, 0x29	; 41
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	20 ea       	ldi	r18, 0xA0	; 160
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	23 c0       	rjmp	.+70     	; 0x12c <UART_init+0x74>
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	80 3c       	cpi	r24, 0xC0	; 192
  ec:	92 41       	sbci	r25, 0x12	; 18
  ee:	31 f4       	brne	.+12     	; 0xfc <UART_init+0x44>
  f0:	89 e2       	ldi	r24, 0x29	; 41
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	2f ec       	ldi	r18, 0xCF	; 207
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  fa:	18 c0       	rjmp	.+48     	; 0x12c <UART_init+0x74>
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	80 38       	cpi	r24, 0x80	; 128
 102:	95 42       	sbci	r25, 0x25	; 37
 104:	31 f4       	brne	.+12     	; 0x112 <UART_init+0x5a>
 106:	89 e2       	ldi	r24, 0x29	; 41
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	27 e6       	ldi	r18, 0x67	; 103
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
 110:	0d c0       	rjmp	.+26     	; 0x12c <UART_init+0x74>
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	81 15       	cp	r24, r1
 118:	9b 44       	sbci	r25, 0x4B	; 75
 11a:	31 f4       	brne	.+12     	; 0x128 <UART_init+0x70>
 11c:	89 e2       	ldi	r24, 0x29	; 41
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	23 e3       	ldi	r18, 0x33	; 51
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <UART_init+0x74>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	2e c0       	rjmp	.+92     	; 0x188 <UART_init+0xd0>
 12c:	8a e2       	ldi	r24, 0x2A	; 42
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2a e2       	ldi	r18, 0x2A	; 42
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	28 60       	ori	r18, 0x08	; 8
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	8a e2       	ldi	r24, 0x2A	; 42
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2a e2       	ldi	r18, 0x2A	; 42
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 61       	ori	r18, 0x10	; 16
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	20 e4       	ldi	r18, 0x40	; 64
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	20 68       	ori	r18, 0x80	; 128
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	80 e4       	ldi	r24, 0x40	; 64
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	20 e4       	ldi	r18, 0x40	; 64
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	22 60       	ori	r18, 0x02	; 2
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 e4       	ldi	r18, 0x40	; 64
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	24 60       	ori	r18, 0x04	; 4
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <UART_sendChar>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	1f 92       	push	r1
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	00 00       	nop
 1a0:	8b e2       	ldi	r24, 0x2B	; 43
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	82 95       	swap	r24
 1aa:	86 95       	lsr	r24
 1ac:	87 70       	andi	r24, 0x07	; 7
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	99 27       	eor	r25, r25
 1b6:	89 2b       	or	r24, r25
 1b8:	99 f3       	breq	.-26     	; 0x1a0 <UART_sendChar+0xe>
 1ba:	8c e2       	ldi	r24, 0x2C	; 44
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	29 81       	ldd	r18, Y+1	; 0x01
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
 1c4:	00 00       	nop
 1c6:	8b e2       	ldi	r24, 0x2B	; 43
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	82 95       	swap	r24
 1d0:	86 95       	lsr	r24
 1d2:	86 95       	lsr	r24
 1d4:	83 70       	andi	r24, 0x03	; 3
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	81 70       	andi	r24, 0x01	; 1
 1dc:	99 27       	eor	r25, r25
 1de:	89 2b       	or	r24, r25
 1e0:	91 f3       	breq	.-28     	; 0x1c6 <UART_sendChar+0x34>
 1e2:	00 00       	nop
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <UART_sendString>:

void UART_sendString(char* str) {
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <UART_sendString+0x6>
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <UART_sendString+0x8>
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	9c 83       	std	Y+4, r25	; 0x04
 1fa:	8b 83       	std	Y+3, r24	; 0x03
  uint32_t i = 0;
 1fc:	1a 82       	std	Y+2, r1	; 0x02
 1fe:	19 82       	std	Y+1, r1	; 0x01
  while (str[i] != 0) {
 200:	0f c0       	rjmp	.+30     	; 0x220 <UART_sendString+0x34>
    UART_sendChar(str[i]);
 202:	2b 81       	ldd	r18, Y+3	; 0x03
 204:	3c 81       	ldd	r19, Y+4	; 0x04
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	82 0f       	add	r24, r18
 20c:	93 1f       	adc	r25, r19
 20e:	fc 01       	movw	r30, r24
 210:	80 81       	ld	r24, Z
 212:	0e 94 c9 00 	call	0x192	; 0x192 <UART_sendChar>
    i++;
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	89 83       	std	Y+1, r24	; 0x01
  *x = UDR;
  }

void UART_sendString(char* str) {
  uint32_t i = 0;
  while (str[i] != 0) {
 220:	2b 81       	ldd	r18, Y+3	; 0x03
 222:	3c 81       	ldd	r19, Y+4	; 0x04
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	82 0f       	add	r24, r18
 22a:	93 1f       	adc	r25, r19
 22c:	fc 01       	movw	r30, r24
 22e:	80 81       	ld	r24, Z
 230:	88 23       	and	r24, r24
 232:	39 f7       	brne	.-50     	; 0x202 <UART_sendString+0x16>
    UART_sendChar(str[i]);
    i++;
    }
  UART_sendChar(0); // Send null to terminate the string
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 c9 00 	call	0x192	; 0x192 <UART_sendChar>
  }
 23a:	00 00       	nop
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <test>:

void test() {
  BT_sendString("Hello!\n");
  }

void callFunWhenBufferReady(uint8_t functionNumber) {
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 49 00 	call	0x92	; 0x92 <BT_sendString>
 252:	08 95       	ret

00000254 <__vector_13>:
      case 5:
        break;
    }
  }

ISR(USART_RXC_vect) {
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
  // If the buffer is full or the msg length is reached without the input being terminated by null, then it's wrong input
  // If the input is invalid, reset the buffer pointer, set the invalid input flag and call the function responsible for handling the input
  if (dump_invalid_data) {
 268:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <dump_invalid_data>
 26c:	88 23       	and	r24, r24
 26e:	41 f0       	breq	.+16     	; 0x280 <__vector_13+0x2c>
    if (UDR == 0) {
 270:	8c b1       	in	r24, 0x0c	; 12
 272:	81 11       	cpse	r24, r1
 274:	3b c0       	rjmp	.+118    	; 0x2ec <__vector_13+0x98>
      dump_invalid_data = false;
 276:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <dump_invalid_data>
      invalid_user_input = false;
 27a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <invalid_user_input>
 27e:	36 c0       	rjmp	.+108    	; 0x2ec <__vector_13+0x98>
      }
      return;
    }
  msg_buffer[msg_buffer_pointer] = UDR;
 280:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 284:	e8 2f       	mov	r30, r24
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	9c b1       	in	r25, 0x0c	; 12
 28a:	e7 59       	subi	r30, 0x97	; 151
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	90 83       	st	Z, r25
  msg_buffer_pointer++;
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>

  // Msg is empty
  // Ignore null msgs
  if (msg_buffer[msg_buffer_pointer - 1] == 0 && msg_buffer_pointer == 1) {
 296:	e8 2f       	mov	r30, r24
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	e8 59       	subi	r30, 0x98	; 152
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	90 81       	ld	r25, Z
 2a0:	91 11       	cpse	r25, r1
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__vector_13+0x58>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	11 f4       	brne	.+4      	; 0x2ac <__vector_13+0x58>
    msg_buffer_pointer = 0;
 2a8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    }

  // Msg is longer than required
  if (msg_buffer_pointer == msg_length && msg_buffer[msg_buffer_pointer - 1] != 0) {
 2ac:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 2b0:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <msg_length>
 2b4:	e9 13       	cpse	r30, r25
 2b6:	0d c0       	rjmp	.+26     	; 0x2d2 <__vector_13+0x7e>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e8 59       	subi	r30, 0x98	; 152
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	39 f0       	breq	.+14     	; 0x2d2 <__vector_13+0x7e>
    invalid_user_input = true;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <invalid_user_input>
    dump_invalid_data = true;
 2ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <dump_invalid_data>
    msg_buffer_pointer = 0;
 2ce:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    callFunWhenBufferReady(requesting_function);
    }

  // Msg has ended and is within the required length
  if (msg_buffer[msg_buffer_pointer - 1] == 0 && msg_buffer_pointer <= msg_length) {
 2d2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 2d6:	e8 2f       	mov	r30, r24
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	e8 59       	subi	r30, 0x98	; 152
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	20 81       	ld	r18, Z
 2e0:	21 11       	cpse	r18, r1
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <__vector_13+0x98>
 2e4:	98 17       	cp	r25, r24
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <__vector_13+0x98>
    callFunWhenBufferReady(requesting_function);
    msg_buffer_pointer = 0;
 2e8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    }
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
