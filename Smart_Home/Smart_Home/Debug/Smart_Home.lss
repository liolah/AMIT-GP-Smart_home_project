
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003a0  00000434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800068  00800068  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b92  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000878  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000755  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002aa  00000000  00000000  00002836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  8a:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BT_sendString>:
void BT_sendChar(char data){
  UART_sendChar(data);
}

void BT_sendString(char* str){
  UART_sendString(str);
  92:	0e 94 44 01 	call	0x288	; 0x288 <UART_sendString>
  96:	08 95       	ret

00000098 <main>:
#include "MCAL/Timer/timer.h"
#include "Services/User/user.h"
#include "Services/Remote_access/remote.h"

int main(void) {
	UART_init(500000);
  98:	60 e2       	ldi	r22, 0x20	; 32
  9a:	71 ea       	ldi	r23, 0xA1	; 161
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_init>
	
	while (1) {
		test();
  a4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	83 ed       	ldi	r24, 0xD3	; 211
  ac:	90 e3       	ldi	r25, 0x30	; 48
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x16>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x20>
  b8:	00 00       	nop
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <main+0xc>

000000bc <UART_init>:

// Receive a char using UART
void UART_receiveChar(char* x) {
  while (!read_bit(UCSRA, RXC)); // Wait for the data to be received.
  *x = UDR;
  }
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <UART_init+0x6>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <UART_init+0x8>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	69 83       	std	Y+1, r22	; 0x01
  ca:	7a 83       	std	Y+2, r23	; 0x02
  cc:	8b 83       	std	Y+3, r24	; 0x03
  ce:	9c 83       	std	Y+4, r25	; 0x04
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	ab 81       	ldd	r26, Y+3	; 0x03
  d6:	bc 81       	ldd	r27, Y+4	; 0x04
  d8:	81 15       	cp	r24, r1
  da:	2b e4       	ldi	r18, 0x4B	; 75
  dc:	92 07       	cpc	r25, r18
  de:	a1 05       	cpc	r26, r1
  e0:	b1 05       	cpc	r27, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <UART_init+0x2a>
  e4:	50 c0       	rjmp	.+160    	; 0x186 <UART_init+0xca>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	eb e4       	ldi	r30, 0x4B	; 75
  ea:	9e 07       	cpc	r25, r30
  ec:	a1 05       	cpc	r26, r1
  ee:	b1 05       	cpc	r27, r1
  f0:	90 f4       	brcc	.+36     	; 0x116 <UART_init+0x5a>
  f2:	80 3c       	cpi	r24, 0xC0	; 192
  f4:	f2 e1       	ldi	r31, 0x12	; 18
  f6:	9f 07       	cpc	r25, r31
  f8:	a1 05       	cpc	r26, r1
  fa:	b1 05       	cpc	r27, r1
  fc:	c1 f1       	breq	.+112    	; 0x16e <UART_init+0xb2>
  fe:	80 38       	cpi	r24, 0x80	; 128
 100:	25 e2       	ldi	r18, 0x25	; 37
 102:	92 07       	cpc	r25, r18
 104:	a1 05       	cpc	r26, r1
 106:	b1 05       	cpc	r27, r1
 108:	c1 f1       	breq	.+112    	; 0x17a <UART_init+0xbe>
 10a:	80 36       	cpi	r24, 0x60	; 96
 10c:	99 40       	sbci	r25, 0x09	; 9
 10e:	a1 05       	cpc	r26, r1
 110:	b1 05       	cpc	r27, r1
 112:	11 f1       	breq	.+68     	; 0x158 <UART_init+0x9c>
 114:	55 c0       	rjmp	.+170    	; 0x1c0 <UART_init+0x104>
 116:	81 15       	cp	r24, r1
 118:	f4 e8       	ldi	r31, 0x84	; 132
 11a:	9f 07       	cpc	r25, r31
 11c:	f3 e0       	ldi	r31, 0x03	; 3
 11e:	af 07       	cpc	r26, r31
 120:	b1 05       	cpc	r27, r1
 122:	e9 f1       	breq	.+122    	; 0x19e <UART_init+0xe2>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	24 e8       	ldi	r18, 0x84	; 132
 128:	92 07       	cpc	r25, r18
 12a:	23 e0       	ldi	r18, 0x03	; 3
 12c:	a2 07       	cpc	r26, r18
 12e:	b1 05       	cpc	r27, r1
 130:	30 f4       	brcc	.+12     	; 0x13e <UART_init+0x82>
 132:	81 15       	cp	r24, r1
 134:	92 4c       	sbci	r25, 0xC2	; 194
 136:	a1 40       	sbci	r26, 0x01	; 1
 138:	b1 05       	cpc	r27, r1
 13a:	59 f1       	breq	.+86     	; 0x192 <UART_init+0xd6>
 13c:	41 c0       	rjmp	.+130    	; 0x1c0 <UART_init+0x104>
 13e:	80 32       	cpi	r24, 0x20	; 32
 140:	f1 ea       	ldi	r31, 0xA1	; 161
 142:	9f 07       	cpc	r25, r31
 144:	f7 e0       	ldi	r31, 0x07	; 7
 146:	af 07       	cpc	r26, r31
 148:	b1 05       	cpc	r27, r1
 14a:	79 f1       	breq	.+94     	; 0x1aa <UART_init+0xee>
 14c:	80 34       	cpi	r24, 0x40	; 64
 14e:	92 44       	sbci	r25, 0x42	; 66
 150:	af 40       	sbci	r26, 0x0F	; 15
 152:	b1 05       	cpc	r27, r1
 154:	81 f1       	breq	.+96     	; 0x1b6 <UART_init+0xfa>
 156:	34 c0       	rjmp	.+104    	; 0x1c0 <UART_init+0x104>
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	89 e2       	ldi	r24, 0x29	; 41
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	20 ea       	ldi	r18, 0xA0	; 160
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	2b c0       	rjmp	.+86     	; 0x1c4 <UART_init+0x108>
 16e:	89 e2       	ldi	r24, 0x29	; 41
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2f ec       	ldi	r18, 0xCF	; 207
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	25 c0       	rjmp	.+74     	; 0x1c4 <UART_init+0x108>
 17a:	89 e2       	ldi	r24, 0x29	; 41
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	27 e6       	ldi	r18, 0x67	; 103
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	1f c0       	rjmp	.+62     	; 0x1c4 <UART_init+0x108>
 186:	89 e2       	ldi	r24, 0x29	; 41
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	23 e3       	ldi	r18, 0x33	; 51
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
 190:	19 c0       	rjmp	.+50     	; 0x1c4 <UART_init+0x108>
 192:	89 e2       	ldi	r24, 0x29	; 41
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	28 e0       	ldi	r18, 0x08	; 8
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	13 c0       	rjmp	.+38     	; 0x1c4 <UART_init+0x108>
 19e:	89 e2       	ldi	r24, 0x29	; 41
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	23 e0       	ldi	r18, 0x03	; 3
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <UART_init+0x108>
 1aa:	89 e2       	ldi	r24, 0x29	; 41
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <UART_init+0x108>
 1b6:	89 e2       	ldi	r24, 0x29	; 41
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	10 82       	st	Z, r1
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <UART_init+0x108>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	2e c0       	rjmp	.+92     	; 0x220 <UART_init+0x164>
 1c4:	8a e2       	ldi	r24, 0x2A	; 42
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	2a e2       	ldi	r18, 0x2A	; 42
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	28 60       	ori	r18, 0x08	; 8
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	8a e2       	ldi	r24, 0x2A	; 42
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	2a e2       	ldi	r18, 0x2A	; 42
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	20 61       	ori	r18, 0x10	; 16
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
 1e8:	80 e4       	ldi	r24, 0x40	; 64
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	20 e4       	ldi	r18, 0x40	; 64
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	20 81       	ld	r18, Z
 1f4:	20 68       	ori	r18, 0x80	; 128
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	20 e4       	ldi	r18, 0x40	; 64
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	20 81       	ld	r18, Z
 206:	22 60       	ori	r18, 0x02	; 2
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18
 20c:	80 e4       	ldi	r24, 0x40	; 64
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	20 e4       	ldi	r18, 0x40	; 64
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	20 81       	ld	r18, Z
 218:	24 60       	ori	r18, 0x04	; 4
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <UART_sendChar>:
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	1f 92       	push	r1
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	00 00       	nop
 23c:	8b e2       	ldi	r24, 0x2B	; 43
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	82 95       	swap	r24
 246:	86 95       	lsr	r24
 248:	87 70       	andi	r24, 0x07	; 7
 24a:	88 2f       	mov	r24, r24
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	81 70       	andi	r24, 0x01	; 1
 250:	99 27       	eor	r25, r25
 252:	89 2b       	or	r24, r25
 254:	99 f3       	breq	.-26     	; 0x23c <UART_sendChar+0xe>
 256:	8c e2       	ldi	r24, 0x2C	; 44
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	29 81       	ldd	r18, Y+1	; 0x01
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	00 00       	nop
 262:	8b e2       	ldi	r24, 0x2B	; 43
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	80 81       	ld	r24, Z
 26a:	82 95       	swap	r24
 26c:	86 95       	lsr	r24
 26e:	86 95       	lsr	r24
 270:	83 70       	andi	r24, 0x03	; 3
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	81 70       	andi	r24, 0x01	; 1
 278:	99 27       	eor	r25, r25
 27a:	89 2b       	or	r24, r25
 27c:	91 f3       	breq	.-28     	; 0x262 <UART_sendChar+0x34>
 27e:	00 00       	nop
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <UART_sendString>:

void UART_sendString(char* str) {
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <UART_sendString+0x6>
 28e:	00 d0       	rcall	.+0      	; 0x290 <UART_sendString+0x8>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	9c 83       	std	Y+4, r25	; 0x04
 296:	8b 83       	std	Y+3, r24	; 0x03
  uint32_t i = 0;
 298:	1a 82       	std	Y+2, r1	; 0x02
 29a:	19 82       	std	Y+1, r1	; 0x01
  while (str[i] != 0) {
 29c:	0f c0       	rjmp	.+30     	; 0x2bc <UART_sendString+0x34>
    UART_sendChar(str[i]);
 29e:	2b 81       	ldd	r18, Y+3	; 0x03
 2a0:	3c 81       	ldd	r19, Y+4	; 0x04
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	82 0f       	add	r24, r18
 2a8:	93 1f       	adc	r25, r19
 2aa:	fc 01       	movw	r30, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	0e 94 17 01 	call	0x22e	; 0x22e <UART_sendChar>
    i++;
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	9a 81       	ldd	r25, Y+2	; 0x02
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	9a 83       	std	Y+2, r25	; 0x02
 2ba:	89 83       	std	Y+1, r24	; 0x01
  *x = UDR;
  }

void UART_sendString(char* str) {
  uint32_t i = 0;
  while (str[i] != 0) {
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	3c 81       	ldd	r19, Y+4	; 0x04
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	82 0f       	add	r24, r18
 2c6:	93 1f       	adc	r25, r19
 2c8:	fc 01       	movw	r30, r24
 2ca:	80 81       	ld	r24, Z
 2cc:	88 23       	and	r24, r24
 2ce:	39 f7       	brne	.-50     	; 0x29e <UART_sendString+0x16>
    UART_sendChar(str[i]);
    i++;
    }
  UART_sendChar(0); // Send null to terminate the string
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 17 01 	call	0x22e	; 0x22e <UART_sendChar>
  }
 2d6:	00 00       	nop
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <test>:

void test() {
  BT_sendString("Hello!\n");
  }

void callFunWhenBufferReady(uint8_t functionNumber) {
 2e6:	80 e6       	ldi	r24, 0x60	; 96
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 49 00 	call	0x92	; 0x92 <BT_sendString>
 2ee:	08 95       	ret

000002f0 <__vector_13>:
      case 5:
        break;
    }
  }

ISR(USART_RXC_vect) {
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
  // If the buffer is full or the msg length is reached without the input being terminated by null, then it's wrong input
  // If the input is invalid, reset the buffer pointer, set the invalid input flag and call the function responsible for handling the input
  if (dump_invalid_data) {
 304:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <dump_invalid_data>
 308:	88 23       	and	r24, r24
 30a:	41 f0       	breq	.+16     	; 0x31c <__vector_13+0x2c>
    if (UDR == 0) {
 30c:	8c b1       	in	r24, 0x0c	; 12
 30e:	81 11       	cpse	r24, r1
 310:	3b c0       	rjmp	.+118    	; 0x388 <__vector_13+0x98>
      dump_invalid_data = false;
 312:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <dump_invalid_data>
      invalid_user_input = false;
 316:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <invalid_user_input>
 31a:	36 c0       	rjmp	.+108    	; 0x388 <__vector_13+0x98>
      }
      return;
    }
  msg_buffer[msg_buffer_pointer] = UDR;
 31c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 320:	e8 2f       	mov	r30, r24
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	9c b1       	in	r25, 0x0c	; 12
 326:	e7 59       	subi	r30, 0x97	; 151
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	90 83       	st	Z, r25
  msg_buffer_pointer++;
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>

  // Msg is empty
  // Ignore null msgs
  if (msg_buffer[msg_buffer_pointer - 1] == 0 && msg_buffer_pointer == 1) {
 332:	e8 2f       	mov	r30, r24
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	e8 59       	subi	r30, 0x98	; 152
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	90 81       	ld	r25, Z
 33c:	91 11       	cpse	r25, r1
 33e:	04 c0       	rjmp	.+8      	; 0x348 <__vector_13+0x58>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	11 f4       	brne	.+4      	; 0x348 <__vector_13+0x58>
    msg_buffer_pointer = 0;
 344:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    }

  // Msg is longer than required
  if (msg_buffer_pointer == msg_length && msg_buffer[msg_buffer_pointer - 1] != 0) {
 348:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 34c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <msg_length>
 350:	e9 13       	cpse	r30, r25
 352:	0d c0       	rjmp	.+26     	; 0x36e <__vector_13+0x7e>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e8 59       	subi	r30, 0x98	; 152
 358:	ff 4f       	sbci	r31, 0xFF	; 255
 35a:	80 81       	ld	r24, Z
 35c:	88 23       	and	r24, r24
 35e:	39 f0       	breq	.+14     	; 0x36e <__vector_13+0x7e>
    invalid_user_input = true;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <invalid_user_input>
    dump_invalid_data = true;
 366:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <dump_invalid_data>
    msg_buffer_pointer = 0;
 36a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    callFunWhenBufferReady(requesting_function);
    }

  // Msg has ended and is within the required length
  if (msg_buffer[msg_buffer_pointer - 1] == 0 && msg_buffer_pointer <= msg_length) {
 36e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 372:	e8 2f       	mov	r30, r24
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	e8 59       	subi	r30, 0x98	; 152
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	20 81       	ld	r18, Z
 37c:	21 11       	cpse	r18, r1
 37e:	04 c0       	rjmp	.+8      	; 0x388 <__vector_13+0x98>
 380:	98 17       	cp	r25, r24
 382:	10 f0       	brcs	.+4      	; 0x388 <__vector_13+0x98>
    callFunWhenBufferReady(requesting_function);
    msg_buffer_pointer = 0;
 384:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    }
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
