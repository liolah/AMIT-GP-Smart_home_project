
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000766  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0e  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000675  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b45  00000000  00000000  0000193b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000844  00000000  00000000  00002a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000329f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b1 03 	jmp	0x762	; 0x762 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "HAL/EEPROM/eeprom.h"
#include "MCAL/ADC/adc.h"
#include "MCAL/Timer/timer.h"

int main(void) {
	set_bit(DDRB, 3);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	88 60       	ori	r24, 0x08	; 8
  96:	87 bb       	out	0x17, r24	; 23
	PWM_init(OC_0, 0.9, PWM_FAST);
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	46 e6       	ldi	r20, 0x66	; 102
  9c:	56 e6       	ldi	r21, 0x66	; 102
  9e:	66 e6       	ldi	r22, 0x66	; 102
  a0:	7f e3       	ldi	r23, 0x3F	; 63
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <PWM_init>
	Timer_start(TIMER_0, 8);
  a8:	68 e0       	ldi	r22, 0x08	; 8
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Timer_start>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x20>

000000b4 <isValidTimer>:
          }
        break;
    }
  // Everything went well
  return TIMER_OK;
  }
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	10 f4       	brcc	.+4      	; 0xbc <isValidTimer+0x8>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	08 95       	ret
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret

000000c0 <set_prescalar>:
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	18 2f       	mov	r17, r24
  c8:	eb 01       	movw	r28, r22
  ca:	0e 94 5a 00 	call	0xb4	; 0xb4 <isValidTimer>
  ce:	88 23       	and	r24, r24
  d0:	09 f4       	brne	.+2      	; 0xd4 <set_prescalar+0x14>
  d2:	6a c1       	rjmp	.+724    	; 0x3a8 <set_prescalar+0x2e8>
  d4:	11 30       	cpi	r17, 0x01	; 1
  d6:	09 f4       	brne	.+2      	; 0xda <set_prescalar+0x1a>
  d8:	6f c0       	rjmp	.+222    	; 0x1b8 <set_prescalar+0xf8>
  da:	20 f0       	brcs	.+8      	; 0xe4 <set_prescalar+0x24>
  dc:	12 30       	cpi	r17, 0x02	; 2
  de:	09 f4       	brne	.+2      	; 0xe2 <set_prescalar+0x22>
  e0:	d5 c0       	rjmp	.+426    	; 0x28c <set_prescalar+0x1cc>
  e2:	64 c1       	rjmp	.+712    	; 0x3ac <set_prescalar+0x2ec>
  e4:	c2 30       	cpi	r28, 0x02	; 2
  e6:	d1 05       	cpc	r29, r1
  e8:	78 f0       	brcs	.+30     	; 0x108 <set_prescalar+0x48>
  ea:	c8 30       	cpi	r28, 0x08	; 8
  ec:	d1 05       	cpc	r29, r1
  ee:	61 f0       	breq	.+24     	; 0x108 <set_prescalar+0x48>
  f0:	c0 34       	cpi	r28, 0x40	; 64
  f2:	d1 05       	cpc	r29, r1
  f4:	49 f0       	breq	.+18     	; 0x108 <set_prescalar+0x48>
  f6:	c1 15       	cp	r28, r1
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	d8 07       	cpc	r29, r24
  fc:	29 f0       	breq	.+10     	; 0x108 <set_prescalar+0x48>
  fe:	c1 15       	cp	r28, r1
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	d8 07       	cpc	r29, r24
 104:	09 f0       	breq	.+2      	; 0x108 <set_prescalar+0x48>
 106:	54 c1       	rjmp	.+680    	; 0x3b0 <set_prescalar+0x2f0>
 108:	c8 30       	cpi	r28, 0x08	; 8
 10a:	d1 05       	cpc	r29, r1
 10c:	49 f1       	breq	.+82     	; 0x160 <set_prescalar+0xa0>
 10e:	28 f4       	brcc	.+10     	; 0x11a <set_prescalar+0x5a>
 110:	20 97       	sbiw	r28, 0x00	; 0
 112:	81 f0       	breq	.+32     	; 0x134 <set_prescalar+0x74>
 114:	21 97       	sbiw	r28, 0x01	; 1
 116:	c9 f0       	breq	.+50     	; 0x14a <set_prescalar+0x8a>
 118:	4d c1       	rjmp	.+666    	; 0x3b4 <set_prescalar+0x2f4>
 11a:	c1 15       	cp	r28, r1
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	d8 07       	cpc	r29, r24
 120:	a9 f1       	breq	.+106    	; 0x18c <set_prescalar+0xcc>
 122:	c1 15       	cp	r28, r1
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	d8 07       	cpc	r29, r24
 128:	e1 f1       	breq	.+120    	; 0x1a2 <set_prescalar+0xe2>
 12a:	c0 34       	cpi	r28, 0x40	; 64
 12c:	d1 05       	cpc	r29, r1
 12e:	09 f0       	breq	.+2      	; 0x132 <set_prescalar+0x72>
 130:	41 c1       	rjmp	.+642    	; 0x3b4 <set_prescalar+0x2f4>
 132:	21 c0       	rjmp	.+66     	; 0x176 <set_prescalar+0xb6>
 134:	83 b7       	in	r24, 0x33	; 51
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	83 bf       	out	0x33, r24	; 51
 13a:	83 b7       	in	r24, 0x33	; 51
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	83 bf       	out	0x33, r24	; 51
 140:	83 b7       	in	r24, 0x33	; 51
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	83 bf       	out	0x33, r24	; 51
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	3e c1       	rjmp	.+636    	; 0x3c6 <set_prescalar+0x306>
 14a:	83 b7       	in	r24, 0x33	; 51
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	83 bf       	out	0x33, r24	; 51
 150:	83 b7       	in	r24, 0x33	; 51
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	83 bf       	out	0x33, r24	; 51
 156:	83 b7       	in	r24, 0x33	; 51
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	83 bf       	out	0x33, r24	; 51
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	33 c1       	rjmp	.+614    	; 0x3c6 <set_prescalar+0x306>
 160:	83 b7       	in	r24, 0x33	; 51
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	83 bf       	out	0x33, r24	; 51
 166:	83 b7       	in	r24, 0x33	; 51
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	83 bf       	out	0x33, r24	; 51
 16c:	83 b7       	in	r24, 0x33	; 51
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	83 bf       	out	0x33, r24	; 51
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	28 c1       	rjmp	.+592    	; 0x3c6 <set_prescalar+0x306>
 176:	83 b7       	in	r24, 0x33	; 51
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	83 bf       	out	0x33, r24	; 51
 17c:	83 b7       	in	r24, 0x33	; 51
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	83 bf       	out	0x33, r24	; 51
 182:	83 b7       	in	r24, 0x33	; 51
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	83 bf       	out	0x33, r24	; 51
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	1d c1       	rjmp	.+570    	; 0x3c6 <set_prescalar+0x306>
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	8e 7f       	andi	r24, 0xFE	; 254
 190:	83 bf       	out	0x33, r24	; 51
 192:	83 b7       	in	r24, 0x33	; 51
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	83 bf       	out	0x33, r24	; 51
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	83 bf       	out	0x33, r24	; 51
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	12 c1       	rjmp	.+548    	; 0x3c6 <set_prescalar+0x306>
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	83 bf       	out	0x33, r24	; 51
 1a8:	83 b7       	in	r24, 0x33	; 51
 1aa:	8d 7f       	andi	r24, 0xFD	; 253
 1ac:	83 bf       	out	0x33, r24	; 51
 1ae:	83 b7       	in	r24, 0x33	; 51
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	83 bf       	out	0x33, r24	; 51
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	07 c1       	rjmp	.+526    	; 0x3c6 <set_prescalar+0x306>
 1b8:	c2 30       	cpi	r28, 0x02	; 2
 1ba:	d1 05       	cpc	r29, r1
 1bc:	78 f0       	brcs	.+30     	; 0x1dc <set_prescalar+0x11c>
 1be:	c8 30       	cpi	r28, 0x08	; 8
 1c0:	d1 05       	cpc	r29, r1
 1c2:	61 f0       	breq	.+24     	; 0x1dc <set_prescalar+0x11c>
 1c4:	c0 34       	cpi	r28, 0x40	; 64
 1c6:	d1 05       	cpc	r29, r1
 1c8:	49 f0       	breq	.+18     	; 0x1dc <set_prescalar+0x11c>
 1ca:	c1 15       	cp	r28, r1
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	d8 07       	cpc	r29, r24
 1d0:	29 f0       	breq	.+10     	; 0x1dc <set_prescalar+0x11c>
 1d2:	c1 15       	cp	r28, r1
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	d8 07       	cpc	r29, r24
 1d8:	09 f0       	breq	.+2      	; 0x1dc <set_prescalar+0x11c>
 1da:	ee c0       	rjmp	.+476    	; 0x3b8 <set_prescalar+0x2f8>
 1dc:	c8 30       	cpi	r28, 0x08	; 8
 1de:	d1 05       	cpc	r29, r1
 1e0:	49 f1       	breq	.+82     	; 0x234 <set_prescalar+0x174>
 1e2:	28 f4       	brcc	.+10     	; 0x1ee <set_prescalar+0x12e>
 1e4:	20 97       	sbiw	r28, 0x00	; 0
 1e6:	81 f0       	breq	.+32     	; 0x208 <set_prescalar+0x148>
 1e8:	21 97       	sbiw	r28, 0x01	; 1
 1ea:	c9 f0       	breq	.+50     	; 0x21e <set_prescalar+0x15e>
 1ec:	e7 c0       	rjmp	.+462    	; 0x3bc <set_prescalar+0x2fc>
 1ee:	c1 15       	cp	r28, r1
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	d8 07       	cpc	r29, r24
 1f4:	a9 f1       	breq	.+106    	; 0x260 <set_prescalar+0x1a0>
 1f6:	c1 15       	cp	r28, r1
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	d8 07       	cpc	r29, r24
 1fc:	e1 f1       	breq	.+120    	; 0x276 <set_prescalar+0x1b6>
 1fe:	c0 34       	cpi	r28, 0x40	; 64
 200:	d1 05       	cpc	r29, r1
 202:	09 f0       	breq	.+2      	; 0x206 <set_prescalar+0x146>
 204:	db c0       	rjmp	.+438    	; 0x3bc <set_prescalar+0x2fc>
 206:	21 c0       	rjmp	.+66     	; 0x24a <set_prescalar+0x18a>
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	8e bd       	out	0x2e, r24	; 46
 20e:	8e b5       	in	r24, 0x2e	; 46
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	8e bd       	out	0x2e, r24	; 46
 214:	8e b5       	in	r24, 0x2e	; 46
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	8e bd       	out	0x2e, r24	; 46
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	d4 c0       	rjmp	.+424    	; 0x3c6 <set_prescalar+0x306>
 21e:	8e b5       	in	r24, 0x2e	; 46
 220:	81 60       	ori	r24, 0x01	; 1
 222:	8e bd       	out	0x2e, r24	; 46
 224:	8e b5       	in	r24, 0x2e	; 46
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	8e bd       	out	0x2e, r24	; 46
 22a:	8e b5       	in	r24, 0x2e	; 46
 22c:	8b 7f       	andi	r24, 0xFB	; 251
 22e:	8e bd       	out	0x2e, r24	; 46
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	c9 c0       	rjmp	.+402    	; 0x3c6 <set_prescalar+0x306>
 234:	8e b5       	in	r24, 0x2e	; 46
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	8e bd       	out	0x2e, r24	; 46
 23a:	8e b5       	in	r24, 0x2e	; 46
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	8e bd       	out	0x2e, r24	; 46
 240:	8e b5       	in	r24, 0x2e	; 46
 242:	8b 7f       	andi	r24, 0xFB	; 251
 244:	8e bd       	out	0x2e, r24	; 46
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	be c0       	rjmp	.+380    	; 0x3c6 <set_prescalar+0x306>
 24a:	8e b5       	in	r24, 0x2e	; 46
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	8e bd       	out	0x2e, r24	; 46
 250:	8e b5       	in	r24, 0x2e	; 46
 252:	82 60       	ori	r24, 0x02	; 2
 254:	8e bd       	out	0x2e, r24	; 46
 256:	8e b5       	in	r24, 0x2e	; 46
 258:	8b 7f       	andi	r24, 0xFB	; 251
 25a:	8e bd       	out	0x2e, r24	; 46
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	b3 c0       	rjmp	.+358    	; 0x3c6 <set_prescalar+0x306>
 260:	8e b5       	in	r24, 0x2e	; 46
 262:	8e 7f       	andi	r24, 0xFE	; 254
 264:	8e bd       	out	0x2e, r24	; 46
 266:	8e b5       	in	r24, 0x2e	; 46
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	8e bd       	out	0x2e, r24	; 46
 26c:	8e b5       	in	r24, 0x2e	; 46
 26e:	84 60       	ori	r24, 0x04	; 4
 270:	8e bd       	out	0x2e, r24	; 46
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	a8 c0       	rjmp	.+336    	; 0x3c6 <set_prescalar+0x306>
 276:	8e b5       	in	r24, 0x2e	; 46
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	8e bd       	out	0x2e, r24	; 46
 27c:	8e b5       	in	r24, 0x2e	; 46
 27e:	8d 7f       	andi	r24, 0xFD	; 253
 280:	8e bd       	out	0x2e, r24	; 46
 282:	8e b5       	in	r24, 0x2e	; 46
 284:	84 60       	ori	r24, 0x04	; 4
 286:	8e bd       	out	0x2e, r24	; 46
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	9d c0       	rjmp	.+314    	; 0x3c6 <set_prescalar+0x306>
 28c:	c2 30       	cpi	r28, 0x02	; 2
 28e:	d1 05       	cpc	r29, r1
 290:	a8 f0       	brcs	.+42     	; 0x2bc <set_prescalar+0x1fc>
 292:	c8 30       	cpi	r28, 0x08	; 8
 294:	d1 05       	cpc	r29, r1
 296:	91 f0       	breq	.+36     	; 0x2bc <set_prescalar+0x1fc>
 298:	c0 32       	cpi	r28, 0x20	; 32
 29a:	d1 05       	cpc	r29, r1
 29c:	79 f0       	breq	.+30     	; 0x2bc <set_prescalar+0x1fc>
 29e:	c0 34       	cpi	r28, 0x40	; 64
 2a0:	d1 05       	cpc	r29, r1
 2a2:	61 f0       	breq	.+24     	; 0x2bc <set_prescalar+0x1fc>
 2a4:	c0 38       	cpi	r28, 0x80	; 128
 2a6:	d1 05       	cpc	r29, r1
 2a8:	49 f0       	breq	.+18     	; 0x2bc <set_prescalar+0x1fc>
 2aa:	c1 15       	cp	r28, r1
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	d8 07       	cpc	r29, r24
 2b0:	29 f0       	breq	.+10     	; 0x2bc <set_prescalar+0x1fc>
 2b2:	c1 15       	cp	r28, r1
 2b4:	84 e0       	ldi	r24, 0x04	; 4
 2b6:	d8 07       	cpc	r29, r24
 2b8:	09 f0       	breq	.+2      	; 0x2bc <set_prescalar+0x1fc>
 2ba:	82 c0       	rjmp	.+260    	; 0x3c0 <set_prescalar+0x300>
 2bc:	c0 32       	cpi	r28, 0x20	; 32
 2be:	d1 05       	cpc	r29, r1
 2c0:	e1 f1       	breq	.+120    	; 0x33a <set_prescalar+0x27a>
 2c2:	38 f4       	brcc	.+14     	; 0x2d2 <set_prescalar+0x212>
 2c4:	c1 30       	cpi	r28, 0x01	; 1
 2c6:	d1 05       	cpc	r29, r1
 2c8:	11 f1       	breq	.+68     	; 0x30e <set_prescalar+0x24e>
 2ca:	b0 f0       	brcs	.+44     	; 0x2f8 <set_prescalar+0x238>
 2cc:	28 97       	sbiw	r28, 0x08	; 8
 2ce:	51 f1       	breq	.+84     	; 0x324 <set_prescalar+0x264>
 2d0:	79 c0       	rjmp	.+242    	; 0x3c4 <set_prescalar+0x304>
 2d2:	c0 38       	cpi	r28, 0x80	; 128
 2d4:	d1 05       	cpc	r29, r1
 2d6:	09 f4       	brne	.+2      	; 0x2da <set_prescalar+0x21a>
 2d8:	46 c0       	rjmp	.+140    	; 0x366 <set_prescalar+0x2a6>
 2da:	20 f4       	brcc	.+8      	; 0x2e4 <set_prescalar+0x224>
 2dc:	c0 34       	cpi	r28, 0x40	; 64
 2de:	d1 05       	cpc	r29, r1
 2e0:	b9 f1       	breq	.+110    	; 0x350 <set_prescalar+0x290>
 2e2:	70 c0       	rjmp	.+224    	; 0x3c4 <set_prescalar+0x304>
 2e4:	c1 15       	cp	r28, r1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	d8 07       	cpc	r29, r24
 2ea:	09 f4       	brne	.+2      	; 0x2ee <set_prescalar+0x22e>
 2ec:	47 c0       	rjmp	.+142    	; 0x37c <set_prescalar+0x2bc>
 2ee:	c1 15       	cp	r28, r1
 2f0:	d4 40       	sbci	r29, 0x04	; 4
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <set_prescalar+0x236>
 2f4:	4e c0       	rjmp	.+156    	; 0x392 <set_prescalar+0x2d2>
 2f6:	66 c0       	rjmp	.+204    	; 0x3c4 <set_prescalar+0x304>
 2f8:	85 b5       	in	r24, 0x25	; 37
 2fa:	8e 7f       	andi	r24, 0xFE	; 254
 2fc:	85 bd       	out	0x25, r24	; 37
 2fe:	85 b5       	in	r24, 0x25	; 37
 300:	8d 7f       	andi	r24, 0xFD	; 253
 302:	85 bd       	out	0x25, r24	; 37
 304:	85 b5       	in	r24, 0x25	; 37
 306:	8b 7f       	andi	r24, 0xFB	; 251
 308:	85 bd       	out	0x25, r24	; 37
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	5c c0       	rjmp	.+184    	; 0x3c6 <set_prescalar+0x306>
 30e:	85 b5       	in	r24, 0x25	; 37
 310:	81 60       	ori	r24, 0x01	; 1
 312:	85 bd       	out	0x25, r24	; 37
 314:	85 b5       	in	r24, 0x25	; 37
 316:	8d 7f       	andi	r24, 0xFD	; 253
 318:	85 bd       	out	0x25, r24	; 37
 31a:	85 b5       	in	r24, 0x25	; 37
 31c:	8b 7f       	andi	r24, 0xFB	; 251
 31e:	85 bd       	out	0x25, r24	; 37
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	51 c0       	rjmp	.+162    	; 0x3c6 <set_prescalar+0x306>
 324:	85 b5       	in	r24, 0x25	; 37
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	85 bd       	out	0x25, r24	; 37
 32a:	85 b5       	in	r24, 0x25	; 37
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	85 bd       	out	0x25, r24	; 37
 330:	85 b5       	in	r24, 0x25	; 37
 332:	8b 7f       	andi	r24, 0xFB	; 251
 334:	85 bd       	out	0x25, r24	; 37
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	46 c0       	rjmp	.+140    	; 0x3c6 <set_prescalar+0x306>
 33a:	85 b5       	in	r24, 0x25	; 37
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	85 bd       	out	0x25, r24	; 37
 340:	85 b5       	in	r24, 0x25	; 37
 342:	82 60       	ori	r24, 0x02	; 2
 344:	85 bd       	out	0x25, r24	; 37
 346:	85 b5       	in	r24, 0x25	; 37
 348:	8b 7f       	andi	r24, 0xFB	; 251
 34a:	85 bd       	out	0x25, r24	; 37
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	3b c0       	rjmp	.+118    	; 0x3c6 <set_prescalar+0x306>
 350:	85 b5       	in	r24, 0x25	; 37
 352:	8e 7f       	andi	r24, 0xFE	; 254
 354:	85 bd       	out	0x25, r24	; 37
 356:	85 b5       	in	r24, 0x25	; 37
 358:	8d 7f       	andi	r24, 0xFD	; 253
 35a:	85 bd       	out	0x25, r24	; 37
 35c:	85 b5       	in	r24, 0x25	; 37
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	85 bd       	out	0x25, r24	; 37
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	30 c0       	rjmp	.+96     	; 0x3c6 <set_prescalar+0x306>
 366:	85 b5       	in	r24, 0x25	; 37
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	85 bd       	out	0x25, r24	; 37
 36c:	85 b5       	in	r24, 0x25	; 37
 36e:	8d 7f       	andi	r24, 0xFD	; 253
 370:	85 bd       	out	0x25, r24	; 37
 372:	85 b5       	in	r24, 0x25	; 37
 374:	84 60       	ori	r24, 0x04	; 4
 376:	85 bd       	out	0x25, r24	; 37
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	25 c0       	rjmp	.+74     	; 0x3c6 <set_prescalar+0x306>
 37c:	85 b5       	in	r24, 0x25	; 37
 37e:	8e 7f       	andi	r24, 0xFE	; 254
 380:	85 bd       	out	0x25, r24	; 37
 382:	85 b5       	in	r24, 0x25	; 37
 384:	82 60       	ori	r24, 0x02	; 2
 386:	85 bd       	out	0x25, r24	; 37
 388:	85 b5       	in	r24, 0x25	; 37
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	85 bd       	out	0x25, r24	; 37
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	1a c0       	rjmp	.+52     	; 0x3c6 <set_prescalar+0x306>
 392:	85 b5       	in	r24, 0x25	; 37
 394:	81 60       	ori	r24, 0x01	; 1
 396:	85 bd       	out	0x25, r24	; 37
 398:	85 b5       	in	r24, 0x25	; 37
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	85 bd       	out	0x25, r24	; 37
 39e:	85 b5       	in	r24, 0x25	; 37
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	85 bd       	out	0x25, r24	; 37
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0f c0       	rjmp	.+30     	; 0x3c6 <set_prescalar+0x306>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0d c0       	rjmp	.+26     	; 0x3c6 <set_prescalar+0x306>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0b c0       	rjmp	.+22     	; 0x3c6 <set_prescalar+0x306>
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <set_prescalar+0x306>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <set_prescalar+0x306>
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <set_prescalar+0x306>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <set_prescalar+0x306>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <set_prescalar+0x306>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	08 95       	ret

000003ce <Timer_start>:
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	c8 2f       	mov	r28, r24
 3d6:	8b 01       	movw	r16, r22
 3d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <isValidTimer>
 3dc:	88 23       	and	r24, r24
 3de:	31 f0       	breq	.+12     	; 0x3ec <Timer_start+0x1e>
 3e0:	b8 01       	movw	r22, r16
 3e2:	8c 2f       	mov	r24, r28
 3e4:	0e 94 60 00 	call	0xc0	; 0xc0 <set_prescalar>
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <Timer_start+0x20>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <PWM_init>:

// *The pwm frequency can be calculated from the equation: (F_CPU/(N*256)) for fast pwm and (F_CPU/(N*510)) for phase correct pwm
// Initialize the timers to start in pwm mode
EN_timerError_t PWM_init(uint8_t pwmPin, double dutyCycle, uint8_t mode) {
 3f6:	cf 92       	push	r12
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
 3fe:	84 30       	cpi	r24, 0x04	; 4
 400:	08 f0       	brcs	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	b8 c0       	rjmp	.+368    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
    return WRONG_PWM_PIN;
    }
  if (mode != PWM_FAST && mode != PWM_PHASE_CORRECT) {
 404:	9f ef       	ldi	r25, 0xFF	; 255
 406:	92 0f       	add	r25, r18
 408:	92 30       	cpi	r25, 0x02	; 2
 40a:	08 f0       	brcs	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40c:	b5 c0       	rjmp	.+362    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
    return WRONG_PWM_MODE;
    }
  switch (pwmPin) {
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	81 f1       	breq	.+96     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 412:	6a 01       	movw	r12, r20
 414:	7b 01       	movw	r14, r22
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	38 f0       	brcs	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	09 f4       	brne	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	53 c0       	rjmp	.+166    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	09 f4       	brne	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	82 c0       	rjmp	.+260    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 426:	aa c0       	rjmp	.+340    	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
      case OC_0:
        switch (mode) {
 428:	21 30       	cpi	r18, 0x01	; 1
 42a:	19 f0       	breq	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42c:	22 30       	cpi	r18, 0x02	; 2
 42e:	41 f0       	breq	.+16     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 430:	0d c0       	rjmp	.+26     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
            case PWM_FAST:
              // TCCR0 |= (1 << WGM01) | (1 << WGM00);
              set_bit(TCCR0, WGM00);
 432:	83 b7       	in	r24, 0x33	; 51
 434:	80 64       	ori	r24, 0x40	; 64
 436:	83 bf       	out	0x33, r24	; 51
              set_bit(TCCR0, WGM01);
 438:	83 b7       	in	r24, 0x33	; 51
 43a:	88 60       	ori	r24, 0x08	; 8
 43c:	83 bf       	out	0x33, r24	; 51
              break;
 43e:	06 c0       	rjmp	.+12     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
            case PWM_PHASE_CORRECT:
              // TCCR0 |= (1 << WGM00);
              // TCCR0 &= ~(1 << WGM01);
              set_bit(TCCR0, WGM00);
 440:	83 b7       	in	r24, 0x33	; 51
 442:	80 64       	ori	r24, 0x40	; 64
 444:	83 bf       	out	0x33, r24	; 51
              clear_bit(TCCR0, WGM01);
 446:	83 b7       	in	r24, 0x33	; 51
 448:	87 7f       	andi	r24, 0xF7	; 247
 44a:	83 bf       	out	0x33, r24	; 51
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR0, COM00);
 44c:	83 b7       	in	r24, 0x33	; 51
 44e:	8f 7e       	andi	r24, 0xEF	; 239
 450:	83 bf       	out	0x33, r24	; 51
        set_bit(TCCR0, COM01);
 452:	83 b7       	in	r24, 0x33	; 51
 454:	80 62       	ori	r24, 0x20	; 32
 456:	83 bf       	out	0x33, r24	; 51
#else 
        set_bit(TCCR0, COM00);
        set_bit(TCCR0, COM01);
#endif
        // The value in the OCR determines the duty cycle
        OCR0 = (uint8_t)(dutyCycle * 255);
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	4f e7       	ldi	r20, 0x7F	; 127
 45e:	53 e4       	ldi	r21, 0x43	; 67
 460:	c7 01       	movw	r24, r14
 462:	b6 01       	movw	r22, r12
 464:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsf3>
 468:	0e 94 c4 02 	call	0x588	; 0x588 <__fixunssfsi>
 46c:	6c bf       	out	0x3c, r22	; 60
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 46e:	80 e0       	ldi	r24, 0x00	; 0
        set_bit(TCCR0, COM00);
        set_bit(TCCR0, COM01);
#endif
        // The value in the OCR determines the duty cycle
        OCR0 = (uint8_t)(dutyCycle * 255);
        break;
 470:	86 c0       	rjmp	.+268    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
      case OC_1A:
        switch (mode) {
 472:	21 30       	cpi	r18, 0x01	; 1
 474:	19 f0       	breq	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 476:	22 30       	cpi	r18, 0x02	; 2
 478:	71 f0       	breq	.+28     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 47a:	19 c0       	rjmp	.+50     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
            case PWM_FAST:
              set_bit(TCCR1A, WGM10);
 47c:	8f b5       	in	r24, 0x2f	; 47
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, WGM11);
 482:	8f b5       	in	r24, 0x2f	; 47
 484:	82 60       	ori	r24, 0x02	; 2
 486:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1B, WGM12);
 488:	8e b5       	in	r24, 0x2e	; 46
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	8e bd       	out	0x2e, r24	; 46
              set_bit(TCCR1B, WGM13);
 48e:	8e b5       	in	r24, 0x2e	; 46
 490:	80 61       	ori	r24, 0x10	; 16
 492:	8e bd       	out	0x2e, r24	; 46
              break;
 494:	0c c0       	rjmp	.+24     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
            case PWM_PHASE_CORRECT:
              set_bit(TCCR1A, WGM10);
 496:	8f b5       	in	r24, 0x2f	; 47
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, WGM11);
 49c:	8f b5       	in	r24, 0x2f	; 47
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	8f bd       	out	0x2f, r24	; 47
              clear_bit(TCCR1B, WGM12);
 4a2:	8e b5       	in	r24, 0x2e	; 46
 4a4:	87 7f       	andi	r24, 0xF7	; 247
 4a6:	8e bd       	out	0x2e, r24	; 46
              set_bit(TCCR1B, WGM13);
 4a8:	8e b5       	in	r24, 0x2e	; 46
 4aa:	80 61       	ori	r24, 0x10	; 16
 4ac:	8e bd       	out	0x2e, r24	; 46
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR1A, COM1A0);
 4ae:	8f b5       	in	r24, 0x2f	; 47
 4b0:	8f 7b       	andi	r24, 0xBF	; 191
 4b2:	8f bd       	out	0x2f, r24	; 47
        set_bit(TCCR1A, COM1A1);
 4b4:	8f b5       	in	r24, 0x2f	; 47
 4b6:	80 68       	ori	r24, 0x80	; 128
 4b8:	8f bd       	out	0x2f, r24	; 47
#else 
        set_bit(TCCR1A, COM1A0);
        set_bit(TCCR1A, COM1A1);
#endif
        OCR1A = 1000;
 4ba:	88 ee       	ldi	r24, 0xE8	; 232
 4bc:	93 e0       	ldi	r25, 0x03	; 3
 4be:	9b bd       	out	0x2b, r25	; 43
 4c0:	8a bd       	out	0x2a, r24	; 42
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
#else 
        set_bit(TCCR1A, COM1A0);
        set_bit(TCCR1A, COM1A1);
#endif
        OCR1A = 1000;
        break;
 4c4:	5c c0       	rjmp	.+184    	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
      case OC_1B:
        switch (mode) {
 4c6:	21 30       	cpi	r18, 0x01	; 1
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ca:	22 30       	cpi	r18, 0x02	; 2
 4cc:	71 f0       	breq	.+28     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4ce:	19 c0       	rjmp	.+50     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
            case PWM_FAST:
              set_bit(TCCR1A, WGM10);
 4d0:	8f b5       	in	r24, 0x2f	; 47
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, WGM11);
 4d6:	8f b5       	in	r24, 0x2f	; 47
 4d8:	82 60       	ori	r24, 0x02	; 2
 4da:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1B, WGM12);
 4dc:	8e b5       	in	r24, 0x2e	; 46
 4de:	88 60       	ori	r24, 0x08	; 8
 4e0:	8e bd       	out	0x2e, r24	; 46
              set_bit(TCCR1B, WGM13);
 4e2:	8e b5       	in	r24, 0x2e	; 46
 4e4:	80 61       	ori	r24, 0x10	; 16
 4e6:	8e bd       	out	0x2e, r24	; 46
              break;
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
            case PWM_PHASE_CORRECT:
              set_bit(TCCR1A, WGM10);
 4ea:	8f b5       	in	r24, 0x2f	; 47
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	8f bd       	out	0x2f, r24	; 47
              set_bit(TCCR1A, WGM11);
 4f0:	8f b5       	in	r24, 0x2f	; 47
 4f2:	82 60       	ori	r24, 0x02	; 2
 4f4:	8f bd       	out	0x2f, r24	; 47
              clear_bit(TCCR1B, WGM12);
 4f6:	8e b5       	in	r24, 0x2e	; 46
 4f8:	87 7f       	andi	r24, 0xF7	; 247
 4fa:	8e bd       	out	0x2e, r24	; 46
              set_bit(TCCR1B, WGM13);
 4fc:	8e b5       	in	r24, 0x2e	; 46
 4fe:	80 61       	ori	r24, 0x10	; 16
 500:	8e bd       	out	0x2e, r24	; 46
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR1A, COM1B0);
 502:	8f b5       	in	r24, 0x2f	; 47
 504:	8f 7e       	andi	r24, 0xEF	; 239
 506:	8f bd       	out	0x2f, r24	; 47
        set_bit(TCCR1A, COM1B1);
 508:	8f b5       	in	r24, 0x2f	; 47
 50a:	80 62       	ori	r24, 0x20	; 32
 50c:	8f bd       	out	0x2f, r24	; 47
#else 
        set_bit(TCCR1A, COM1B0);
        set_bit(TCCR1A, COM1B1);
#endif
        OCR1A = (uint16_t)(dutyCycle * 65535);
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	3f ef       	ldi	r19, 0xFF	; 255
 512:	4f e7       	ldi	r20, 0x7F	; 127
 514:	57 e4       	ldi	r21, 0x47	; 71
 516:	c7 01       	movw	r24, r14
 518:	b6 01       	movw	r22, r12
 51a:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsf3>
 51e:	0e 94 c4 02 	call	0x588	; 0x588 <__fixunssfsi>
 522:	7b bd       	out	0x2b, r23	; 43
 524:	6a bd       	out	0x2a, r22	; 42
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 526:	80 e0       	ldi	r24, 0x00	; 0
#else 
        set_bit(TCCR1A, COM1B0);
        set_bit(TCCR1A, COM1B1);
#endif
        OCR1A = (uint16_t)(dutyCycle * 65535);
        break;
 528:	2a c0       	rjmp	.+84     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
      case OC_2:
        switch (mode) {
 52a:	21 30       	cpi	r18, 0x01	; 1
 52c:	19 f0       	breq	.+6      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 52e:	22 30       	cpi	r18, 0x02	; 2
 530:	41 f0       	breq	.+16     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 532:	0d c0       	rjmp	.+26     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
            case PWM_FAST:
              // TCCR2 |= (1 << WGM20) | (1 << WGM21);
              set_bit(TCCR2, WGM20);
 534:	85 b5       	in	r24, 0x25	; 37
 536:	80 64       	ori	r24, 0x40	; 64
 538:	85 bd       	out	0x25, r24	; 37
              set_bit(TCCR2, WGM21);
 53a:	85 b5       	in	r24, 0x25	; 37
 53c:	88 60       	ori	r24, 0x08	; 8
 53e:	85 bd       	out	0x25, r24	; 37
              break;
 540:	06 c0       	rjmp	.+12     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
            case PWM_PHASE_CORRECT:
              // TCCR2 |= (1 << WGM20);
              // TCCR2 &= ~(1 << WGM21);
              set_bit(TCCR2, WGM20);
 542:	85 b5       	in	r24, 0x25	; 37
 544:	80 64       	ori	r24, 0x40	; 64
 546:	85 bd       	out	0x25, r24	; 37
              clear_bit(TCCR2, WGM21);
 548:	85 b5       	in	r24, 0x25	; 37
 54a:	87 7f       	andi	r24, 0xF7	; 247
 54c:	85 bd       	out	0x25, r24	; 37
              break;
          }
#ifdef PWM_NON_INVERTED_MODE
        clear_bit(TCCR2, COM20);
 54e:	85 b5       	in	r24, 0x25	; 37
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	85 bd       	out	0x25, r24	; 37
        set_bit(TCCR2, COM21);
 554:	85 b5       	in	r24, 0x25	; 37
 556:	80 62       	ori	r24, 0x20	; 32
 558:	85 bd       	out	0x25, r24	; 37
#else 
        set_bit(TCCR2, COM20);
        set_bit(TCCR2, COM21);
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	4f e7       	ldi	r20, 0x7F	; 127
 560:	53 e4       	ldi	r21, 0x43	; 67
 562:	c7 01       	movw	r24, r14
 564:	b6 01       	movw	r22, r12
 566:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsf3>
 56a:	0e 94 c4 02 	call	0x588	; 0x588 <__fixunssfsi>
 56e:	63 bd       	out	0x23, r22	; 35
        break;
    }
  return TIMER_OK;
 570:	80 e0       	ldi	r24, 0x00	; 0
        set_bit(TCCR2, COM20);
        set_bit(TCCR2, COM21);
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
 572:	05 c0       	rjmp	.+10     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>

// *The pwm frequency can be calculated from the equation: (F_CPU/(N*256)) for fast pwm and (F_CPU/(N*510)) for phase correct pwm
// Initialize the timers to start in pwm mode
EN_timerError_t PWM_init(uint8_t pwmPin, double dutyCycle, uint8_t mode) {
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
    return WRONG_PWM_PIN;
 574:	86 e0       	ldi	r24, 0x06	; 6
 576:	03 c0       	rjmp	.+6      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
    }
  if (mode != PWM_FAST && mode != PWM_PHASE_CORRECT) {
    return WRONG_PWM_MODE;
 578:	85 e0       	ldi	r24, 0x05	; 5
 57a:	01 c0       	rjmp	.+2      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
#endif
        // The value in the OCR determines the duty cycle
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 57c:	80 e0       	ldi	r24, 0x00	; 0
  }
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	08 95       	ret

00000588 <__fixunssfsi>:
 588:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_splitA>
 58c:	88 f0       	brcs	.+34     	; 0x5b0 <__fixunssfsi+0x28>
 58e:	9f 57       	subi	r25, 0x7F	; 127
 590:	98 f0       	brcs	.+38     	; 0x5b8 <__fixunssfsi+0x30>
 592:	b9 2f       	mov	r27, r25
 594:	99 27       	eor	r25, r25
 596:	b7 51       	subi	r27, 0x17	; 23
 598:	b0 f0       	brcs	.+44     	; 0x5c6 <__fixunssfsi+0x3e>
 59a:	e1 f0       	breq	.+56     	; 0x5d4 <__fixunssfsi+0x4c>
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	1a f0       	brmi	.+6      	; 0x5ac <__fixunssfsi+0x24>
 5a6:	ba 95       	dec	r27
 5a8:	c9 f7       	brne	.-14     	; 0x59c <__fixunssfsi+0x14>
 5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <__fixunssfsi+0x4c>
 5ac:	b1 30       	cpi	r27, 0x01	; 1
 5ae:	91 f0       	breq	.+36     	; 0x5d4 <__fixunssfsi+0x4c>
 5b0:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_zero>
 5b4:	b1 e0       	ldi	r27, 0x01	; 1
 5b6:	08 95       	ret
 5b8:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_zero>
 5bc:	67 2f       	mov	r22, r23
 5be:	78 2f       	mov	r23, r24
 5c0:	88 27       	eor	r24, r24
 5c2:	b8 5f       	subi	r27, 0xF8	; 248
 5c4:	39 f0       	breq	.+14     	; 0x5d4 <__fixunssfsi+0x4c>
 5c6:	b9 3f       	cpi	r27, 0xF9	; 249
 5c8:	cc f3       	brlt	.-14     	; 0x5bc <__fixunssfsi+0x34>
 5ca:	86 95       	lsr	r24
 5cc:	77 95       	ror	r23
 5ce:	67 95       	ror	r22
 5d0:	b3 95       	inc	r27
 5d2:	d9 f7       	brne	.-10     	; 0x5ca <__fixunssfsi+0x42>
 5d4:	3e f4       	brtc	.+14     	; 0x5e4 <__fixunssfsi+0x5c>
 5d6:	90 95       	com	r25
 5d8:	80 95       	com	r24
 5da:	70 95       	com	r23
 5dc:	61 95       	neg	r22
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	08 95       	ret

000005e6 <__fp_split3>:
 5e6:	57 fd       	sbrc	r21, 7
 5e8:	90 58       	subi	r25, 0x80	; 128
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	59 f0       	breq	.+22     	; 0x606 <__fp_splitA+0x10>
 5f0:	5f 3f       	cpi	r21, 0xFF	; 255
 5f2:	71 f0       	breq	.+28     	; 0x610 <__fp_splitA+0x1a>
 5f4:	47 95       	ror	r20

000005f6 <__fp_splitA>:
 5f6:	88 0f       	add	r24, r24
 5f8:	97 fb       	bst	r25, 7
 5fa:	99 1f       	adc	r25, r25
 5fc:	61 f0       	breq	.+24     	; 0x616 <__fp_splitA+0x20>
 5fe:	9f 3f       	cpi	r25, 0xFF	; 255
 600:	79 f0       	breq	.+30     	; 0x620 <__fp_splitA+0x2a>
 602:	87 95       	ror	r24
 604:	08 95       	ret
 606:	12 16       	cp	r1, r18
 608:	13 06       	cpc	r1, r19
 60a:	14 06       	cpc	r1, r20
 60c:	55 1f       	adc	r21, r21
 60e:	f2 cf       	rjmp	.-28     	; 0x5f4 <__fp_split3+0xe>
 610:	46 95       	lsr	r20
 612:	f1 df       	rcall	.-30     	; 0x5f6 <__fp_splitA>
 614:	08 c0       	rjmp	.+16     	; 0x626 <__fp_splitA+0x30>
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	18 06       	cpc	r1, r24
 61c:	99 1f       	adc	r25, r25
 61e:	f1 cf       	rjmp	.-30     	; 0x602 <__fp_splitA+0xc>
 620:	86 95       	lsr	r24
 622:	71 05       	cpc	r23, r1
 624:	61 05       	cpc	r22, r1
 626:	08 94       	sec
 628:	08 95       	ret

0000062a <__fp_zero>:
 62a:	e8 94       	clt

0000062c <__fp_szero>:
 62c:	bb 27       	eor	r27, r27
 62e:	66 27       	eor	r22, r22
 630:	77 27       	eor	r23, r23
 632:	cb 01       	movw	r24, r22
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret

00000638 <__mulsf3>:
 638:	0e 94 2f 03 	call	0x65e	; 0x65e <__mulsf3x>
 63c:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_round>
 640:	0e 94 92 03 	call	0x724	; 0x724 <__fp_pscA>
 644:	38 f0       	brcs	.+14     	; 0x654 <__mulsf3+0x1c>
 646:	0e 94 99 03 	call	0x732	; 0x732 <__fp_pscB>
 64a:	20 f0       	brcs	.+8      	; 0x654 <__mulsf3+0x1c>
 64c:	95 23       	and	r25, r21
 64e:	11 f0       	breq	.+4      	; 0x654 <__mulsf3+0x1c>
 650:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 654:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>
 658:	11 24       	eor	r1, r1
 65a:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_szero>

0000065e <__mulsf3x>:
 65e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_split3>
 662:	70 f3       	brcs	.-36     	; 0x640 <__mulsf3+0x8>

00000664 <__mulsf3_pse>:
 664:	95 9f       	mul	r25, r21
 666:	c1 f3       	breq	.-16     	; 0x658 <__mulsf3+0x20>
 668:	95 0f       	add	r25, r21
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	55 1f       	adc	r21, r21
 66e:	62 9f       	mul	r22, r18
 670:	f0 01       	movw	r30, r0
 672:	72 9f       	mul	r23, r18
 674:	bb 27       	eor	r27, r27
 676:	f0 0d       	add	r31, r0
 678:	b1 1d       	adc	r27, r1
 67a:	63 9f       	mul	r22, r19
 67c:	aa 27       	eor	r26, r26
 67e:	f0 0d       	add	r31, r0
 680:	b1 1d       	adc	r27, r1
 682:	aa 1f       	adc	r26, r26
 684:	64 9f       	mul	r22, r20
 686:	66 27       	eor	r22, r22
 688:	b0 0d       	add	r27, r0
 68a:	a1 1d       	adc	r26, r1
 68c:	66 1f       	adc	r22, r22
 68e:	82 9f       	mul	r24, r18
 690:	22 27       	eor	r18, r18
 692:	b0 0d       	add	r27, r0
 694:	a1 1d       	adc	r26, r1
 696:	62 1f       	adc	r22, r18
 698:	73 9f       	mul	r23, r19
 69a:	b0 0d       	add	r27, r0
 69c:	a1 1d       	adc	r26, r1
 69e:	62 1f       	adc	r22, r18
 6a0:	83 9f       	mul	r24, r19
 6a2:	a0 0d       	add	r26, r0
 6a4:	61 1d       	adc	r22, r1
 6a6:	22 1f       	adc	r18, r18
 6a8:	74 9f       	mul	r23, r20
 6aa:	33 27       	eor	r19, r19
 6ac:	a0 0d       	add	r26, r0
 6ae:	61 1d       	adc	r22, r1
 6b0:	23 1f       	adc	r18, r19
 6b2:	84 9f       	mul	r24, r20
 6b4:	60 0d       	add	r22, r0
 6b6:	21 1d       	adc	r18, r1
 6b8:	82 2f       	mov	r24, r18
 6ba:	76 2f       	mov	r23, r22
 6bc:	6a 2f       	mov	r22, r26
 6be:	11 24       	eor	r1, r1
 6c0:	9f 57       	subi	r25, 0x7F	; 127
 6c2:	50 40       	sbci	r21, 0x00	; 0
 6c4:	9a f0       	brmi	.+38     	; 0x6ec <__mulsf3_pse+0x88>
 6c6:	f1 f0       	breq	.+60     	; 0x704 <__mulsf3_pse+0xa0>
 6c8:	88 23       	and	r24, r24
 6ca:	4a f0       	brmi	.+18     	; 0x6de <__mulsf3_pse+0x7a>
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	bb 1f       	adc	r27, r27
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	91 50       	subi	r25, 0x01	; 1
 6da:	50 40       	sbci	r21, 0x00	; 0
 6dc:	a9 f7       	brne	.-22     	; 0x6c8 <__mulsf3_pse+0x64>
 6de:	9e 3f       	cpi	r25, 0xFE	; 254
 6e0:	51 05       	cpc	r21, r1
 6e2:	80 f0       	brcs	.+32     	; 0x704 <__mulsf3_pse+0xa0>
 6e4:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 6e8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_szero>
 6ec:	5f 3f       	cpi	r21, 0xFF	; 255
 6ee:	e4 f3       	brlt	.-8      	; 0x6e8 <__mulsf3_pse+0x84>
 6f0:	98 3e       	cpi	r25, 0xE8	; 232
 6f2:	d4 f3       	brlt	.-12     	; 0x6e8 <__mulsf3_pse+0x84>
 6f4:	86 95       	lsr	r24
 6f6:	77 95       	ror	r23
 6f8:	67 95       	ror	r22
 6fa:	b7 95       	ror	r27
 6fc:	f7 95       	ror	r31
 6fe:	e7 95       	ror	r30
 700:	9f 5f       	subi	r25, 0xFF	; 255
 702:	c1 f7       	brne	.-16     	; 0x6f4 <__mulsf3_pse+0x90>
 704:	fe 2b       	or	r31, r30
 706:	88 0f       	add	r24, r24
 708:	91 1d       	adc	r25, r1
 70a:	96 95       	lsr	r25
 70c:	87 95       	ror	r24
 70e:	97 f9       	bld	r25, 7
 710:	08 95       	ret

00000712 <__fp_inf>:
 712:	97 f9       	bld	r25, 7
 714:	9f 67       	ori	r25, 0x7F	; 127
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	08 95       	ret

0000071e <__fp_nan>:
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	80 ec       	ldi	r24, 0xC0	; 192
 722:	08 95       	ret

00000724 <__fp_pscA>:
 724:	00 24       	eor	r0, r0
 726:	0a 94       	dec	r0
 728:	16 16       	cp	r1, r22
 72a:	17 06       	cpc	r1, r23
 72c:	18 06       	cpc	r1, r24
 72e:	09 06       	cpc	r0, r25
 730:	08 95       	ret

00000732 <__fp_pscB>:
 732:	00 24       	eor	r0, r0
 734:	0a 94       	dec	r0
 736:	12 16       	cp	r1, r18
 738:	13 06       	cpc	r1, r19
 73a:	14 06       	cpc	r1, r20
 73c:	05 06       	cpc	r0, r21
 73e:	08 95       	ret

00000740 <__fp_round>:
 740:	09 2e       	mov	r0, r25
 742:	03 94       	inc	r0
 744:	00 0c       	add	r0, r0
 746:	11 f4       	brne	.+4      	; 0x74c <__fp_round+0xc>
 748:	88 23       	and	r24, r24
 74a:	52 f0       	brmi	.+20     	; 0x760 <__fp_round+0x20>
 74c:	bb 0f       	add	r27, r27
 74e:	40 f4       	brcc	.+16     	; 0x760 <__fp_round+0x20>
 750:	bf 2b       	or	r27, r31
 752:	11 f4       	brne	.+4      	; 0x758 <__fp_round+0x18>
 754:	60 ff       	sbrs	r22, 0
 756:	04 c0       	rjmp	.+8      	; 0x760 <__fp_round+0x20>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <_exit>:
 762:	f8 94       	cli

00000764 <__stop_program>:
 764:	ff cf       	rjmp	.-2      	; 0x764 <__stop_program>
