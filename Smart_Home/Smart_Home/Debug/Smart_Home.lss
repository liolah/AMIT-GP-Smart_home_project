
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f3f  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000893  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000104a  00000000  00000000  0000258a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e6  00000000  00000000  00003838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cc3  00000000  00000000  00003e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  8a:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <servo_init>:

#include "servo.h"

 // Initialized the servo
void servo_init() {
  DIO_init(SERVO_PIN, SERVO_PORT, OUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e4       	ldi	r22, 0x44	; 68
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_init>
  PWM_init(SERVO_PWM_PIN, (SERVO_MIN_HIGH_PULSE_DURATION_mS / SERVO_PULSE_PERIODIC_TIME_mS), PWM_PHASE_CORRECT);
  9c:	22 e0       	ldi	r18, 0x02	; 2
  9e:	4d ec       	ldi	r20, 0xCD	; 205
  a0:	5c ec       	ldi	r21, 0xCC	; 204
  a2:	6c ec       	ldi	r22, 0xCC	; 204
  a4:	7c e3       	ldi	r23, 0x3C	; 60
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <PWM_init>
  Timer_start(TIMER_1, 8);
  ac:	68 e0       	ldi	r22, 0x08	; 8
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <Timer_start>
  b6:	08 95       	ret

000000b8 <servo_move_to_angle>:
  }

// Moves the servo to a specific angle (relative to the 0 angle position, not the previous one).
void servo_move_to_angle(uint8_t angle) {
  PWM_set_DC(SERVO_PWM_PIN, ((double)angle / ((SERVO_MAX_ANGLE - SERVO_MIN_ANGLE) * (SERVO_PULSE_PERIODIC_TIME_mS / (SERVO_MAX_HIGH_PULSE_DURATION_mS - SERVO_MIN_HIGH_PULSE_DURATION_mS)))) + (SERVO_MIN_HIGH_PULSE_DURATION_mS / SERVO_PULSE_PERIODIC_TIME_mS));
  b8:	68 2f       	mov	r22, r24
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatunsisf>
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	41 ee       	ldi	r20, 0xE1	; 225
  ca:	54 e4       	ldi	r21, 0x44	; 68
  cc:	0e 94 56 04 	call	0x8ac	; 0x8ac <__divsf3>
  d0:	2d ec       	ldi	r18, 0xCD	; 205
  d2:	3c ec       	ldi	r19, 0xCC	; 204
  d4:	4c ec       	ldi	r20, 0xCC	; 204
  d6:	5c e3       	ldi	r21, 0x3C	; 60
  d8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3>
  dc:	ab 01       	movw	r20, r22
  de:	bc 01       	movw	r22, r24
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 aa 03 	call	0x754	; 0x754 <PWM_set_DC>
  e6:	08 95       	ret

000000e8 <main>:
#include "HAL/Servo/servo.h"
#include "MCAL/ADC/adc.h"
#include "MCAL/Timer/timer.h"

int main(void) {
	servo_init();
  e8:	0e 94 49 00 	call	0x92	; 0x92 <servo_init>
	while (1) {
		int i;
		for (i = 0; i < 185; i += 5)
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	0d c0       	rjmp	.+26     	; 0x10c <main+0x24>
		{
			servo_move_to_angle(i);
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 5c 00 	call	0xb8	; 0xb8 <servo_move_to_angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 ef       	ldi	r24, 0xF9	; 249
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x16>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x20>
 108:	00 00       	nop

int main(void) {
	servo_init();
	while (1) {
		int i;
		for (i = 0; i < 185; i += 5)
 10a:	25 96       	adiw	r28, 0x05	; 5
 10c:	c9 3b       	cpi	r28, 0xB9	; 185
 10e:	d1 05       	cpc	r29, r1
 110:	84 f3       	brlt	.-32     	; 0xf2 <main+0xa>
 112:	c4 eb       	ldi	r28, 0xB4	; 180
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	0d c0       	rjmp	.+26     	; 0x132 <main+0x4a>
			servo_move_to_angle(i);
			_delay_ms(20);
			}
		for (i = 180; i >= 0; i -= 5)
		{
			servo_move_to_angle(i);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 5c 00 	call	0xb8	; 0xb8 <servo_move_to_angle>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x3c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x46>
 12e:	00 00       	nop
		for (i = 0; i < 185; i += 5)
		{
			servo_move_to_angle(i);
			_delay_ms(20);
			}
		for (i = 180; i >= 0; i -= 5)
 130:	25 97       	sbiw	r28, 0x05	; 5
 132:	dd 23       	and	r29, r29
 134:	8c f7       	brge	.-30     	; 0x118 <main+0x30>
 136:	da cf       	rjmp	.-76     	; 0xec <main+0x4>

00000138 <isValidPinNumber>:
bool isValidState(uint8_t state) {
	if (state == HIGH || state == LOW) {
		return true;
		}
	return false;
	}
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	10 f4       	brcc	.+4      	; 0x140 <isValidPinNumber+0x8>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <isValidPortNumber>:
 144:	81 54       	subi	r24, 0x41	; 65
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	10 f4       	brcc	.+4      	; 0x14e <isValidPortNumber+0xa>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	08 95       	ret
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret

00000152 <isValidDirection>:
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	10 f4       	brcc	.+4      	; 0x15a <isValidDirection+0x8>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret

0000015e <DIO_init>:

// Initialize the pin direction
EN_dioError_t DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction) {
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	c8 2f       	mov	r28, r24
 166:	d6 2f       	mov	r29, r22
 168:	14 2f       	mov	r17, r20
	// Validate the pin number
	if (!isValidPinNumber(pinNumber)) {
 16a:	0e 94 9c 00 	call	0x138	; 0x138 <isValidPinNumber>
 16e:	88 23       	and	r24, r24
 170:	09 f4       	brne	.+2      	; 0x174 <DIO_init+0x16>
 172:	84 c0       	rjmp	.+264    	; 0x27c <DIO_init+0x11e>
		return WRONG_PIN;
		}
	// Validate the port number
	if (!isValidPortNumber(portNumber)) {
 174:	8d 2f       	mov	r24, r29
 176:	0e 94 a2 00 	call	0x144	; 0x144 <isValidPortNumber>
 17a:	88 23       	and	r24, r24
 17c:	09 f4       	brne	.+2      	; 0x180 <DIO_init+0x22>
 17e:	80 c0       	rjmp	.+256    	; 0x280 <DIO_init+0x122>
		return WRONG_PORT;
		}
	// Validate the direction
	if (!isValidDirection(direction)) {
 180:	81 2f       	mov	r24, r17
 182:	0e 94 a9 00 	call	0x152	; 0x152 <isValidDirection>
 186:	88 23       	and	r24, r24
 188:	09 f4       	brne	.+2      	; 0x18c <DIO_init+0x2e>
 18a:	7c c0       	rjmp	.+248    	; 0x284 <DIO_init+0x126>
		return WRONG_DIRECTION;
		}
	switch (portNumber) {
 18c:	d2 34       	cpi	r29, 0x42	; 66
 18e:	29 f1       	breq	.+74     	; 0x1da <DIO_init+0x7c>
 190:	18 f4       	brcc	.+6      	; 0x198 <DIO_init+0x3a>
 192:	d1 34       	cpi	r29, 0x41	; 65
 194:	39 f0       	breq	.+14     	; 0x1a4 <DIO_init+0x46>
 196:	78 c0       	rjmp	.+240    	; 0x288 <DIO_init+0x12a>
 198:	d3 34       	cpi	r29, 0x43	; 67
 19a:	d1 f1       	breq	.+116    	; 0x210 <DIO_init+0xb2>
 19c:	d4 34       	cpi	r29, 0x44	; 68
 19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_init+0x44>
 1a0:	52 c0       	rjmp	.+164    	; 0x246 <DIO_init+0xe8>
 1a2:	72 c0       	rjmp	.+228    	; 0x288 <DIO_init+0x12a>
			case PORT_A:
				if (direction == OUT) {
 1a4:	11 30       	cpi	r17, 0x01	; 1
 1a6:	61 f4       	brne	.+24     	; 0x1c0 <DIO_init+0x62>
					set_bit(DDRA, pinNumber);
 1a8:	2a b3       	in	r18, 0x1a	; 26
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_init+0x56>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	ca 95       	dec	r28
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_init+0x52>
 1b8:	82 2b       	or	r24, r18
 1ba:	8a bb       	out	0x1a, r24	; 26
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	65 c0       	rjmp	.+202    	; 0x28a <DIO_init+0x12c>
			case PORT_A:
				if (direction == OUT) {
					set_bit(DDRA, pinNumber);
					}
				else {
					clear_bit(DDRA, pinNumber);
 1c0:	2a b3       	in	r18, 0x1a	; 26
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_init+0x6e>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	ca 95       	dec	r28
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_init+0x6a>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	8a bb       	out	0x1a, r24	; 26
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	58 c0       	rjmp	.+176    	; 0x28a <DIO_init+0x12c>
				else {
					clear_bit(DDRA, pinNumber);
					}
				break;
			case PORT_B:
				if (direction == OUT) {
 1da:	11 30       	cpi	r17, 0x01	; 1
 1dc:	61 f4       	brne	.+24     	; 0x1f6 <DIO_init+0x98>
					set_bit(DDRB, pinNumber);
 1de:	27 b3       	in	r18, 0x17	; 23
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_init+0x8c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	ca 95       	dec	r28
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_init+0x88>
 1ee:	82 2b       	or	r24, r18
 1f0:	87 bb       	out	0x17, r24	; 23
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	4a c0       	rjmp	.+148    	; 0x28a <DIO_init+0x12c>
			case PORT_B:
				if (direction == OUT) {
					set_bit(DDRB, pinNumber);
					}
				else {
					clear_bit(DDRB, pinNumber);
 1f6:	27 b3       	in	r18, 0x17	; 23
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_init+0xa4>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	ca 95       	dec	r28
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_init+0xa0>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	87 bb       	out	0x17, r24	; 23
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	3d c0       	rjmp	.+122    	; 0x28a <DIO_init+0x12c>
				else {
					clear_bit(DDRB, pinNumber);
					}
				break;
			case PORT_C:
				if (direction == OUT) {
 210:	11 30       	cpi	r17, 0x01	; 1
 212:	61 f4       	brne	.+24     	; 0x22c <DIO_init+0xce>
					set_bit(DDRC, pinNumber);
 214:	24 b3       	in	r18, 0x14	; 20
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_init+0xc2>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	ca 95       	dec	r28
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_init+0xbe>
 224:	82 2b       	or	r24, r18
 226:	84 bb       	out	0x14, r24	; 20
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	2f c0       	rjmp	.+94     	; 0x28a <DIO_init+0x12c>
			case PORT_C:
				if (direction == OUT) {
					set_bit(DDRC, pinNumber);
					}
				else {
					clear_bit(DDRC, pinNumber);
 22c:	24 b3       	in	r18, 0x14	; 20
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_init+0xda>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	ca 95       	dec	r28
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_init+0xd6>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	84 bb       	out	0x14, r24	; 20
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	22 c0       	rjmp	.+68     	; 0x28a <DIO_init+0x12c>
				else {
					clear_bit(DDRC, pinNumber);
					}
				break;
			case PORT_D:
				if (direction == OUT) {
 246:	11 30       	cpi	r17, 0x01	; 1
 248:	61 f4       	brne	.+24     	; 0x262 <DIO_init+0x104>
					set_bit(DDRD, pinNumber);
 24a:	21 b3       	in	r18, 0x11	; 17
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_init+0xf8>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	ca 95       	dec	r28
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_init+0xf4>
 25a:	82 2b       	or	r24, r18
 25c:	81 bb       	out	0x11, r24	; 17
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	14 c0       	rjmp	.+40     	; 0x28a <DIO_init+0x12c>
			case PORT_D:
				if (direction == OUT) {
					set_bit(DDRD, pinNumber);
					}
				else {
					clear_bit(DDRD, pinNumber);
 262:	21 b3       	in	r18, 0x11	; 17
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_init+0x110>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	ca 95       	dec	r28
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_init+0x10c>
 272:	80 95       	com	r24
 274:	82 23       	and	r24, r18
 276:	81 bb       	out	0x11, r24	; 17
					}
				break;
		}
	return DIO_OK;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	07 c0       	rjmp	.+14     	; 0x28a <DIO_init+0x12c>

// Initialize the pin direction
EN_dioError_t DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction) {
	// Validate the pin number
	if (!isValidPinNumber(pinNumber)) {
		return WRONG_PIN;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	05 c0       	rjmp	.+10     	; 0x28a <DIO_init+0x12c>
		}
	// Validate the port number
	if (!isValidPortNumber(portNumber)) {
		return WRONG_PORT;
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	03 c0       	rjmp	.+6      	; 0x28a <DIO_init+0x12c>
		}
	// Validate the direction
	if (!isValidDirection(direction)) {
		return WRONG_DIRECTION;
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	01 c0       	rjmp	.+2      	; 0x28a <DIO_init+0x12c>
				else {
					clear_bit(DDRD, pinNumber);
					}
				break;
		}
	return DIO_OK;
 288:	80 e0       	ldi	r24, 0x00	; 0
	}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	08 95       	ret

00000292 <isValidTimer>:
        clear_bit(TCCR2, COM21);
        set_prescalar(TIMER_2, PWM_PRESCALAR);
        break;
    }
  return TIMER_OK;
  }
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	10 f4       	brcc	.+4      	; 0x29a <isValidTimer+0x8>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret

0000029e <set_prescalar>:
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	18 2f       	mov	r17, r24
 2a6:	eb 01       	movw	r28, r22
 2a8:	0e 94 49 01 	call	0x292	; 0x292 <isValidTimer>
 2ac:	88 23       	and	r24, r24
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <set_prescalar+0x14>
 2b0:	6a c1       	rjmp	.+724    	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 2b2:	11 30       	cpi	r17, 0x01	; 1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <set_prescalar+0x1a>
 2b6:	6f c0       	rjmp	.+222    	; 0x396 <set_prescalar+0xf8>
 2b8:	20 f0       	brcs	.+8      	; 0x2c2 <set_prescalar+0x24>
 2ba:	12 30       	cpi	r17, 0x02	; 2
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <set_prescalar+0x22>
 2be:	d5 c0       	rjmp	.+426    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 2c0:	64 c1       	rjmp	.+712    	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 2c2:	c2 30       	cpi	r28, 0x02	; 2
 2c4:	d1 05       	cpc	r29, r1
 2c6:	78 f0       	brcs	.+30     	; 0x2e6 <set_prescalar+0x48>
 2c8:	c8 30       	cpi	r28, 0x08	; 8
 2ca:	d1 05       	cpc	r29, r1
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <set_prescalar+0x48>
 2ce:	c0 34       	cpi	r28, 0x40	; 64
 2d0:	d1 05       	cpc	r29, r1
 2d2:	49 f0       	breq	.+18     	; 0x2e6 <set_prescalar+0x48>
 2d4:	c1 15       	cp	r28, r1
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	d8 07       	cpc	r29, r24
 2da:	29 f0       	breq	.+10     	; 0x2e6 <set_prescalar+0x48>
 2dc:	c1 15       	cp	r28, r1
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	d8 07       	cpc	r29, r24
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <set_prescalar+0x48>
 2e4:	54 c1       	rjmp	.+680    	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 2e6:	c8 30       	cpi	r28, 0x08	; 8
 2e8:	d1 05       	cpc	r29, r1
 2ea:	49 f1       	breq	.+82     	; 0x33e <set_prescalar+0xa0>
 2ec:	28 f4       	brcc	.+10     	; 0x2f8 <set_prescalar+0x5a>
 2ee:	20 97       	sbiw	r28, 0x00	; 0
 2f0:	81 f0       	breq	.+32     	; 0x312 <set_prescalar+0x74>
 2f2:	21 97       	sbiw	r28, 0x01	; 1
 2f4:	c9 f0       	breq	.+50     	; 0x328 <set_prescalar+0x8a>
 2f6:	4d c1       	rjmp	.+666    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 2f8:	c1 15       	cp	r28, r1
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	d8 07       	cpc	r29, r24
 2fe:	a9 f1       	breq	.+106    	; 0x36a <set_prescalar+0xcc>
 300:	c1 15       	cp	r28, r1
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	d8 07       	cpc	r29, r24
 306:	e1 f1       	breq	.+120    	; 0x380 <set_prescalar+0xe2>
 308:	c0 34       	cpi	r28, 0x40	; 64
 30a:	d1 05       	cpc	r29, r1
 30c:	09 f0       	breq	.+2      	; 0x310 <set_prescalar+0x72>
 30e:	41 c1       	rjmp	.+642    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 310:	21 c0       	rjmp	.+66     	; 0x354 <set_prescalar+0xb6>
 312:	83 b7       	in	r24, 0x33	; 51
 314:	8e 7f       	andi	r24, 0xFE	; 254
 316:	83 bf       	out	0x33, r24	; 51
 318:	83 b7       	in	r24, 0x33	; 51
 31a:	8d 7f       	andi	r24, 0xFD	; 253
 31c:	83 bf       	out	0x33, r24	; 51
 31e:	83 b7       	in	r24, 0x33	; 51
 320:	8b 7f       	andi	r24, 0xFB	; 251
 322:	83 bf       	out	0x33, r24	; 51
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	3e c1       	rjmp	.+636    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	83 bf       	out	0x33, r24	; 51
 32e:	83 b7       	in	r24, 0x33	; 51
 330:	8d 7f       	andi	r24, 0xFD	; 253
 332:	83 bf       	out	0x33, r24	; 51
 334:	83 b7       	in	r24, 0x33	; 51
 336:	8b 7f       	andi	r24, 0xFB	; 251
 338:	83 bf       	out	0x33, r24	; 51
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	33 c1       	rjmp	.+614    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 33e:	83 b7       	in	r24, 0x33	; 51
 340:	8e 7f       	andi	r24, 0xFE	; 254
 342:	83 bf       	out	0x33, r24	; 51
 344:	83 b7       	in	r24, 0x33	; 51
 346:	82 60       	ori	r24, 0x02	; 2
 348:	83 bf       	out	0x33, r24	; 51
 34a:	83 b7       	in	r24, 0x33	; 51
 34c:	8b 7f       	andi	r24, 0xFB	; 251
 34e:	83 bf       	out	0x33, r24	; 51
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	28 c1       	rjmp	.+592    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 354:	83 b7       	in	r24, 0x33	; 51
 356:	81 60       	ori	r24, 0x01	; 1
 358:	83 bf       	out	0x33, r24	; 51
 35a:	83 b7       	in	r24, 0x33	; 51
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	83 bf       	out	0x33, r24	; 51
 360:	83 b7       	in	r24, 0x33	; 51
 362:	8b 7f       	andi	r24, 0xFB	; 251
 364:	83 bf       	out	0x33, r24	; 51
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	1d c1       	rjmp	.+570    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 36a:	83 b7       	in	r24, 0x33	; 51
 36c:	8e 7f       	andi	r24, 0xFE	; 254
 36e:	83 bf       	out	0x33, r24	; 51
 370:	83 b7       	in	r24, 0x33	; 51
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	83 bf       	out	0x33, r24	; 51
 376:	83 b7       	in	r24, 0x33	; 51
 378:	84 60       	ori	r24, 0x04	; 4
 37a:	83 bf       	out	0x33, r24	; 51
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	12 c1       	rjmp	.+548    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 380:	83 b7       	in	r24, 0x33	; 51
 382:	81 60       	ori	r24, 0x01	; 1
 384:	83 bf       	out	0x33, r24	; 51
 386:	83 b7       	in	r24, 0x33	; 51
 388:	8d 7f       	andi	r24, 0xFD	; 253
 38a:	83 bf       	out	0x33, r24	; 51
 38c:	83 b7       	in	r24, 0x33	; 51
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	83 bf       	out	0x33, r24	; 51
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	07 c1       	rjmp	.+526    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 396:	c2 30       	cpi	r28, 0x02	; 2
 398:	d1 05       	cpc	r29, r1
 39a:	78 f0       	brcs	.+30     	; 0x3ba <set_prescalar+0x11c>
 39c:	c8 30       	cpi	r28, 0x08	; 8
 39e:	d1 05       	cpc	r29, r1
 3a0:	61 f0       	breq	.+24     	; 0x3ba <set_prescalar+0x11c>
 3a2:	c0 34       	cpi	r28, 0x40	; 64
 3a4:	d1 05       	cpc	r29, r1
 3a6:	49 f0       	breq	.+18     	; 0x3ba <set_prescalar+0x11c>
 3a8:	c1 15       	cp	r28, r1
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	d8 07       	cpc	r29, r24
 3ae:	29 f0       	breq	.+10     	; 0x3ba <set_prescalar+0x11c>
 3b0:	c1 15       	cp	r28, r1
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	d8 07       	cpc	r29, r24
 3b6:	09 f0       	breq	.+2      	; 0x3ba <set_prescalar+0x11c>
 3b8:	ee c0       	rjmp	.+476    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 3ba:	c8 30       	cpi	r28, 0x08	; 8
 3bc:	d1 05       	cpc	r29, r1
 3be:	49 f1       	breq	.+82     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3c0:	28 f4       	brcc	.+10     	; 0x3cc <set_prescalar+0x12e>
 3c2:	20 97       	sbiw	r28, 0x00	; 0
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <set_prescalar+0x148>
 3c6:	21 97       	sbiw	r28, 0x01	; 1
 3c8:	c9 f0       	breq	.+50     	; 0x3fc <set_prescalar+0x15e>
 3ca:	e7 c0       	rjmp	.+462    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 3cc:	c1 15       	cp	r28, r1
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	d8 07       	cpc	r29, r24
 3d2:	a9 f1       	breq	.+106    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3d4:	c1 15       	cp	r28, r1
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	d8 07       	cpc	r29, r24
 3da:	e1 f1       	breq	.+120    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3dc:	c0 34       	cpi	r28, 0x40	; 64
 3de:	d1 05       	cpc	r29, r1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <set_prescalar+0x146>
 3e2:	db c0       	rjmp	.+438    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3e6:	8e b5       	in	r24, 0x2e	; 46
 3e8:	8e 7f       	andi	r24, 0xFE	; 254
 3ea:	8e bd       	out	0x2e, r24	; 46
 3ec:	8e b5       	in	r24, 0x2e	; 46
 3ee:	8d 7f       	andi	r24, 0xFD	; 253
 3f0:	8e bd       	out	0x2e, r24	; 46
 3f2:	8e b5       	in	r24, 0x2e	; 46
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	8e bd       	out	0x2e, r24	; 46
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	d4 c0       	rjmp	.+424    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 3fc:	8e b5       	in	r24, 0x2e	; 46
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	8e bd       	out	0x2e, r24	; 46
 402:	8e b5       	in	r24, 0x2e	; 46
 404:	8d 7f       	andi	r24, 0xFD	; 253
 406:	8e bd       	out	0x2e, r24	; 46
 408:	8e b5       	in	r24, 0x2e	; 46
 40a:	8b 7f       	andi	r24, 0xFB	; 251
 40c:	8e bd       	out	0x2e, r24	; 46
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	c9 c0       	rjmp	.+402    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 412:	8e b5       	in	r24, 0x2e	; 46
 414:	8e 7f       	andi	r24, 0xFE	; 254
 416:	8e bd       	out	0x2e, r24	; 46
 418:	8e b5       	in	r24, 0x2e	; 46
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	8e bd       	out	0x2e, r24	; 46
 41e:	8e b5       	in	r24, 0x2e	; 46
 420:	8b 7f       	andi	r24, 0xFB	; 251
 422:	8e bd       	out	0x2e, r24	; 46
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	be c0       	rjmp	.+380    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 428:	8e b5       	in	r24, 0x2e	; 46
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	8e bd       	out	0x2e, r24	; 46
 42e:	8e b5       	in	r24, 0x2e	; 46
 430:	82 60       	ori	r24, 0x02	; 2
 432:	8e bd       	out	0x2e, r24	; 46
 434:	8e b5       	in	r24, 0x2e	; 46
 436:	8b 7f       	andi	r24, 0xFB	; 251
 438:	8e bd       	out	0x2e, r24	; 46
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	b3 c0       	rjmp	.+358    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 43e:	8e b5       	in	r24, 0x2e	; 46
 440:	8e 7f       	andi	r24, 0xFE	; 254
 442:	8e bd       	out	0x2e, r24	; 46
 444:	8e b5       	in	r24, 0x2e	; 46
 446:	8d 7f       	andi	r24, 0xFD	; 253
 448:	8e bd       	out	0x2e, r24	; 46
 44a:	8e b5       	in	r24, 0x2e	; 46
 44c:	84 60       	ori	r24, 0x04	; 4
 44e:	8e bd       	out	0x2e, r24	; 46
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	a8 c0       	rjmp	.+336    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 454:	8e b5       	in	r24, 0x2e	; 46
 456:	81 60       	ori	r24, 0x01	; 1
 458:	8e bd       	out	0x2e, r24	; 46
 45a:	8e b5       	in	r24, 0x2e	; 46
 45c:	8d 7f       	andi	r24, 0xFD	; 253
 45e:	8e bd       	out	0x2e, r24	; 46
 460:	8e b5       	in	r24, 0x2e	; 46
 462:	84 60       	ori	r24, 0x04	; 4
 464:	8e bd       	out	0x2e, r24	; 46
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	9d c0       	rjmp	.+314    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 46a:	c2 30       	cpi	r28, 0x02	; 2
 46c:	d1 05       	cpc	r29, r1
 46e:	a8 f0       	brcs	.+42     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 470:	c8 30       	cpi	r28, 0x08	; 8
 472:	d1 05       	cpc	r29, r1
 474:	91 f0       	breq	.+36     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 476:	c0 32       	cpi	r28, 0x20	; 32
 478:	d1 05       	cpc	r29, r1
 47a:	79 f0       	breq	.+30     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 47c:	c0 34       	cpi	r28, 0x40	; 64
 47e:	d1 05       	cpc	r29, r1
 480:	61 f0       	breq	.+24     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 482:	c0 38       	cpi	r28, 0x80	; 128
 484:	d1 05       	cpc	r29, r1
 486:	49 f0       	breq	.+18     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 488:	c1 15       	cp	r28, r1
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	d8 07       	cpc	r29, r24
 48e:	29 f0       	breq	.+10     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 490:	c1 15       	cp	r28, r1
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	d8 07       	cpc	r29, r24
 496:	09 f0       	breq	.+2      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 498:	82 c0       	rjmp	.+260    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
 49a:	c0 32       	cpi	r28, 0x20	; 32
 49c:	d1 05       	cpc	r29, r1
 49e:	e1 f1       	breq	.+120    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 4a0:	38 f4       	brcc	.+14     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4a2:	c1 30       	cpi	r28, 0x01	; 1
 4a4:	d1 05       	cpc	r29, r1
 4a6:	11 f1       	breq	.+68     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4a8:	b0 f0       	brcs	.+44     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4aa:	28 97       	sbiw	r28, 0x08	; 8
 4ac:	51 f1       	breq	.+84     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4ae:	79 c0       	rjmp	.+242    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 4b0:	c0 38       	cpi	r28, 0x80	; 128
 4b2:	d1 05       	cpc	r29, r1
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b6:	46 c0       	rjmp	.+140    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 4b8:	20 f4       	brcc	.+8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ba:	c0 34       	cpi	r28, 0x40	; 64
 4bc:	d1 05       	cpc	r29, r1
 4be:	b9 f1       	breq	.+110    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4c0:	70 c0       	rjmp	.+224    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 4c2:	c1 15       	cp	r28, r1
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	d8 07       	cpc	r29, r24
 4c8:	09 f4       	brne	.+2      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4ca:	47 c0       	rjmp	.+142    	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 4cc:	c1 15       	cp	r28, r1
 4ce:	d4 40       	sbci	r29, 0x04	; 4
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d2:	4e c0       	rjmp	.+156    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 4d4:	66 c0       	rjmp	.+204    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 4d6:	85 b5       	in	r24, 0x25	; 37
 4d8:	8e 7f       	andi	r24, 0xFE	; 254
 4da:	85 bd       	out	0x25, r24	; 37
 4dc:	85 b5       	in	r24, 0x25	; 37
 4de:	8d 7f       	andi	r24, 0xFD	; 253
 4e0:	85 bd       	out	0x25, r24	; 37
 4e2:	85 b5       	in	r24, 0x25	; 37
 4e4:	8b 7f       	andi	r24, 0xFB	; 251
 4e6:	85 bd       	out	0x25, r24	; 37
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	5c c0       	rjmp	.+184    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 4ec:	85 b5       	in	r24, 0x25	; 37
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	85 bd       	out	0x25, r24	; 37
 4f2:	85 b5       	in	r24, 0x25	; 37
 4f4:	8d 7f       	andi	r24, 0xFD	; 253
 4f6:	85 bd       	out	0x25, r24	; 37
 4f8:	85 b5       	in	r24, 0x25	; 37
 4fa:	8b 7f       	andi	r24, 0xFB	; 251
 4fc:	85 bd       	out	0x25, r24	; 37
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	51 c0       	rjmp	.+162    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 502:	85 b5       	in	r24, 0x25	; 37
 504:	8e 7f       	andi	r24, 0xFE	; 254
 506:	85 bd       	out	0x25, r24	; 37
 508:	85 b5       	in	r24, 0x25	; 37
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	85 bd       	out	0x25, r24	; 37
 50e:	85 b5       	in	r24, 0x25	; 37
 510:	8b 7f       	andi	r24, 0xFB	; 251
 512:	85 bd       	out	0x25, r24	; 37
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	46 c0       	rjmp	.+140    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 518:	85 b5       	in	r24, 0x25	; 37
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	85 bd       	out	0x25, r24	; 37
 51e:	85 b5       	in	r24, 0x25	; 37
 520:	82 60       	ori	r24, 0x02	; 2
 522:	85 bd       	out	0x25, r24	; 37
 524:	85 b5       	in	r24, 0x25	; 37
 526:	8b 7f       	andi	r24, 0xFB	; 251
 528:	85 bd       	out	0x25, r24	; 37
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	3b c0       	rjmp	.+118    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 52e:	85 b5       	in	r24, 0x25	; 37
 530:	8e 7f       	andi	r24, 0xFE	; 254
 532:	85 bd       	out	0x25, r24	; 37
 534:	85 b5       	in	r24, 0x25	; 37
 536:	8d 7f       	andi	r24, 0xFD	; 253
 538:	85 bd       	out	0x25, r24	; 37
 53a:	85 b5       	in	r24, 0x25	; 37
 53c:	84 60       	ori	r24, 0x04	; 4
 53e:	85 bd       	out	0x25, r24	; 37
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	30 c0       	rjmp	.+96     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 544:	85 b5       	in	r24, 0x25	; 37
 546:	81 60       	ori	r24, 0x01	; 1
 548:	85 bd       	out	0x25, r24	; 37
 54a:	85 b5       	in	r24, 0x25	; 37
 54c:	8d 7f       	andi	r24, 0xFD	; 253
 54e:	85 bd       	out	0x25, r24	; 37
 550:	85 b5       	in	r24, 0x25	; 37
 552:	84 60       	ori	r24, 0x04	; 4
 554:	85 bd       	out	0x25, r24	; 37
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	25 c0       	rjmp	.+74     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 55a:	85 b5       	in	r24, 0x25	; 37
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	85 bd       	out	0x25, r24	; 37
 560:	85 b5       	in	r24, 0x25	; 37
 562:	82 60       	ori	r24, 0x02	; 2
 564:	85 bd       	out	0x25, r24	; 37
 566:	85 b5       	in	r24, 0x25	; 37
 568:	84 60       	ori	r24, 0x04	; 4
 56a:	85 bd       	out	0x25, r24	; 37
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	1a c0       	rjmp	.+52     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 570:	85 b5       	in	r24, 0x25	; 37
 572:	81 60       	ori	r24, 0x01	; 1
 574:	85 bd       	out	0x25, r24	; 37
 576:	85 b5       	in	r24, 0x25	; 37
 578:	82 60       	ori	r24, 0x02	; 2
 57a:	85 bd       	out	0x25, r24	; 37
 57c:	85 b5       	in	r24, 0x25	; 37
 57e:	84 60       	ori	r24, 0x04	; 4
 580:	85 bd       	out	0x25, r24	; 37
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0f c0       	rjmp	.+30     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0d c0       	rjmp	.+26     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0b c0       	rjmp	.+22     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	09 c0       	rjmp	.+18     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	08 95       	ret

000005ac <Timer_start>:
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	c8 2f       	mov	r28, r24
 5b4:	8b 01       	movw	r16, r22
 5b6:	0e 94 49 01 	call	0x292	; 0x292 <isValidTimer>
 5ba:	88 23       	and	r24, r24
 5bc:	31 f0       	breq	.+12     	; 0x5ca <Timer_start+0x1e>
 5be:	b8 01       	movw	r22, r16
 5c0:	8c 2f       	mov	r24, r28
 5c2:	0e 94 4f 01 	call	0x29e	; 0x29e <set_prescalar>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <Timer_start+0x20>
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <PWM_init>:
 5d4:	cf 92       	push	r12
 5d6:	df 92       	push	r13
 5d8:	ef 92       	push	r14
 5da:	ff 92       	push	r15
 5dc:	84 30       	cpi	r24, 0x04	; 4
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <PWM_init+0xe>
 5e0:	ad c0       	rjmp	.+346    	; 0x73c <PWM_init+0x168>
 5e2:	9f ef       	ldi	r25, 0xFF	; 255
 5e4:	92 0f       	add	r25, r18
 5e6:	92 30       	cpi	r25, 0x02	; 2
 5e8:	08 f0       	brcs	.+2      	; 0x5ec <PWM_init+0x18>
 5ea:	aa c0       	rjmp	.+340    	; 0x740 <PWM_init+0x16c>
 5ec:	6a 01       	movw	r12, r20
 5ee:	7b 01       	movw	r14, r22
 5f0:	83 30       	cpi	r24, 0x03	; 3
 5f2:	18 f4       	brcc	.+6      	; 0x5fa <PWM_init+0x26>
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	28 f0       	brcs	.+10     	; 0x602 <PWM_init+0x2e>
 5f8:	29 c0       	rjmp	.+82     	; 0x64c <PWM_init+0x78>
 5fa:	83 30       	cpi	r24, 0x03	; 3
 5fc:	09 f4       	brne	.+2      	; 0x600 <PWM_init+0x2c>
 5fe:	79 c0       	rjmp	.+242    	; 0x6f2 <PWM_init+0x11e>
 600:	a1 c0       	rjmp	.+322    	; 0x744 <PWM_init+0x170>
 602:	21 30       	cpi	r18, 0x01	; 1
 604:	19 f0       	breq	.+6      	; 0x60c <PWM_init+0x38>
 606:	22 30       	cpi	r18, 0x02	; 2
 608:	41 f0       	breq	.+16     	; 0x61a <PWM_init+0x46>
 60a:	0d c0       	rjmp	.+26     	; 0x626 <PWM_init+0x52>
 60c:	83 b7       	in	r24, 0x33	; 51
 60e:	80 64       	ori	r24, 0x40	; 64
 610:	83 bf       	out	0x33, r24	; 51
 612:	83 b7       	in	r24, 0x33	; 51
 614:	88 60       	ori	r24, 0x08	; 8
 616:	83 bf       	out	0x33, r24	; 51
 618:	06 c0       	rjmp	.+12     	; 0x626 <PWM_init+0x52>
 61a:	83 b7       	in	r24, 0x33	; 51
 61c:	80 64       	ori	r24, 0x40	; 64
 61e:	83 bf       	out	0x33, r24	; 51
 620:	83 b7       	in	r24, 0x33	; 51
 622:	87 7f       	andi	r24, 0xF7	; 247
 624:	83 bf       	out	0x33, r24	; 51
 626:	83 b7       	in	r24, 0x33	; 51
 628:	8f 7e       	andi	r24, 0xEF	; 239
 62a:	83 bf       	out	0x33, r24	; 51
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	80 62       	ori	r24, 0x20	; 32
 630:	83 bf       	out	0x33, r24	; 51
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	4f e7       	ldi	r20, 0x7F	; 127
 638:	53 e4       	ldi	r21, 0x43	; 67
 63a:	c7 01       	movw	r24, r14
 63c:	b6 01       	movw	r22, r12
 63e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 642:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 646:	6c bf       	out	0x3c, r22	; 60
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	7f c0       	rjmp	.+254    	; 0x74a <PWM_init+0x176>
 64c:	21 30       	cpi	r18, 0x01	; 1
 64e:	19 f0       	breq	.+6      	; 0x656 <PWM_init+0x82>
 650:	22 30       	cpi	r18, 0x02	; 2
 652:	91 f0       	breq	.+36     	; 0x678 <PWM_init+0xa4>
 654:	21 c0       	rjmp	.+66     	; 0x698 <PWM_init+0xc4>
 656:	9f b5       	in	r25, 0x2f	; 47
 658:	9e 7f       	andi	r25, 0xFE	; 254
 65a:	9f bd       	out	0x2f, r25	; 47
 65c:	9f b5       	in	r25, 0x2f	; 47
 65e:	92 60       	ori	r25, 0x02	; 2
 660:	9f bd       	out	0x2f, r25	; 47
 662:	9e b5       	in	r25, 0x2e	; 46
 664:	98 60       	ori	r25, 0x08	; 8
 666:	9e bd       	out	0x2e, r25	; 46
 668:	9e b5       	in	r25, 0x2e	; 46
 66a:	90 61       	ori	r25, 0x10	; 16
 66c:	9e bd       	out	0x2e, r25	; 46
 66e:	20 e2       	ldi	r18, 0x20	; 32
 670:	3e e4       	ldi	r19, 0x4E	; 78
 672:	37 bd       	out	0x27, r19	; 39
 674:	26 bd       	out	0x26, r18	; 38
 676:	10 c0       	rjmp	.+32     	; 0x698 <PWM_init+0xc4>
 678:	9f b5       	in	r25, 0x2f	; 47
 67a:	9e 7f       	andi	r25, 0xFE	; 254
 67c:	9f bd       	out	0x2f, r25	; 47
 67e:	9f b5       	in	r25, 0x2f	; 47
 680:	92 60       	ori	r25, 0x02	; 2
 682:	9f bd       	out	0x2f, r25	; 47
 684:	9e b5       	in	r25, 0x2e	; 46
 686:	97 7f       	andi	r25, 0xF7	; 247
 688:	9e bd       	out	0x2e, r25	; 46
 68a:	9e b5       	in	r25, 0x2e	; 46
 68c:	90 61       	ori	r25, 0x10	; 16
 68e:	9e bd       	out	0x2e, r25	; 46
 690:	20 e2       	ldi	r18, 0x20	; 32
 692:	3e e4       	ldi	r19, 0x4E	; 78
 694:	37 bd       	out	0x27, r19	; 39
 696:	26 bd       	out	0x26, r18	; 38
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	19 f0       	breq	.+6      	; 0x6a2 <PWM_init+0xce>
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	a9 f0       	breq	.+42     	; 0x6ca <PWM_init+0xf6>
 6a0:	53 c0       	rjmp	.+166    	; 0x748 <PWM_init+0x174>
 6a2:	8f b5       	in	r24, 0x2f	; 47
 6a4:	8f 7b       	andi	r24, 0xBF	; 191
 6a6:	8f bd       	out	0x2f, r24	; 47
 6a8:	8f b5       	in	r24, 0x2f	; 47
 6aa:	80 68       	ori	r24, 0x80	; 128
 6ac:	8f bd       	out	0x2f, r24	; 47
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e4       	ldi	r19, 0x40	; 64
 6b2:	4c e9       	ldi	r20, 0x9C	; 156
 6b4:	56 e4       	ldi	r21, 0x46	; 70
 6b6:	c7 01       	movw	r24, r14
 6b8:	b6 01       	movw	r22, r12
 6ba:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 6be:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 6c2:	7b bd       	out	0x2b, r23	; 43
 6c4:	6a bd       	out	0x2a, r22	; 42
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	40 c0       	rjmp	.+128    	; 0x74a <PWM_init+0x176>
 6ca:	8f b5       	in	r24, 0x2f	; 47
 6cc:	8f 7e       	andi	r24, 0xEF	; 239
 6ce:	8f bd       	out	0x2f, r24	; 47
 6d0:	8f b5       	in	r24, 0x2f	; 47
 6d2:	80 62       	ori	r24, 0x20	; 32
 6d4:	8f bd       	out	0x2f, r24	; 47
 6d6:	20 e0       	ldi	r18, 0x00	; 0
 6d8:	30 e4       	ldi	r19, 0x40	; 64
 6da:	4c e9       	ldi	r20, 0x9C	; 156
 6dc:	56 e4       	ldi	r21, 0x46	; 70
 6de:	c7 01       	movw	r24, r14
 6e0:	b6 01       	movw	r22, r12
 6e2:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 6e6:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 6ea:	79 bd       	out	0x29, r23	; 41
 6ec:	68 bd       	out	0x28, r22	; 40
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	2c c0       	rjmp	.+88     	; 0x74a <PWM_init+0x176>
 6f2:	21 30       	cpi	r18, 0x01	; 1
 6f4:	19 f0       	breq	.+6      	; 0x6fc <PWM_init+0x128>
 6f6:	22 30       	cpi	r18, 0x02	; 2
 6f8:	41 f0       	breq	.+16     	; 0x70a <PWM_init+0x136>
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <PWM_init+0x142>
 6fc:	85 b5       	in	r24, 0x25	; 37
 6fe:	80 64       	ori	r24, 0x40	; 64
 700:	85 bd       	out	0x25, r24	; 37
 702:	85 b5       	in	r24, 0x25	; 37
 704:	88 60       	ori	r24, 0x08	; 8
 706:	85 bd       	out	0x25, r24	; 37
 708:	06 c0       	rjmp	.+12     	; 0x716 <PWM_init+0x142>
 70a:	85 b5       	in	r24, 0x25	; 37
 70c:	80 64       	ori	r24, 0x40	; 64
 70e:	85 bd       	out	0x25, r24	; 37
 710:	85 b5       	in	r24, 0x25	; 37
 712:	87 7f       	andi	r24, 0xF7	; 247
 714:	85 bd       	out	0x25, r24	; 37
 716:	85 b5       	in	r24, 0x25	; 37
 718:	8f 7e       	andi	r24, 0xEF	; 239
 71a:	85 bd       	out	0x25, r24	; 37
 71c:	85 b5       	in	r24, 0x25	; 37
 71e:	80 62       	ori	r24, 0x20	; 32
 720:	85 bd       	out	0x25, r24	; 37
 722:	20 e0       	ldi	r18, 0x00	; 0
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	4f e7       	ldi	r20, 0x7F	; 127
 728:	53 e4       	ldi	r21, 0x43	; 67
 72a:	c7 01       	movw	r24, r14
 72c:	b6 01       	movw	r22, r12
 72e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 732:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 736:	63 bd       	out	0x23, r22	; 35
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	07 c0       	rjmp	.+14     	; 0x74a <PWM_init+0x176>
 73c:	86 e0       	ldi	r24, 0x06	; 6
 73e:	05 c0       	rjmp	.+10     	; 0x74a <PWM_init+0x176>
 740:	85 e0       	ldi	r24, 0x05	; 5
 742:	03 c0       	rjmp	.+6      	; 0x74a <PWM_init+0x176>
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	01 c0       	rjmp	.+2      	; 0x74a <PWM_init+0x176>
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	df 90       	pop	r13
 750:	cf 90       	pop	r12
 752:	08 95       	ret

00000754 <PWM_set_DC>:

// Change the duty cycle of a timer
EN_timerError_t PWM_set_DC(uint8_t pwmPin, double dutyCycle) {
 754:	28 2f       	mov	r18, r24
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
 756:	84 30       	cpi	r24, 0x04	; 4
 758:	c0 f5       	brcc	.+112    	; 0x7ca <PWM_set_DC+0x76>
 75a:	cb 01       	movw	r24, r22
 75c:	ba 01       	movw	r22, r20
    return WRONG_PWM_PIN;
    }
  switch (pwmPin) {
 75e:	21 30       	cpi	r18, 0x01	; 1
 760:	89 f0       	breq	.+34     	; 0x784 <PWM_set_DC+0x30>
 762:	28 f0       	brcs	.+10     	; 0x76e <PWM_set_DC+0x1a>
 764:	22 30       	cpi	r18, 0x02	; 2
 766:	d1 f0       	breq	.+52     	; 0x79c <PWM_set_DC+0x48>
 768:	23 30       	cpi	r18, 0x03	; 3
 76a:	21 f1       	breq	.+72     	; 0x7b4 <PWM_set_DC+0x60>
 76c:	30 c0       	rjmp	.+96     	; 0x7ce <PWM_set_DC+0x7a>
      case OC_0:
        OCR0 = (uint8_t)(dutyCycle * 255);
 76e:	20 e0       	ldi	r18, 0x00	; 0
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	4f e7       	ldi	r20, 0x7F	; 127
 774:	53 e4       	ldi	r21, 0x43	; 67
 776:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 77a:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 77e:	6c bf       	out	0x3c, r22	; 60
        break;
      case OC_2:
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 780:	80 e0       	ldi	r24, 0x00	; 0
    return WRONG_PWM_PIN;
    }
  switch (pwmPin) {
      case OC_0:
        OCR0 = (uint8_t)(dutyCycle * 255);
        break;
 782:	08 95       	ret
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_9_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_9_BIT)
        OCR1A = (uint16_t)(dutyCycle * 0x01FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_10_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_10_BIT)
        OCR1A = (uint16_t)(dutyCycle * 0x03FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
        OCR1A = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
 784:	20 e0       	ldi	r18, 0x00	; 0
 786:	30 e4       	ldi	r19, 0x40	; 64
 788:	4c e9       	ldi	r20, 0x9C	; 156
 78a:	56 e4       	ldi	r21, 0x46	; 70
 78c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 790:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 794:	7b bd       	out	0x2b, r23	; 43
 796:	6a bd       	out	0x2a, r22	; 42
        break;
      case OC_2:
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 798:	80 e0       	ldi	r24, 0x00	; 0
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
        OCR1A = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_OCR1A || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_OCR1A)
        OCR1A = (uint16_t)(dutyCycle * 65535);
#endif
        break;
 79a:	08 95       	ret
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_9_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_9_BIT)
        OCR1B = (uint16_t)(dutyCycle * 0x01FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_10_BIT || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_10_BIT)
        OCR1B = (uint16_t)(dutyCycle * 0x03FF);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
        OCR1B = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	30 e4       	ldi	r19, 0x40	; 64
 7a0:	4c e9       	ldi	r20, 0x9C	; 156
 7a2:	56 e4       	ldi	r21, 0x46	; 70
 7a4:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 7a8:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 7ac:	79 bd       	out	0x29, r23	; 41
 7ae:	68 bd       	out	0x28, r22	; 40
        break;
      case OC_2:
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 7b0:	80 e0       	ldi	r24, 0x00	; 0
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_ICR1 || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_ICR1)
        OCR1B = (uint16_t)(dutyCycle * TIMER_1_PWM_TOP_ICR1_VALUE);
#elif (TIMER_1_FAST_PWM_MODE == TIMER_1_FAST_PWM_TOP_OCR1A || TIMER_1_PHASE_CORRECT_PWM_MODE == TIMER_1_PHASE_CORRECT_PWM_TOP_OCR1A)
        OCR1B = (uint16_t)(dutyCycle * 65535);
#endif
        break;
 7b2:	08 95       	ret
      case OC_2:
        OCR2 = (uint8_t)(dutyCycle * 255);
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	4f e7       	ldi	r20, 0x7F	; 127
 7ba:	53 e4       	ldi	r21, 0x43	; 67
 7bc:	0e 94 85 05 	call	0xb0a	; 0xb0a <__mulsf3>
 7c0:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
 7c4:	63 bd       	out	0x23, r22	; 35
        break;
    }
  return TIMER_OK;
 7c6:	80 e0       	ldi	r24, 0x00	; 0
        OCR1B = (uint16_t)(dutyCycle * 65535);
#endif
        break;
      case OC_2:
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
 7c8:	08 95       	ret
  }

// Change the duty cycle of a timer
EN_timerError_t PWM_set_DC(uint8_t pwmPin, double dutyCycle) {
  if (pwmPin != OC_0 && pwmPin != OC_1A && pwmPin != OC_1B && pwmPin != OC_2) {
    return WRONG_PWM_PIN;
 7ca:	86 e0       	ldi	r24, 0x06	; 6
 7cc:	08 95       	ret
        break;
      case OC_2:
        OCR2 = (uint8_t)(dutyCycle * 255);
        break;
    }
  return TIMER_OK;
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	08 95       	ret

000007d2 <__subsf3>:
 7d2:	50 58       	subi	r21, 0x80	; 128

000007d4 <__addsf3>:
 7d4:	bb 27       	eor	r27, r27
 7d6:	aa 27       	eor	r26, r26
 7d8:	0e 94 01 04 	call	0x802	; 0x802 <__addsf3x>
 7dc:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_round>
 7e0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_pscA>
 7e4:	38 f0       	brcs	.+14     	; 0x7f4 <__addsf3+0x20>
 7e6:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscB>
 7ea:	20 f0       	brcs	.+8      	; 0x7f4 <__addsf3+0x20>
 7ec:	39 f4       	brne	.+14     	; 0x7fc <__addsf3+0x28>
 7ee:	9f 3f       	cpi	r25, 0xFF	; 255
 7f0:	19 f4       	brne	.+6      	; 0x7f8 <__addsf3+0x24>
 7f2:	26 f4       	brtc	.+8      	; 0x7fc <__addsf3+0x28>
 7f4:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_nan>
 7f8:	0e f4       	brtc	.+2      	; 0x7fc <__addsf3+0x28>
 7fa:	e0 95       	com	r30
 7fc:	e7 fb       	bst	r30, 7
 7fe:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>

00000802 <__addsf3x>:
 802:	e9 2f       	mov	r30, r25
 804:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_split3>
 808:	58 f3       	brcs	.-42     	; 0x7e0 <__addsf3+0xc>
 80a:	ba 17       	cp	r27, r26
 80c:	62 07       	cpc	r22, r18
 80e:	73 07       	cpc	r23, r19
 810:	84 07       	cpc	r24, r20
 812:	95 07       	cpc	r25, r21
 814:	20 f0       	brcs	.+8      	; 0x81e <__addsf3x+0x1c>
 816:	79 f4       	brne	.+30     	; 0x836 <__addsf3x+0x34>
 818:	a6 f5       	brtc	.+104    	; 0x882 <__stack+0x23>
 81a:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_zero>
 81e:	0e f4       	brtc	.+2      	; 0x822 <__addsf3x+0x20>
 820:	e0 95       	com	r30
 822:	0b 2e       	mov	r0, r27
 824:	ba 2f       	mov	r27, r26
 826:	a0 2d       	mov	r26, r0
 828:	0b 01       	movw	r0, r22
 82a:	b9 01       	movw	r22, r18
 82c:	90 01       	movw	r18, r0
 82e:	0c 01       	movw	r0, r24
 830:	ca 01       	movw	r24, r20
 832:	a0 01       	movw	r20, r0
 834:	11 24       	eor	r1, r1
 836:	ff 27       	eor	r31, r31
 838:	59 1b       	sub	r21, r25
 83a:	99 f0       	breq	.+38     	; 0x862 <__stack+0x3>
 83c:	59 3f       	cpi	r21, 0xF9	; 249
 83e:	50 f4       	brcc	.+20     	; 0x854 <__addsf3x+0x52>
 840:	50 3e       	cpi	r21, 0xE0	; 224
 842:	68 f1       	brcs	.+90     	; 0x89e <__stack+0x3f>
 844:	1a 16       	cp	r1, r26
 846:	f0 40       	sbci	r31, 0x00	; 0
 848:	a2 2f       	mov	r26, r18
 84a:	23 2f       	mov	r18, r19
 84c:	34 2f       	mov	r19, r20
 84e:	44 27       	eor	r20, r20
 850:	58 5f       	subi	r21, 0xF8	; 248
 852:	f3 cf       	rjmp	.-26     	; 0x83a <__addsf3x+0x38>
 854:	46 95       	lsr	r20
 856:	37 95       	ror	r19
 858:	27 95       	ror	r18
 85a:	a7 95       	ror	r26
 85c:	f0 40       	sbci	r31, 0x00	; 0
 85e:	53 95       	inc	r21
 860:	c9 f7       	brne	.-14     	; 0x854 <__addsf3x+0x52>
 862:	7e f4       	brtc	.+30     	; 0x882 <__stack+0x23>
 864:	1f 16       	cp	r1, r31
 866:	ba 0b       	sbc	r27, r26
 868:	62 0b       	sbc	r22, r18
 86a:	73 0b       	sbc	r23, r19
 86c:	84 0b       	sbc	r24, r20
 86e:	ba f0       	brmi	.+46     	; 0x89e <__stack+0x3f>
 870:	91 50       	subi	r25, 0x01	; 1
 872:	a1 f0       	breq	.+40     	; 0x89c <__stack+0x3d>
 874:	ff 0f       	add	r31, r31
 876:	bb 1f       	adc	r27, r27
 878:	66 1f       	adc	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	c2 f7       	brpl	.-16     	; 0x870 <__stack+0x11>
 880:	0e c0       	rjmp	.+28     	; 0x89e <__stack+0x3f>
 882:	ba 0f       	add	r27, r26
 884:	62 1f       	adc	r22, r18
 886:	73 1f       	adc	r23, r19
 888:	84 1f       	adc	r24, r20
 88a:	48 f4       	brcc	.+18     	; 0x89e <__stack+0x3f>
 88c:	87 95       	ror	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b7 95       	ror	r27
 894:	f7 95       	ror	r31
 896:	9e 3f       	cpi	r25, 0xFE	; 254
 898:	08 f0       	brcs	.+2      	; 0x89c <__stack+0x3d>
 89a:	b0 cf       	rjmp	.-160    	; 0x7fc <__addsf3+0x28>
 89c:	93 95       	inc	r25
 89e:	88 0f       	add	r24, r24
 8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__stack+0x45>
 8a2:	99 27       	eor	r25, r25
 8a4:	ee 0f       	add	r30, r30
 8a6:	97 95       	ror	r25
 8a8:	87 95       	ror	r24
 8aa:	08 95       	ret

000008ac <__divsf3>:
 8ac:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3x>
 8b0:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_round>
 8b4:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscB>
 8b8:	58 f0       	brcs	.+22     	; 0x8d0 <__divsf3+0x24>
 8ba:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_pscA>
 8be:	40 f0       	brcs	.+16     	; 0x8d0 <__divsf3+0x24>
 8c0:	29 f4       	brne	.+10     	; 0x8cc <__divsf3+0x20>
 8c2:	5f 3f       	cpi	r21, 0xFF	; 255
 8c4:	29 f0       	breq	.+10     	; 0x8d0 <__divsf3+0x24>
 8c6:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 8ca:	51 11       	cpse	r21, r1
 8cc:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>
 8d0:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_nan>

000008d4 <__divsf3x>:
 8d4:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_split3>
 8d8:	68 f3       	brcs	.-38     	; 0x8b4 <__divsf3+0x8>

000008da <__divsf3_pse>:
 8da:	99 23       	and	r25, r25
 8dc:	b1 f3       	breq	.-20     	; 0x8ca <__divsf3+0x1e>
 8de:	55 23       	and	r21, r21
 8e0:	91 f3       	breq	.-28     	; 0x8c6 <__divsf3+0x1a>
 8e2:	95 1b       	sub	r25, r21
 8e4:	55 0b       	sbc	r21, r21
 8e6:	bb 27       	eor	r27, r27
 8e8:	aa 27       	eor	r26, r26
 8ea:	62 17       	cp	r22, r18
 8ec:	73 07       	cpc	r23, r19
 8ee:	84 07       	cpc	r24, r20
 8f0:	38 f0       	brcs	.+14     	; 0x900 <__divsf3_pse+0x26>
 8f2:	9f 5f       	subi	r25, 0xFF	; 255
 8f4:	5f 4f       	sbci	r21, 0xFF	; 255
 8f6:	22 0f       	add	r18, r18
 8f8:	33 1f       	adc	r19, r19
 8fa:	44 1f       	adc	r20, r20
 8fc:	aa 1f       	adc	r26, r26
 8fe:	a9 f3       	breq	.-22     	; 0x8ea <__divsf3_pse+0x10>
 900:	35 d0       	rcall	.+106    	; 0x96c <__divsf3_pse+0x92>
 902:	0e 2e       	mov	r0, r30
 904:	3a f0       	brmi	.+14     	; 0x914 <__divsf3_pse+0x3a>
 906:	e0 e8       	ldi	r30, 0x80	; 128
 908:	32 d0       	rcall	.+100    	; 0x96e <__divsf3_pse+0x94>
 90a:	91 50       	subi	r25, 0x01	; 1
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	e6 95       	lsr	r30
 910:	00 1c       	adc	r0, r0
 912:	ca f7       	brpl	.-14     	; 0x906 <__divsf3_pse+0x2c>
 914:	2b d0       	rcall	.+86     	; 0x96c <__divsf3_pse+0x92>
 916:	fe 2f       	mov	r31, r30
 918:	29 d0       	rcall	.+82     	; 0x96c <__divsf3_pse+0x92>
 91a:	66 0f       	add	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	bb 1f       	adc	r27, r27
 922:	26 17       	cp	r18, r22
 924:	37 07       	cpc	r19, r23
 926:	48 07       	cpc	r20, r24
 928:	ab 07       	cpc	r26, r27
 92a:	b0 e8       	ldi	r27, 0x80	; 128
 92c:	09 f0       	breq	.+2      	; 0x930 <__divsf3_pse+0x56>
 92e:	bb 0b       	sbc	r27, r27
 930:	80 2d       	mov	r24, r0
 932:	bf 01       	movw	r22, r30
 934:	ff 27       	eor	r31, r31
 936:	93 58       	subi	r25, 0x83	; 131
 938:	5f 4f       	sbci	r21, 0xFF	; 255
 93a:	3a f0       	brmi	.+14     	; 0x94a <__divsf3_pse+0x70>
 93c:	9e 3f       	cpi	r25, 0xFE	; 254
 93e:	51 05       	cpc	r21, r1
 940:	78 f0       	brcs	.+30     	; 0x960 <__divsf3_pse+0x86>
 942:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 946:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>
 94a:	5f 3f       	cpi	r21, 0xFF	; 255
 94c:	e4 f3       	brlt	.-8      	; 0x946 <__divsf3_pse+0x6c>
 94e:	98 3e       	cpi	r25, 0xE8	; 232
 950:	d4 f3       	brlt	.-12     	; 0x946 <__divsf3_pse+0x6c>
 952:	86 95       	lsr	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b7 95       	ror	r27
 95a:	f7 95       	ror	r31
 95c:	9f 5f       	subi	r25, 0xFF	; 255
 95e:	c9 f7       	brne	.-14     	; 0x952 <__divsf3_pse+0x78>
 960:	88 0f       	add	r24, r24
 962:	91 1d       	adc	r25, r1
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret
 96c:	e1 e0       	ldi	r30, 0x01	; 1
 96e:	66 0f       	add	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	bb 1f       	adc	r27, r27
 976:	62 17       	cp	r22, r18
 978:	73 07       	cpc	r23, r19
 97a:	84 07       	cpc	r24, r20
 97c:	ba 07       	cpc	r27, r26
 97e:	20 f0       	brcs	.+8      	; 0x988 <__divsf3_pse+0xae>
 980:	62 1b       	sub	r22, r18
 982:	73 0b       	sbc	r23, r19
 984:	84 0b       	sbc	r24, r20
 986:	ba 0b       	sbc	r27, r26
 988:	ee 1f       	adc	r30, r30
 98a:	88 f7       	brcc	.-30     	; 0x96e <__divsf3_pse+0x94>
 98c:	e0 95       	com	r30
 98e:	08 95       	ret

00000990 <__fixunssfsi>:
 990:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_splitA>
 994:	88 f0       	brcs	.+34     	; 0x9b8 <__fixunssfsi+0x28>
 996:	9f 57       	subi	r25, 0x7F	; 127
 998:	98 f0       	brcs	.+38     	; 0x9c0 <__fixunssfsi+0x30>
 99a:	b9 2f       	mov	r27, r25
 99c:	99 27       	eor	r25, r25
 99e:	b7 51       	subi	r27, 0x17	; 23
 9a0:	b0 f0       	brcs	.+44     	; 0x9ce <__fixunssfsi+0x3e>
 9a2:	e1 f0       	breq	.+56     	; 0x9dc <__fixunssfsi+0x4c>
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	1a f0       	brmi	.+6      	; 0x9b4 <__fixunssfsi+0x24>
 9ae:	ba 95       	dec	r27
 9b0:	c9 f7       	brne	.-14     	; 0x9a4 <__fixunssfsi+0x14>
 9b2:	14 c0       	rjmp	.+40     	; 0x9dc <__fixunssfsi+0x4c>
 9b4:	b1 30       	cpi	r27, 0x01	; 1
 9b6:	91 f0       	breq	.+36     	; 0x9dc <__fixunssfsi+0x4c>
 9b8:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_zero>
 9bc:	b1 e0       	ldi	r27, 0x01	; 1
 9be:	08 95       	ret
 9c0:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_zero>
 9c4:	67 2f       	mov	r22, r23
 9c6:	78 2f       	mov	r23, r24
 9c8:	88 27       	eor	r24, r24
 9ca:	b8 5f       	subi	r27, 0xF8	; 248
 9cc:	39 f0       	breq	.+14     	; 0x9dc <__fixunssfsi+0x4c>
 9ce:	b9 3f       	cpi	r27, 0xF9	; 249
 9d0:	cc f3       	brlt	.-14     	; 0x9c4 <__fixunssfsi+0x34>
 9d2:	86 95       	lsr	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	b3 95       	inc	r27
 9da:	d9 f7       	brne	.-10     	; 0x9d2 <__fixunssfsi+0x42>
 9dc:	3e f4       	brtc	.+14     	; 0x9ec <__fixunssfsi+0x5c>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	08 95       	ret

000009ee <__floatunsisf>:
 9ee:	e8 94       	clt
 9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__floatsisf+0x12>

000009f2 <__floatsisf>:
 9f2:	97 fb       	bst	r25, 7
 9f4:	3e f4       	brtc	.+14     	; 0xa04 <__floatsisf+0x12>
 9f6:	90 95       	com	r25
 9f8:	80 95       	com	r24
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	99 23       	and	r25, r25
 a06:	a9 f0       	breq	.+42     	; 0xa32 <__floatsisf+0x40>
 a08:	f9 2f       	mov	r31, r25
 a0a:	96 e9       	ldi	r25, 0x96	; 150
 a0c:	bb 27       	eor	r27, r27
 a0e:	93 95       	inc	r25
 a10:	f6 95       	lsr	r31
 a12:	87 95       	ror	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	b7 95       	ror	r27
 a1a:	f1 11       	cpse	r31, r1
 a1c:	f8 cf       	rjmp	.-16     	; 0xa0e <__floatsisf+0x1c>
 a1e:	fa f4       	brpl	.+62     	; 0xa5e <__floatsisf+0x6c>
 a20:	bb 0f       	add	r27, r27
 a22:	11 f4       	brne	.+4      	; 0xa28 <__floatsisf+0x36>
 a24:	60 ff       	sbrs	r22, 0
 a26:	1b c0       	rjmp	.+54     	; 0xa5e <__floatsisf+0x6c>
 a28:	6f 5f       	subi	r22, 0xFF	; 255
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	16 c0       	rjmp	.+44     	; 0xa5e <__floatsisf+0x6c>
 a32:	88 23       	and	r24, r24
 a34:	11 f0       	breq	.+4      	; 0xa3a <__floatsisf+0x48>
 a36:	96 e9       	ldi	r25, 0x96	; 150
 a38:	11 c0       	rjmp	.+34     	; 0xa5c <__floatsisf+0x6a>
 a3a:	77 23       	and	r23, r23
 a3c:	21 f0       	breq	.+8      	; 0xa46 <__floatsisf+0x54>
 a3e:	9e e8       	ldi	r25, 0x8E	; 142
 a40:	87 2f       	mov	r24, r23
 a42:	76 2f       	mov	r23, r22
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <__floatsisf+0x5e>
 a46:	66 23       	and	r22, r22
 a48:	71 f0       	breq	.+28     	; 0xa66 <__floatsisf+0x74>
 a4a:	96 e8       	ldi	r25, 0x86	; 134
 a4c:	86 2f       	mov	r24, r22
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	2a f0       	brmi	.+10     	; 0xa5e <__floatsisf+0x6c>
 a54:	9a 95       	dec	r25
 a56:	66 0f       	add	r22, r22
 a58:	77 1f       	adc	r23, r23
 a5a:	88 1f       	adc	r24, r24
 a5c:	da f7       	brpl	.-10     	; 0xa54 <__floatsisf+0x62>
 a5e:	88 0f       	add	r24, r24
 a60:	96 95       	lsr	r25
 a62:	87 95       	ror	r24
 a64:	97 f9       	bld	r25, 7
 a66:	08 95       	ret

00000a68 <__fp_inf>:
 a68:	97 f9       	bld	r25, 7
 a6a:	9f 67       	ori	r25, 0x7F	; 127
 a6c:	80 e8       	ldi	r24, 0x80	; 128
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	08 95       	ret

00000a74 <__fp_nan>:
 a74:	9f ef       	ldi	r25, 0xFF	; 255
 a76:	80 ec       	ldi	r24, 0xC0	; 192
 a78:	08 95       	ret

00000a7a <__fp_pscA>:
 a7a:	00 24       	eor	r0, r0
 a7c:	0a 94       	dec	r0
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	09 06       	cpc	r0, r25
 a86:	08 95       	ret

00000a88 <__fp_pscB>:
 a88:	00 24       	eor	r0, r0
 a8a:	0a 94       	dec	r0
 a8c:	12 16       	cp	r1, r18
 a8e:	13 06       	cpc	r1, r19
 a90:	14 06       	cpc	r1, r20
 a92:	05 06       	cpc	r0, r21
 a94:	08 95       	ret

00000a96 <__fp_round>:
 a96:	09 2e       	mov	r0, r25
 a98:	03 94       	inc	r0
 a9a:	00 0c       	add	r0, r0
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__fp_round+0xc>
 a9e:	88 23       	and	r24, r24
 aa0:	52 f0       	brmi	.+20     	; 0xab6 <__fp_round+0x20>
 aa2:	bb 0f       	add	r27, r27
 aa4:	40 f4       	brcc	.+16     	; 0xab6 <__fp_round+0x20>
 aa6:	bf 2b       	or	r27, r31
 aa8:	11 f4       	brne	.+4      	; 0xaae <__fp_round+0x18>
 aaa:	60 ff       	sbrs	r22, 0
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <__fp_round+0x20>
 aae:	6f 5f       	subi	r22, 0xFF	; 255
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	8f 4f       	sbci	r24, 0xFF	; 255
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	08 95       	ret

00000ab8 <__fp_split3>:
 ab8:	57 fd       	sbrc	r21, 7
 aba:	90 58       	subi	r25, 0x80	; 128
 abc:	44 0f       	add	r20, r20
 abe:	55 1f       	adc	r21, r21
 ac0:	59 f0       	breq	.+22     	; 0xad8 <__fp_splitA+0x10>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	71 f0       	breq	.+28     	; 0xae2 <__fp_splitA+0x1a>
 ac6:	47 95       	ror	r20

00000ac8 <__fp_splitA>:
 ac8:	88 0f       	add	r24, r24
 aca:	97 fb       	bst	r25, 7
 acc:	99 1f       	adc	r25, r25
 ace:	61 f0       	breq	.+24     	; 0xae8 <__fp_splitA+0x20>
 ad0:	9f 3f       	cpi	r25, 0xFF	; 255
 ad2:	79 f0       	breq	.+30     	; 0xaf2 <__fp_splitA+0x2a>
 ad4:	87 95       	ror	r24
 ad6:	08 95       	ret
 ad8:	12 16       	cp	r1, r18
 ada:	13 06       	cpc	r1, r19
 adc:	14 06       	cpc	r1, r20
 ade:	55 1f       	adc	r21, r21
 ae0:	f2 cf       	rjmp	.-28     	; 0xac6 <__fp_split3+0xe>
 ae2:	46 95       	lsr	r20
 ae4:	f1 df       	rcall	.-30     	; 0xac8 <__fp_splitA>
 ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <__fp_splitA+0x30>
 ae8:	16 16       	cp	r1, r22
 aea:	17 06       	cpc	r1, r23
 aec:	18 06       	cpc	r1, r24
 aee:	99 1f       	adc	r25, r25
 af0:	f1 cf       	rjmp	.-30     	; 0xad4 <__fp_splitA+0xc>
 af2:	86 95       	lsr	r24
 af4:	71 05       	cpc	r23, r1
 af6:	61 05       	cpc	r22, r1
 af8:	08 94       	sec
 afa:	08 95       	ret

00000afc <__fp_zero>:
 afc:	e8 94       	clt

00000afe <__fp_szero>:
 afe:	bb 27       	eor	r27, r27
 b00:	66 27       	eor	r22, r22
 b02:	77 27       	eor	r23, r23
 b04:	cb 01       	movw	r24, r22
 b06:	97 f9       	bld	r25, 7
 b08:	08 95       	ret

00000b0a <__mulsf3>:
 b0a:	0e 94 98 05 	call	0xb30	; 0xb30 <__mulsf3x>
 b0e:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_round>
 b12:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_pscA>
 b16:	38 f0       	brcs	.+14     	; 0xb26 <__mulsf3+0x1c>
 b18:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscB>
 b1c:	20 f0       	brcs	.+8      	; 0xb26 <__mulsf3+0x1c>
 b1e:	95 23       	and	r25, r21
 b20:	11 f0       	breq	.+4      	; 0xb26 <__mulsf3+0x1c>
 b22:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 b26:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_nan>
 b2a:	11 24       	eor	r1, r1
 b2c:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>

00000b30 <__mulsf3x>:
 b30:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_split3>
 b34:	70 f3       	brcs	.-36     	; 0xb12 <__mulsf3+0x8>

00000b36 <__mulsf3_pse>:
 b36:	95 9f       	mul	r25, r21
 b38:	c1 f3       	breq	.-16     	; 0xb2a <__mulsf3+0x20>
 b3a:	95 0f       	add	r25, r21
 b3c:	50 e0       	ldi	r21, 0x00	; 0
 b3e:	55 1f       	adc	r21, r21
 b40:	62 9f       	mul	r22, r18
 b42:	f0 01       	movw	r30, r0
 b44:	72 9f       	mul	r23, r18
 b46:	bb 27       	eor	r27, r27
 b48:	f0 0d       	add	r31, r0
 b4a:	b1 1d       	adc	r27, r1
 b4c:	63 9f       	mul	r22, r19
 b4e:	aa 27       	eor	r26, r26
 b50:	f0 0d       	add	r31, r0
 b52:	b1 1d       	adc	r27, r1
 b54:	aa 1f       	adc	r26, r26
 b56:	64 9f       	mul	r22, r20
 b58:	66 27       	eor	r22, r22
 b5a:	b0 0d       	add	r27, r0
 b5c:	a1 1d       	adc	r26, r1
 b5e:	66 1f       	adc	r22, r22
 b60:	82 9f       	mul	r24, r18
 b62:	22 27       	eor	r18, r18
 b64:	b0 0d       	add	r27, r0
 b66:	a1 1d       	adc	r26, r1
 b68:	62 1f       	adc	r22, r18
 b6a:	73 9f       	mul	r23, r19
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	62 1f       	adc	r22, r18
 b72:	83 9f       	mul	r24, r19
 b74:	a0 0d       	add	r26, r0
 b76:	61 1d       	adc	r22, r1
 b78:	22 1f       	adc	r18, r18
 b7a:	74 9f       	mul	r23, r20
 b7c:	33 27       	eor	r19, r19
 b7e:	a0 0d       	add	r26, r0
 b80:	61 1d       	adc	r22, r1
 b82:	23 1f       	adc	r18, r19
 b84:	84 9f       	mul	r24, r20
 b86:	60 0d       	add	r22, r0
 b88:	21 1d       	adc	r18, r1
 b8a:	82 2f       	mov	r24, r18
 b8c:	76 2f       	mov	r23, r22
 b8e:	6a 2f       	mov	r22, r26
 b90:	11 24       	eor	r1, r1
 b92:	9f 57       	subi	r25, 0x7F	; 127
 b94:	50 40       	sbci	r21, 0x00	; 0
 b96:	9a f0       	brmi	.+38     	; 0xbbe <__mulsf3_pse+0x88>
 b98:	f1 f0       	breq	.+60     	; 0xbd6 <__mulsf3_pse+0xa0>
 b9a:	88 23       	and	r24, r24
 b9c:	4a f0       	brmi	.+18     	; 0xbb0 <__mulsf3_pse+0x7a>
 b9e:	ee 0f       	add	r30, r30
 ba0:	ff 1f       	adc	r31, r31
 ba2:	bb 1f       	adc	r27, r27
 ba4:	66 1f       	adc	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	91 50       	subi	r25, 0x01	; 1
 bac:	50 40       	sbci	r21, 0x00	; 0
 bae:	a9 f7       	brne	.-22     	; 0xb9a <__mulsf3_pse+0x64>
 bb0:	9e 3f       	cpi	r25, 0xFE	; 254
 bb2:	51 05       	cpc	r21, r1
 bb4:	80 f0       	brcs	.+32     	; 0xbd6 <__mulsf3_pse+0xa0>
 bb6:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_inf>
 bba:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_szero>
 bbe:	5f 3f       	cpi	r21, 0xFF	; 255
 bc0:	e4 f3       	brlt	.-8      	; 0xbba <__mulsf3_pse+0x84>
 bc2:	98 3e       	cpi	r25, 0xE8	; 232
 bc4:	d4 f3       	brlt	.-12     	; 0xbba <__mulsf3_pse+0x84>
 bc6:	86 95       	lsr	r24
 bc8:	77 95       	ror	r23
 bca:	67 95       	ror	r22
 bcc:	b7 95       	ror	r27
 bce:	f7 95       	ror	r31
 bd0:	e7 95       	ror	r30
 bd2:	9f 5f       	subi	r25, 0xFF	; 255
 bd4:	c1 f7       	brne	.-16     	; 0xbc6 <__mulsf3_pse+0x90>
 bd6:	fe 2b       	or	r31, r30
 bd8:	88 0f       	add	r24, r24
 bda:	91 1d       	adc	r25, r1
 bdc:	96 95       	lsr	r25
 bde:	87 95       	ror	r24
 be0:	97 f9       	bld	r25, 7
 be2:	08 95       	ret

00000be4 <_exit>:
 be4:	f8 94       	cli

00000be6 <__stop_program>:
 be6:	ff cf       	rjmp	.-2      	; 0xbe6 <__stop_program>
