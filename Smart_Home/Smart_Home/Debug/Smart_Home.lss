
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000031e  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d76  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f2  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ef  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000552  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bb  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
   4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  54:	3e 01       	movw	r6, r28
  56:	52 01       	movw	r10, r4
  58:	52 01       	movw	r10, r4
  5a:	52 01       	movw	r10, r4
  5c:	52 01       	movw	r10, r4
  5e:	52 01       	movw	r10, r4
  60:	52 01       	movw	r10, r4
  62:	52 01       	movw	r10, r4
  64:	54 01       	movw	r10, r8
  66:	52 01       	movw	r10, r4
  68:	52 01       	movw	r10, r4
  6a:	52 01       	movw	r10, r4
  6c:	52 01       	movw	r10, r4
  6e:	52 01       	movw	r10, r4
  70:	52 01       	movw	r10, r4
  72:	52 01       	movw	r10, r4
  74:	40 01       	movw	r8, r0
  76:	52 01       	movw	r10, r4
  78:	52 01       	movw	r10, r4
  7a:	52 01       	movw	r10, r4
  7c:	52 01       	movw	r10, r4
  7e:	52 01       	movw	r10, r4
  80:	52 01       	movw	r10, r4
  82:	52 01       	movw	r10, r4
  84:	42 01       	movw	r8, r4
  86:	52 01       	movw	r10, r4
  88:	52 01       	movw	r10, r4
  8a:	52 01       	movw	r10, r4
  8c:	52 01       	movw	r10, r4
  8e:	52 01       	movw	r10, r4
  90:	52 01       	movw	r10, r4
  92:	52 01       	movw	r10, r4
  94:	44 01       	movw	r8, r8
  96:	52 01       	movw	r10, r4
  98:	52 01       	movw	r10, r4
  9a:	52 01       	movw	r10, r4
  9c:	52 01       	movw	r10, r4
  9e:	52 01       	movw	r10, r4
  a0:	52 01       	movw	r10, r4
  a2:	52 01       	movw	r10, r4
  a4:	46 01       	movw	r8, r12
  a6:	52 01       	movw	r10, r4
  a8:	52 01       	movw	r10, r4
  aa:	52 01       	movw	r10, r4
  ac:	52 01       	movw	r10, r4
  ae:	52 01       	movw	r10, r4
  b0:	52 01       	movw	r10, r4
  b2:	52 01       	movw	r10, r4
  b4:	48 01       	movw	r8, r16
  b6:	52 01       	movw	r10, r4
  b8:	52 01       	movw	r10, r4
  ba:	52 01       	movw	r10, r4
  bc:	52 01       	movw	r10, r4
  be:	52 01       	movw	r10, r4
  c0:	52 01       	movw	r10, r4
  c2:	52 01       	movw	r10, r4
  c4:	4a 01       	movw	r8, r20
  c6:	52 01       	movw	r10, r4
  c8:	52 01       	movw	r10, r4
  ca:	52 01       	movw	r10, r4
  cc:	52 01       	movw	r10, r4
  ce:	52 01       	movw	r10, r4
  d0:	52 01       	movw	r10, r4
  d2:	52 01       	movw	r10, r4
  d4:	4c 01       	movw	r8, r24
  d6:	52 01       	movw	r10, r4
  d8:	52 01       	movw	r10, r4
  da:	52 01       	movw	r10, r4
  dc:	52 01       	movw	r10, r4
  de:	52 01       	movw	r10, r4
  e0:	52 01       	movw	r10, r4
  e2:	52 01       	movw	r10, r4
  e4:	4e 01       	movw	r8, r28
  e6:	52 01       	movw	r10, r4
  e8:	52 01       	movw	r10, r4
  ea:	52 01       	movw	r10, r4
  ec:	52 01       	movw	r10, r4
  ee:	52 01       	movw	r10, r4
  f0:	52 01       	movw	r10, r4
  f2:	52 01       	movw	r10, r4
  f4:	50 01       	movw	r10, r0

000000f6 <__ctors_end>:
  f6:	11 24       	eor	r1, r1
  f8:	1f be       	out	0x3f, r1	; 63
  fa:	cf e5       	ldi	r28, 0x5F	; 95
  fc:	d8 e0       	ldi	r29, 0x08	; 8
  fe:	de bf       	out	0x3e, r29	; 62
 100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	a0 e6       	ldi	r26, 0x60	; 96
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	ee e1       	ldi	r30, 0x1E	; 30
 10a:	f3 e0       	ldi	r31, 0x03	; 3
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
 10e:	05 90       	lpm	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	a8 36       	cpi	r26, 0x68	; 104
 114:	b1 07       	cpc	r27, r17
 116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>
 118:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
 11c:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

00000120 <__bad_interrupt>:
 120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <EEPROM_init>:
  I2C_stop();

#if EEPROM_WRITE_DELAY_MS
  _delay_ms(EEPROM_WRITE_DELAY_MS);
#endif
  }
 124:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_init>
 128:	08 95       	ret

0000012a <EEPROM_read_block>:
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	c8 2f       	mov	r28, r24
 136:	d6 2f       	mov	r29, r22
 138:	f4 2e       	mov	r15, r20
 13a:	89 01       	movw	r16, r18
 13c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_start>
 140:	cc 0f       	add	r28, r28
 142:	80 ea       	ldi	r24, 0xA0	; 160
 144:	8c 0f       	add	r24, r28
 146:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_write>
 14a:	8d 2f       	mov	r24, r29
 14c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_write>
 150:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_start>
 154:	81 ea       	ldi	r24, 0xA1	; 161
 156:	8c 0f       	add	r24, r28
 158:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_write>
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	06 c0       	rjmp	.+12     	; 0x16e <EEPROM_read_block+0x44>
 162:	c8 01       	movw	r24, r16
 164:	8c 0f       	add	r24, r28
 166:	9d 1f       	adc	r25, r29
 168:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_read_Ack>
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	8f 2d       	mov	r24, r15
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	c8 17       	cp	r28, r24
 176:	d9 07       	cpc	r29, r25
 178:	a4 f3       	brlt	.-24     	; 0x162 <EEPROM_read_block+0x38>
 17a:	c8 01       	movw	r24, r16
 17c:	8c 0f       	add	r24, r28
 17e:	9d 1f       	adc	r25, r29
 180:	0e 94 76 01 	call	0x2ec	; 0x2ec <I2C_read_Nack>
 184:	0e 94 81 01 	call	0x302	; 0x302 <I2C_stop>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	08 95       	ret

00000194 <EEPROM_write_block>:

// bytes_number must be less than 16
void EEPROM_write_block(uint8_t page, uint8_t address, uint8_t bytes_number, int8_t* data) {
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	c8 2f       	mov	r28, r24
 1a0:	d6 2f       	mov	r29, r22
 1a2:	14 2f       	mov	r17, r20
 1a4:	79 01       	movw	r14, r18
  for (i = 0;i < bytes_number;i++) {
    EEPROM_write_byte(page, address + i, data[i]);
    }
#elif WRITE_BLOCK_METHOD == MULTIBYTE
  int i;
  I2C_start();
 1a6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_start>
  I2C_write(0xA0 + (page << 1));
 1aa:	8c 2f       	mov	r24, r28
 1ac:	88 0f       	add	r24, r24
 1ae:	80 56       	subi	r24, 0x60	; 96
 1b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_write>
  I2C_write(address);
 1b4:	8d 2f       	mov	r24, r29
 1b6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_write>

  for (i = 0;i < bytes_number;i++) {
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <EEPROM_write_block+0x3a>
    I2C_write(data[i]);
 1c0:	f7 01       	movw	r30, r14
 1c2:	ec 0f       	add	r30, r28
 1c4:	fd 1f       	adc	r31, r29
 1c6:	80 81       	ld	r24, Z
 1c8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_write>
  int i;
  I2C_start();
  I2C_write(0xA0 + (page << 1));
  I2C_write(address);

  for (i = 0;i < bytes_number;i++) {
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	81 2f       	mov	r24, r17
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	c8 17       	cp	r28, r24
 1d4:	d9 07       	cpc	r29, r25
 1d6:	a4 f3       	brlt	.-24     	; 0x1c0 <EEPROM_write_block+0x2c>
    I2C_write(data[i]);
    }
  I2C_stop();
 1d8:	0e 94 81 01 	call	0x302	; 0x302 <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9c e9       	ldi	r25, 0x9C	; 156
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <EEPROM_write_block+0x4c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <EEPROM_write_block+0x52>
 1e6:	00 00       	nop

#if EEPROM_WRITE_DELAY_MS
  _delay_ms(EEPROM_WRITE_DELAY_MS);
#endif
#endif
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <main>:

#include "HAL/LCD/lcd.h"
#include "HAL/Keypad/keypad.h"
#include "HAL/EEPROM/eeprom.h"

int main(void) {
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	27 97       	sbiw	r28, 0x07	; 7
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
	char* x = "Hesham";
	uint8_t y[7];
	EEPROM_init();
 208:	0e 94 92 00 	call	0x124	; 0x124 <EEPROM_init>
	EEPROM_write_block(0, 0, 7, x);
 20c:	20 e6       	ldi	r18, 0x60	; 96
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	47 e0       	ldi	r20, 0x07	; 7
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 ca 00 	call	0x194	; 0x194 <EEPROM_write_block>
	DDRD = 0xff;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	81 bb       	out	0x11, r24	; 17
			EEPROM_read_block(0, 0, 7, y);
 21e:	9e 01       	movw	r18, r28
 220:	2f 5f       	subi	r18, 0xFF	; 255
 222:	3f 4f       	sbci	r19, 0xFF	; 255
 224:	47 e0       	ldi	r20, 0x07	; 7
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 95 00 	call	0x12a	; 0x12a <EEPROM_read_block>
	while (1) {
		int i;
		for (i = 0; i < 7; i++) {
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	12 c0       	rjmp	.+36     	; 0x258 <main+0x64>
			PORTD = y[i];
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e8 0f       	add	r30, r24
 23e:	f9 1f       	adc	r31, r25
 240:	20 81       	ld	r18, Z
 242:	22 bb       	out	0x12, r18	; 18
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	39 e6       	ldi	r19, 0x69	; 105
 248:	48 e1       	ldi	r20, 0x18	; 24
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	30 40       	sbci	r19, 0x00	; 0
 24e:	40 40       	sbci	r20, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x56>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x60>
 254:	00 00       	nop
	EEPROM_write_block(0, 0, 7, x);
	DDRD = 0xff;
			EEPROM_read_block(0, 0, 7, y);
	while (1) {
		int i;
		for (i = 0; i < 7; i++) {
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	87 30       	cpi	r24, 0x07	; 7
 25a:	91 05       	cpc	r25, r1
 25c:	5c f3       	brlt	.-42     	; 0x234 <main+0x40>
 25e:	e7 cf       	rjmp	.-50     	; 0x22e <main+0x3a>

00000260 <getCurrentStatus>:

EN_I2CMasterStatusCode_t I2C_repeatedStart() {   // Same as start, just a different name
  TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
  while (read_bit(TWCR, TWINT) == 0);
  return getCurrentStatus();
  }
 260:	81 b1       	in	r24, 0x01	; 1
 262:	e8 2f       	mov	r30, r24
 264:	e8 7f       	andi	r30, 0xF8	; 248
 266:	8e 2f       	mov	r24, r30
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	38 97       	sbiw	r30, 0x08	; 8
 26e:	e1 35       	cpi	r30, 0x51	; 81
 270:	f1 05       	cpc	r31, r1
 272:	c0 f4       	brcc	.+48     	; 0x2a4 <getCurrentStatus+0x44>
 274:	e6 5d       	subi	r30, 0xD6	; 214
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	0c 94 87 01 	jmp	0x30e	; 0x30e <__tablejump2__>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	08 95       	ret
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	08 95       	ret
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	08 95       	ret
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	08 95       	ret
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	08 95       	ret
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	08 95       	ret
 294:	87 e0       	ldi	r24, 0x07	; 7
 296:	08 95       	ret
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	08 95       	ret
 29c:	89 e0       	ldi	r24, 0x09	; 9
 29e:	08 95       	ret
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	08 95       	ret
 2a4:	8b e0       	ldi	r24, 0x0B	; 11
 2a6:	08 95       	ret
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret

000002ac <I2C_init>:
 2ac:	11 b8       	out	0x01, r1	; 1
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	80 b9       	out	0x00, r24	; 0
 2b2:	08 95       	ret

000002b4 <I2C_start>:
 2b4:	84 ea       	ldi	r24, 0xA4	; 164
 2b6:	86 bf       	out	0x36, r24	; 54
 2b8:	06 b6       	in	r0, 0x36	; 54
 2ba:	07 fe       	sbrs	r0, 7
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <I2C_start+0x4>
 2be:	0e 94 30 01 	call	0x260	; 0x260 <getCurrentStatus>
 2c2:	08 95       	ret

000002c4 <I2C_write>:

EN_I2CMasterStatusCode_t I2C_write(uint8_t data) {
  TWDR = data;
 2c4:	83 b9       	out	0x03, r24	; 3
  TWCR = (1 << TWEN) | (1 << TWINT);
 2c6:	84 e8       	ldi	r24, 0x84	; 132
 2c8:	86 bf       	out	0x36, r24	; 54
  while (read_bit(TWCR, TWINT) == 0);
 2ca:	06 b6       	in	r0, 0x36	; 54
 2cc:	07 fe       	sbrs	r0, 7
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <I2C_write+0x6>
  return getCurrentStatus();
 2d0:	0e 94 30 01 	call	0x260	; 0x260 <getCurrentStatus>
  }
 2d4:	08 95       	ret

000002d6 <I2C_read_Ack>:

EN_I2CMasterStatusCode_t I2C_read_Ack(uint8_t* data) {
  TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWINT);
 2d6:	24 ec       	ldi	r18, 0xC4	; 196
 2d8:	26 bf       	out	0x36, r18	; 54
  while (read_bit(TWCR, TWINT) == 0);
 2da:	06 b6       	in	r0, 0x36	; 54
 2dc:	07 fe       	sbrs	r0, 7
 2de:	fd cf       	rjmp	.-6      	; 0x2da <I2C_read_Ack+0x4>
  *data = TWDR;
 2e0:	23 b1       	in	r18, 0x03	; 3
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
  return getCurrentStatus();
 2e6:	0e 94 30 01 	call	0x260	; 0x260 <getCurrentStatus>
  }
 2ea:	08 95       	ret

000002ec <I2C_read_Nack>:

EN_I2CMasterStatusCode_t I2C_read_Nack(uint8_t* data) {
  TWCR = (1 << TWEN) | (1 << TWINT);
 2ec:	24 e8       	ldi	r18, 0x84	; 132
 2ee:	26 bf       	out	0x36, r18	; 54
  while (read_bit(TWCR, TWINT) == 0);
 2f0:	06 b6       	in	r0, 0x36	; 54
 2f2:	07 fe       	sbrs	r0, 7
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <I2C_read_Nack+0x4>
  *data = TWDR;
 2f6:	23 b1       	in	r18, 0x03	; 3
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
  return getCurrentStatus();
 2fc:	0e 94 30 01 	call	0x260	; 0x260 <getCurrentStatus>
  }
 300:	08 95       	ret

00000302 <I2C_stop>:

void I2C_stop(void) {
  TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 302:	84 e9       	ldi	r24, 0x94	; 148
 304:	86 bf       	out	0x36, r24	; 54
  while (read_bit(TWCR, TWSTO));	// Wait until stop condition finishes
 306:	06 b6       	in	r0, 0x36	; 54
 308:	04 fc       	sbrc	r0, 4
 30a:	fd cf       	rjmp	.-6      	; 0x306 <I2C_stop+0x4>
  }
 30c:	08 95       	ret

0000030e <__tablejump2__>:
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	05 90       	lpm	r0, Z+
 314:	f4 91       	lpm	r31, Z
 316:	e0 2d       	mov	r30, r0
 318:	09 94       	ijmp

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
