
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000308  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800068  00800068  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c11  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b3  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b1  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000327  00000000  00000000  00002801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  8a:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BT_sendString>:
void BT_sends8(s8 data) {
  UART_sends8(data);
  }

void BT_sendString(s8* str) {
  UART_sendString(str);
  92:	0e 94 06 01 	call	0x20c	; 0x20c <UART_sendString>
  96:	08 95       	ret

00000098 <main>:
#include "MCAL/Timer/timer.h"
#include "Services/User/user.h"
#include "Services/Remote_access/remote.h"

int main(void) {
	UART_init(9600);
  98:	60 e8       	ldi	r22, 0x80	; 128
  9a:	75 e2       	ldi	r23, 0x25	; 37
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_init>

	while (1) {
		test();
  a4:	0e 94 27 01 	call	0x24e	; 0x24e <test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	83 ed       	ldi	r24, 0xD3	; 211
  ac:	90 e3       	ldi	r25, 0x30	; 48
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x16>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x20>
  b8:	00 00       	nop
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <main+0xc>

000000bc <UART_init>:
  }

// Receive a s8 using UART
void UART_receives8(s8* x) {
  while (!read_bit(UCSRA, RXC)); // Wait for the data to be received.
  *x = UDR;
  bc:	61 15       	cp	r22, r1
  be:	26 e9       	ldi	r18, 0x96	; 150
  c0:	72 07       	cpc	r23, r18
  c2:	81 05       	cpc	r24, r1
  c4:	91 05       	cpc	r25, r1
  c6:	09 f4       	brne	.+2      	; 0xca <UART_init+0xe>
  c8:	72 c0       	rjmp	.+228    	; 0x1ae <UART_init+0xf2>
  ca:	58 f5       	brcc	.+86     	; 0x122 <UART_init+0x66>
  cc:	60 38       	cpi	r22, 0x80	; 128
  ce:	25 e2       	ldi	r18, 0x25	; 37
  d0:	72 07       	cpc	r23, r18
  d2:	81 05       	cpc	r24, r1
  d4:	91 05       	cpc	r25, r1
  d6:	09 f4       	brne	.+2      	; 0xda <UART_init+0x1e>
  d8:	5e c0       	rjmp	.+188    	; 0x196 <UART_init+0xda>
  da:	70 f4       	brcc	.+28     	; 0xf8 <UART_init+0x3c>
  dc:	60 36       	cpi	r22, 0x60	; 96
  de:	29 e0       	ldi	r18, 0x09	; 9
  e0:	72 07       	cpc	r23, r18
  e2:	81 05       	cpc	r24, r1
  e4:	91 05       	cpc	r25, r1
  e6:	09 f4       	brne	.+2      	; 0xea <UART_init+0x2e>
  e8:	4e c0       	rjmp	.+156    	; 0x186 <UART_init+0xca>
  ea:	60 3c       	cpi	r22, 0xC0	; 192
  ec:	72 41       	sbci	r23, 0x12	; 18
  ee:	81 05       	cpc	r24, r1
  f0:	91 05       	cpc	r25, r1
  f2:	09 f4       	brne	.+2      	; 0xf6 <UART_init+0x3a>
  f4:	4d c0       	rjmp	.+154    	; 0x190 <UART_init+0xd4>
  f6:	82 c0       	rjmp	.+260    	; 0x1fc <UART_init+0x140>
  f8:	61 15       	cp	r22, r1
  fa:	2b e4       	ldi	r18, 0x4B	; 75
  fc:	72 07       	cpc	r23, r18
  fe:	81 05       	cpc	r24, r1
 100:	91 05       	cpc	r25, r1
 102:	09 f4       	brne	.+2      	; 0x106 <UART_init+0x4a>
 104:	4e c0       	rjmp	.+156    	; 0x1a2 <UART_init+0xe6>
 106:	60 38       	cpi	r22, 0x80	; 128
 108:	20 e7       	ldi	r18, 0x70	; 112
 10a:	72 07       	cpc	r23, r18
 10c:	81 05       	cpc	r24, r1
 10e:	91 05       	cpc	r25, r1
 110:	09 f4       	brne	.+2      	; 0x114 <UART_init+0x58>
 112:	4a c0       	rjmp	.+148    	; 0x1a8 <UART_init+0xec>
 114:	60 34       	cpi	r22, 0x40	; 64
 116:	78 43       	sbci	r23, 0x38	; 56
 118:	81 05       	cpc	r24, r1
 11a:	91 05       	cpc	r25, r1
 11c:	09 f0       	breq	.+2      	; 0x120 <UART_init+0x64>
 11e:	6e c0       	rjmp	.+220    	; 0x1fc <UART_init+0x140>
 120:	3d c0       	rjmp	.+122    	; 0x19c <UART_init+0xe0>
 122:	61 15       	cp	r22, r1
 124:	24 e8       	ldi	r18, 0x84	; 132
 126:	72 07       	cpc	r23, r18
 128:	23 e0       	ldi	r18, 0x03	; 3
 12a:	82 07       	cpc	r24, r18
 12c:	91 05       	cpc	r25, r1
 12e:	09 f4       	brne	.+2      	; 0x132 <UART_init+0x76>
 130:	4a c0       	rjmp	.+148    	; 0x1c6 <UART_init+0x10a>
 132:	a8 f4       	brcc	.+42     	; 0x15e <UART_init+0xa2>
 134:	61 15       	cp	r22, r1
 136:	2c e2       	ldi	r18, 0x2C	; 44
 138:	72 07       	cpc	r23, r18
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	82 07       	cpc	r24, r18
 13e:	91 05       	cpc	r25, r1
 140:	e1 f1       	breq	.+120    	; 0x1ba <UART_init+0xfe>
 142:	61 15       	cp	r22, r1
 144:	22 ec       	ldi	r18, 0xC2	; 194
 146:	72 07       	cpc	r23, r18
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	82 07       	cpc	r24, r18
 14c:	91 05       	cpc	r25, r1
 14e:	c1 f1       	breq	.+112    	; 0x1c0 <UART_init+0x104>
 150:	61 15       	cp	r22, r1
 152:	71 4e       	sbci	r23, 0xE1	; 225
 154:	81 05       	cpc	r24, r1
 156:	91 05       	cpc	r25, r1
 158:	09 f0       	breq	.+2      	; 0x15c <UART_init+0xa0>
 15a:	50 c0       	rjmp	.+160    	; 0x1fc <UART_init+0x140>
 15c:	2b c0       	rjmp	.+86     	; 0x1b4 <UART_init+0xf8>
 15e:	60 32       	cpi	r22, 0x20	; 32
 160:	21 ea       	ldi	r18, 0xA1	; 161
 162:	72 07       	cpc	r23, r18
 164:	27 e0       	ldi	r18, 0x07	; 7
 166:	82 07       	cpc	r24, r18
 168:	91 05       	cpc	r25, r1
 16a:	99 f1       	breq	.+102    	; 0x1d2 <UART_init+0x116>
 16c:	60 34       	cpi	r22, 0x40	; 64
 16e:	22 e4       	ldi	r18, 0x42	; 66
 170:	72 07       	cpc	r23, r18
 172:	2f e0       	ldi	r18, 0x0F	; 15
 174:	82 07       	cpc	r24, r18
 176:	91 05       	cpc	r25, r1
 178:	79 f1       	breq	.+94     	; 0x1d8 <UART_init+0x11c>
 17a:	60 39       	cpi	r22, 0x90	; 144
 17c:	70 4d       	sbci	r23, 0xD0	; 208
 17e:	83 40       	sbci	r24, 0x03	; 3
 180:	91 05       	cpc	r25, r1
 182:	e1 f5       	brne	.+120    	; 0x1fc <UART_init+0x140>
 184:	23 c0       	rjmp	.+70     	; 0x1cc <UART_init+0x110>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 bd       	out	0x20, r24	; 32
 18a:	80 ea       	ldi	r24, 0xA0	; 160
 18c:	89 b9       	out	0x09, r24	; 9
 18e:	25 c0       	rjmp	.+74     	; 0x1da <UART_init+0x11e>
 190:	8f ec       	ldi	r24, 0xCF	; 207
 192:	89 b9       	out	0x09, r24	; 9
 194:	22 c0       	rjmp	.+68     	; 0x1da <UART_init+0x11e>
 196:	87 e6       	ldi	r24, 0x67	; 103
 198:	89 b9       	out	0x09, r24	; 9
 19a:	1f c0       	rjmp	.+62     	; 0x1da <UART_init+0x11e>
 19c:	84 e4       	ldi	r24, 0x44	; 68
 19e:	89 b9       	out	0x09, r24	; 9
 1a0:	1c c0       	rjmp	.+56     	; 0x1da <UART_init+0x11e>
 1a2:	83 e3       	ldi	r24, 0x33	; 51
 1a4:	89 b9       	out	0x09, r24	; 9
 1a6:	19 c0       	rjmp	.+50     	; 0x1da <UART_init+0x11e>
 1a8:	82 e2       	ldi	r24, 0x22	; 34
 1aa:	89 b9       	out	0x09, r24	; 9
 1ac:	16 c0       	rjmp	.+44     	; 0x1da <UART_init+0x11e>
 1ae:	89 e1       	ldi	r24, 0x19	; 25
 1b0:	89 b9       	out	0x09, r24	; 9
 1b2:	13 c0       	rjmp	.+38     	; 0x1da <UART_init+0x11e>
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	89 b9       	out	0x09, r24	; 9
 1b8:	10 c0       	rjmp	.+32     	; 0x1da <UART_init+0x11e>
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	89 b9       	out	0x09, r24	; 9
 1be:	0d c0       	rjmp	.+26     	; 0x1da <UART_init+0x11e>
 1c0:	88 e0       	ldi	r24, 0x08	; 8
 1c2:	89 b9       	out	0x09, r24	; 9
 1c4:	0a c0       	rjmp	.+20     	; 0x1da <UART_init+0x11e>
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	89 b9       	out	0x09, r24	; 9
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <UART_init+0x11e>
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	89 b9       	out	0x09, r24	; 9
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <UART_init+0x11e>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	89 b9       	out	0x09, r24	; 9
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <UART_init+0x11e>
 1d8:	19 b8       	out	0x09, r1	; 9
 1da:	8a b1       	in	r24, 0x0a	; 10
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	8a b9       	out	0x0a, r24	; 10
 1e0:	8a b1       	in	r24, 0x0a	; 10
 1e2:	80 61       	ori	r24, 0x10	; 16
 1e4:	8a b9       	out	0x0a, r24	; 10
 1e6:	80 b5       	in	r24, 0x20	; 32
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	80 bd       	out	0x20, r24	; 32
 1ec:	80 b5       	in	r24, 0x20	; 32
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	80 bd       	out	0x20, r24	; 32
 1f2:	80 b5       	in	r24, 0x20	; 32
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	80 bd       	out	0x20, r24	; 32
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	08 95       	ret

00000200 <UART_sends8>:
 200:	5d 9b       	sbis	0x0b, 5	; 11
 202:	fe cf       	rjmp	.-4      	; 0x200 <UART_sends8>
 204:	8c b9       	out	0x0c, r24	; 12
 206:	5e 9b       	sbis	0x0b, 6	; 11
 208:	fe cf       	rjmp	.-4      	; 0x206 <UART_sends8+0x6>
 20a:	08 95       	ret

0000020c <UART_sendString>:
  }

void UART_sendString(s8* str) {
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
  u32 i = 0;
 21a:	c1 2c       	mov	r12, r1
 21c:	d1 2c       	mov	r13, r1
 21e:	76 01       	movw	r14, r12
  while (str[i] != 0) {
 220:	07 c0       	rjmp	.+14     	; 0x230 <UART_sendString+0x24>
    UART_sends8(str[i]);
 222:	0e 94 00 01 	call	0x200	; 0x200 <UART_sends8>
    i++;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	c8 1a       	sub	r12, r24
 22a:	d8 0a       	sbc	r13, r24
 22c:	e8 0a       	sbc	r14, r24
 22e:	f8 0a       	sbc	r15, r24
  *x = UDR;
  }

void UART_sendString(s8* str) {
  u32 i = 0;
  while (str[i] != 0) {
 230:	fe 01       	movw	r30, r28
 232:	ec 0d       	add	r30, r12
 234:	fd 1d       	adc	r31, r13
 236:	80 81       	ld	r24, Z
 238:	81 11       	cpse	r24, r1
 23a:	f3 cf       	rjmp	.-26     	; 0x222 <UART_sendString+0x16>
    UART_sends8(str[i]);
    i++;
    }
  UART_sends8(0); // Send null to terminate the string
 23c:	0e 94 00 01 	call	0x200	; 0x200 <UART_sends8>
  }
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <test>:

void test() {
  BT_sendString("Hello!\r");
  }

void callFunWhenBufferReady(u8 functionNumber) {
 24e:	80 e6       	ldi	r24, 0x60	; 96
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 49 00 	call	0x92	; 0x92 <BT_sendString>
 256:	08 95       	ret

00000258 <__vector_13>:
      case 5:
        break;
    }
  }

ISR(USART_RXC_vect) {
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
  // If the buffer is full or the msg length is reached without the input being terminated by null, then it's wrong input
  // If the input is invalid, reset the buffer pointer, set the invalid input flag and call the function responsible for handling the input
  if (dump_invalid_data) {
 26c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <dump_invalid_data>
 270:	88 23       	and	r24, r24
 272:	41 f0       	breq	.+16     	; 0x284 <__vector_13+0x2c>
    if (UDR == 0) {
 274:	8c b1       	in	r24, 0x0c	; 12
 276:	81 11       	cpse	r24, r1
 278:	3b c0       	rjmp	.+118    	; 0x2f0 <__vector_13+0x98>
      dump_invalid_data = false;
 27a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <dump_invalid_data>
      invalid_user_input = false;
 27e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <invalid_user_input>
 282:	36 c0       	rjmp	.+108    	; 0x2f0 <__vector_13+0x98>
      }
    return;
    }
  msg_buffer[msg_buffer_pointer] = UDR;
 284:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 288:	e8 2f       	mov	r30, r24
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	9c b1       	in	r25, 0x0c	; 12
 28e:	e7 59       	subi	r30, 0x97	; 151
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	90 83       	st	Z, r25
  msg_buffer_pointer++;
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>

  // Msg is empty
  // Ignore null msgs
  if (msg_buffer[msg_buffer_pointer - 1] == 0 && msg_buffer_pointer == 1) {
 29a:	e8 2f       	mov	r30, r24
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e8 59       	subi	r30, 0x98	; 152
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	90 81       	ld	r25, Z
 2a4:	91 11       	cpse	r25, r1
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__vector_13+0x58>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <__vector_13+0x58>
    msg_buffer_pointer = 0;
 2ac:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    }

  // Msg is longer than required
  if (msg_buffer_pointer == msg_length && msg_buffer[msg_buffer_pointer - 1] != 0) {
 2b0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 2b4:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <msg_length>
 2b8:	e9 13       	cpse	r30, r25
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <__vector_13+0x7e>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e8 59       	subi	r30, 0x98	; 152
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	80 81       	ld	r24, Z
 2c4:	88 23       	and	r24, r24
 2c6:	39 f0       	breq	.+14     	; 0x2d6 <__vector_13+0x7e>
    invalid_user_input = true;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <invalid_user_input>
    dump_invalid_data = true;
 2ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <dump_invalid_data>
    msg_buffer_pointer = 0;
 2d2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    callFunWhenBufferReady(requesting_function);
    }

  // Msg has ended and is within the required length
  if (msg_buffer[msg_buffer_pointer - 1] == 0 && msg_buffer_pointer <= msg_length) {
 2d6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 2da:	e8 2f       	mov	r30, r24
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	e8 59       	subi	r30, 0x98	; 152
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	20 81       	ld	r18, Z
 2e4:	21 11       	cpse	r18, r1
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <__vector_13+0x98>
 2e8:	98 17       	cp	r25, r24
 2ea:	10 f0       	brcs	.+4      	; 0x2f0 <__vector_13+0x98>
    callFunWhenBufferReady(requesting_function);
    msg_buffer_pointer = 0;
 2ec:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
    }
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
