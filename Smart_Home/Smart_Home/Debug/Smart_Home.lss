
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000004bc  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000141a  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b8  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009a5  00000000  00000000  00002396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000029c  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c7  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009b6  00000000  00000000  0000379f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004155  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	84 01       	movw	r16, r8
  56:	98 01       	movw	r18, r16
  58:	98 01       	movw	r18, r16
  5a:	98 01       	movw	r18, r16
  5c:	98 01       	movw	r18, r16
  5e:	98 01       	movw	r18, r16
  60:	98 01       	movw	r18, r16
  62:	98 01       	movw	r18, r16
  64:	9a 01       	movw	r18, r20
  66:	98 01       	movw	r18, r16
  68:	98 01       	movw	r18, r16
  6a:	98 01       	movw	r18, r16
  6c:	98 01       	movw	r18, r16
  6e:	98 01       	movw	r18, r16
  70:	98 01       	movw	r18, r16
  72:	98 01       	movw	r18, r16
  74:	86 01       	movw	r16, r12
  76:	98 01       	movw	r18, r16
  78:	98 01       	movw	r18, r16
  7a:	98 01       	movw	r18, r16
  7c:	98 01       	movw	r18, r16
  7e:	98 01       	movw	r18, r16
  80:	98 01       	movw	r18, r16
  82:	98 01       	movw	r18, r16
  84:	88 01       	movw	r16, r16
  86:	98 01       	movw	r18, r16
  88:	98 01       	movw	r18, r16
  8a:	98 01       	movw	r18, r16
  8c:	98 01       	movw	r18, r16
  8e:	98 01       	movw	r18, r16
  90:	98 01       	movw	r18, r16
  92:	98 01       	movw	r18, r16
  94:	8a 01       	movw	r16, r20
  96:	98 01       	movw	r18, r16
  98:	98 01       	movw	r18, r16
  9a:	98 01       	movw	r18, r16
  9c:	98 01       	movw	r18, r16
  9e:	98 01       	movw	r18, r16
  a0:	98 01       	movw	r18, r16
  a2:	98 01       	movw	r18, r16
  a4:	8c 01       	movw	r16, r24
  a6:	98 01       	movw	r18, r16
  a8:	98 01       	movw	r18, r16
  aa:	98 01       	movw	r18, r16
  ac:	98 01       	movw	r18, r16
  ae:	98 01       	movw	r18, r16
  b0:	98 01       	movw	r18, r16
  b2:	98 01       	movw	r18, r16
  b4:	8e 01       	movw	r16, r28
  b6:	98 01       	movw	r18, r16
  b8:	98 01       	movw	r18, r16
  ba:	98 01       	movw	r18, r16
  bc:	98 01       	movw	r18, r16
  be:	98 01       	movw	r18, r16
  c0:	98 01       	movw	r18, r16
  c2:	98 01       	movw	r18, r16
  c4:	90 01       	movw	r18, r0
  c6:	98 01       	movw	r18, r16
  c8:	98 01       	movw	r18, r16
  ca:	98 01       	movw	r18, r16
  cc:	98 01       	movw	r18, r16
  ce:	98 01       	movw	r18, r16
  d0:	98 01       	movw	r18, r16
  d2:	98 01       	movw	r18, r16
  d4:	92 01       	movw	r18, r4
  d6:	98 01       	movw	r18, r16
  d8:	98 01       	movw	r18, r16
  da:	98 01       	movw	r18, r16
  dc:	98 01       	movw	r18, r16
  de:	98 01       	movw	r18, r16
  e0:	98 01       	movw	r18, r16
  e2:	98 01       	movw	r18, r16
  e4:	94 01       	movw	r18, r8
  e6:	98 01       	movw	r18, r16
  e8:	98 01       	movw	r18, r16
  ea:	98 01       	movw	r18, r16
  ec:	98 01       	movw	r18, r16
  ee:	98 01       	movw	r18, r16
  f0:	98 01       	movw	r18, r16
  f2:	98 01       	movw	r18, r16
  f4:	96 01       	movw	r18, r12

000000f6 <__ctors_end>:
  f6:	11 24       	eor	r1, r1
  f8:	1f be       	out	0x3f, r1	; 63
  fa:	cf e5       	ldi	r28, 0x5F	; 95
  fc:	d8 e0       	ldi	r29, 0x08	; 8
  fe:	de bf       	out	0x3e, r29	; 62
 100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	a0 e6       	ldi	r26, 0x60	; 96
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f4 e0       	ldi	r31, 0x04	; 4
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
 10e:	05 90       	lpm	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	a0 38       	cpi	r26, 0x80	; 128
 114:	b1 07       	cpc	r27, r17
 116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	a0 e8       	ldi	r26, 0x80	; 128
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
 120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
 122:	a0 38       	cpi	r26, 0x80	; 128
 124:	b2 07       	cpc	r27, r18
 126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
 128:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
 12c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000134 <EEPROM_init>:
    I2C_read_Ack(&data[i]);
    }
  I2C_read_Nack(&data[i]);
  I2C_stop();
#endif
  }
 134:	0e 94 9c 01 	call	0x338	; 0x338 <I2C_init>
 138:	08 95       	ret

0000013a <EEPROM_write_byte>:

void EEPROM_write_byte(uint8_t page, uint8_t address, char data) {
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	c8 2f       	mov	r28, r24
 142:	16 2f       	mov	r17, r22
 144:	d4 2f       	mov	r29, r20
  I2C_start();
 146:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_start>
  // I2C_write(0b10100000 + (page << 1));
  I2C_write(0xA0 + (page << 1)); // EEPROM address first part + page number
 14a:	8c 2f       	mov	r24, r28
 14c:	88 0f       	add	r24, r24
 14e:	80 56       	subi	r24, 0x60	; 96
 150:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  I2C_write(address);
 154:	81 2f       	mov	r24, r17
 156:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  I2C_write(data);
 15a:	8d 2f       	mov	r24, r29
 15c:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  I2C_stop();
 160:	0e 94 b1 01 	call	0x362	; 0x362 <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	9c e9       	ldi	r25, 0x9C	; 156
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <EEPROM_write_byte+0x2e>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <EEPROM_write_byte+0x34>
 16e:	00 00       	nop

#if EEPROM_WRITE_DELAY_MS
  _delay_ms(EEPROM_WRITE_DELAY_MS);
#endif
  }
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	08 95       	ret

00000178 <EEPROM_write_block>:

// bytes_number must be within page size (256 bytes)
void EEPROM_write_block(uint8_t page, uint8_t address, uint16_t bytes_number, char* data) {
 178:	6f 92       	push	r6
 17a:	7f 92       	push	r7
 17c:	8f 92       	push	r8
 17e:	9f 92       	push	r9
 180:	af 92       	push	r10
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	78 2e       	mov	r7, r24
 196:	66 2e       	mov	r6, r22
 198:	6a 01       	movw	r12, r20
 19a:	89 01       	movw	r16, r18
  //! If data is required to be written in the first 16 bytes starting from byte 10 for example, the data will be stored starting from bytes 10, 
  //! and if the data exceeds the row limit ** IT WILL ROLL OVER AND OVERWRITE THE ROW **. Therefore, in a single multibyte write cycle, we can't write more than 16 bytes at maximum if starting from the first byte in the row
  //! or the remaining bytes till the end of the row from the starting position. The remaining bytes must be written in another write cycle to avoind the roll over problem.

  uint16_t dataIndex, blockNumber, i;
  uint16_t first_block_size = 16 - (address % 16);
 19c:	86 2f       	mov	r24, r22
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	20 e1       	ldi	r18, 0x10	; 16
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	79 01       	movw	r14, r18
 1a6:	e8 1a       	sub	r14, r24
 1a8:	f1 08       	sbc	r15, r1
  if (16 - (address % 16) > bytes_number) first_block_size = bytes_number;
 1aa:	4e 15       	cp	r20, r14
 1ac:	5f 05       	cpc	r21, r15
 1ae:	08 f4       	brcc	.+2      	; 0x1b2 <EEPROM_write_block+0x3a>
 1b0:	7a 01       	movw	r14, r20
  
  // Write the first part of the data in the remaining space in the starting row
  I2C_start();
 1b2:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_start>
  I2C_write(0xA0 + (page << 1));
 1b6:	87 2d       	mov	r24, r7
 1b8:	88 0f       	add	r24, r24
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f0 ea       	ldi	r31, 0xA0	; 160
 1be:	7f 2e       	mov	r7, r31
 1c0:	f0 2d       	mov	r31, r0
 1c2:	78 0e       	add	r7, r24
 1c4:	87 2d       	mov	r24, r7
 1c6:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  I2C_write(address);
 1ca:	86 2d       	mov	r24, r6
 1cc:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  for (dataIndex = 0;dataIndex < first_block_size;dataIndex++) {
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <EEPROM_write_block+0x6c>
    I2C_write(data[dataIndex]);
 1d6:	f8 01       	movw	r30, r16
 1d8:	ec 0f       	add	r30, r28
 1da:	fd 1f       	adc	r31, r29
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  
  // Write the first part of the data in the remaining space in the starting row
  I2C_start();
  I2C_write(0xA0 + (page << 1));
  I2C_write(address);
  for (dataIndex = 0;dataIndex < first_block_size;dataIndex++) {
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	ce 15       	cp	r28, r14
 1e6:	df 05       	cpc	r29, r15
 1e8:	b0 f3       	brcs	.-20     	; 0x1d6 <EEPROM_write_block+0x5e>
    I2C_write(data[dataIndex]);
    }
  I2C_stop();
 1ea:	0e 94 b1 01 	call	0x362	; 0x362 <I2C_stop>
 1ee:	8f e3       	ldi	r24, 0x3F	; 63
 1f0:	9c e9       	ldi	r25, 0x9C	; 156
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <EEPROM_write_block+0x7a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <EEPROM_write_block+0x80>
 1f8:	00 00       	nop
#if EEPROM_WRITE_DELAY_MS
  _delay_ms(EEPROM_WRITE_DELAY_MS);
#endif

  // Return if the data fits in the row (data fits in a single row or the remaining part of it after the address)
  if (first_block_size == bytes_number) return;
 1fa:	ec 14       	cp	r14, r12
 1fc:	fd 04       	cpc	r15, r13
 1fe:	09 f4       	brne	.+2      	; 0x202 <EEPROM_write_block+0x8a>
 200:	61 c0       	rjmp	.+194    	; 0x2c4 <EEPROM_write_block+0x14c>
  
  uint16_t last_block_size = (address + bytes_number) % 16;
 202:	56 01       	movw	r10, r12
 204:	a6 0c       	add	r10, r6
 206:	b1 1c       	adc	r11, r1
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	a9 22       	and	r10, r25
 20c:	bb 24       	eor	r11, r11
  uint16_t blocks_number = (bytes_number - first_block_size - last_block_size) / 16;
 20e:	ce 18       	sub	r12, r14
 210:	df 08       	sbc	r13, r15
 212:	ca 18       	sub	r12, r10
 214:	db 08       	sbc	r13, r11
 216:	d6 94       	lsr	r13
 218:	c7 94       	ror	r12
 21a:	d6 94       	lsr	r13
 21c:	c7 94       	ror	r12
 21e:	d6 94       	lsr	r13
 220:	c7 94       	ror	r12
 222:	d6 94       	lsr	r13
 224:	c7 94       	ror	r12
  // Write the remaining whole rows if any
  for (blockNumber = 0;blockNumber < blocks_number;blockNumber++) {
 226:	e1 2c       	mov	r14, r1
 228:	f1 2c       	mov	r15, r1
 22a:	27 c0       	rjmp	.+78     	; 0x27a <EEPROM_write_block+0x102>
    I2C_start();
 22c:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_start>
    I2C_write(0xA0 + (page << 1));
 230:	87 2d       	mov	r24, r7
 232:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
    I2C_write(address + dataIndex);
 236:	8c 2f       	mov	r24, r28
 238:	86 0d       	add	r24, r6
 23a:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
    for (i = 0;i < 16;i++) {
 23e:	81 2c       	mov	r8, r1
 240:	91 2c       	mov	r9, r1
 242:	0b c0       	rjmp	.+22     	; 0x25a <EEPROM_write_block+0xe2>
      I2C_write(data[dataIndex + i]);
 244:	fe 01       	movw	r30, r28
 246:	e8 0d       	add	r30, r8
 248:	f9 1d       	adc	r31, r9
 24a:	e0 0f       	add	r30, r16
 24c:	f1 1f       	adc	r31, r17
 24e:	80 81       	ld	r24, Z
 250:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  // Write the remaining whole rows if any
  for (blockNumber = 0;blockNumber < blocks_number;blockNumber++) {
    I2C_start();
    I2C_write(0xA0 + (page << 1));
    I2C_write(address + dataIndex);
    for (i = 0;i < 16;i++) {
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	88 1a       	sub	r8, r24
 258:	98 0a       	sbc	r9, r24
 25a:	90 e1       	ldi	r25, 0x10	; 16
 25c:	89 16       	cp	r8, r25
 25e:	91 04       	cpc	r9, r1
 260:	88 f3       	brcs	.-30     	; 0x244 <EEPROM_write_block+0xcc>
      I2C_write(data[dataIndex + i]);
      }
    dataIndex += 16;
 262:	60 96       	adiw	r28, 0x10	; 16
    I2C_stop();
 264:	0e 94 b1 01 	call	0x362	; 0x362 <I2C_stop>
 268:	8f e3       	ldi	r24, 0x3F	; 63
 26a:	9c e9       	ldi	r25, 0x9C	; 156
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <EEPROM_write_block+0xf4>
 270:	00 c0       	rjmp	.+0      	; 0x272 <EEPROM_write_block+0xfa>
 272:	00 00       	nop
  if (first_block_size == bytes_number) return;
  
  uint16_t last_block_size = (address + bytes_number) % 16;
  uint16_t blocks_number = (bytes_number - first_block_size - last_block_size) / 16;
  // Write the remaining whole rows if any
  for (blockNumber = 0;blockNumber < blocks_number;blockNumber++) {
 274:	9f ef       	ldi	r25, 0xFF	; 255
 276:	e9 1a       	sub	r14, r25
 278:	f9 0a       	sbc	r15, r25
 27a:	ec 14       	cp	r14, r12
 27c:	fd 04       	cpc	r15, r13
 27e:	b0 f2       	brcs	.-84     	; 0x22c <EEPROM_write_block+0xb4>
    _delay_ms(EEPROM_WRITE_DELAY_MS);
#endif
    }

  // Write the last part of the data
  I2C_start();
 280:	0e 94 a0 01 	call	0x340	; 0x340 <I2C_start>
  I2C_write(0xA0 + (page << 1));
 284:	87 2d       	mov	r24, r7
 286:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  I2C_write(address + dataIndex);
 28a:	8c 2f       	mov	r24, r28
 28c:	86 0d       	add	r24, r6
 28e:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>
  for (i = 0;i < last_block_size;i++) {
 292:	e1 2c       	mov	r14, r1
 294:	f1 2c       	mov	r15, r1
 296:	0b c0       	rjmp	.+22     	; 0x2ae <EEPROM_write_block+0x136>
    I2C_write(data[dataIndex + i]);
 298:	fe 01       	movw	r30, r28
 29a:	ee 0d       	add	r30, r14
 29c:	ff 1d       	adc	r31, r15
 29e:	e0 0f       	add	r30, r16
 2a0:	f1 1f       	adc	r31, r17
 2a2:	80 81       	ld	r24, Z
 2a4:	0e 94 a8 01 	call	0x350	; 0x350 <I2C_write>

  // Write the last part of the data
  I2C_start();
  I2C_write(0xA0 + (page << 1));
  I2C_write(address + dataIndex);
  for (i = 0;i < last_block_size;i++) {
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	e8 1a       	sub	r14, r24
 2ac:	f8 0a       	sbc	r15, r24
 2ae:	ea 14       	cp	r14, r10
 2b0:	fb 04       	cpc	r15, r11
 2b2:	90 f3       	brcs	.-28     	; 0x298 <EEPROM_write_block+0x120>
    I2C_write(data[dataIndex + i]);
    }
  I2C_stop();
 2b4:	0e 94 b1 01 	call	0x362	; 0x362 <I2C_stop>
 2b8:	8f e3       	ldi	r24, 0x3F	; 63
 2ba:	9c e9       	ldi	r25, 0x9C	; 156
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <EEPROM_write_block+0x144>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <EEPROM_write_block+0x14a>
 2c2:	00 00       	nop
#if EEPROM_WRITE_DELAY_MS
  _delay_ms(EEPROM_WRITE_DELAY_MS);
#endif
#endif
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	bf 90       	pop	r11
 2d6:	af 90       	pop	r10
 2d8:	9f 90       	pop	r9
 2da:	8f 90       	pop	r8
 2dc:	7f 90       	pop	r7
 2de:	6f 90       	pop	r6
 2e0:	08 95       	ret

000002e2 <main>:
#include "MCAL/ADC/adc.h"
#include "MCAL/Timer/timer.h"
#include "Services/User/user.h"

int main(void) {
	EEPROM_init();
 2e2:	0e 94 9a 00 	call	0x134	; 0x134 <EEPROM_init>
	format_users_db();
 2e6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <format_users_db>
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <main+0x8>

000002ec <getCurrentStatus>:
EN_I2CMasterStatusCode_t I2C_read_Nack(uint8_t* data) {
  TWCR = (1 << TWEN) | (1 << TWINT);
  while (read_bit(TWCR, TWINT) == 0);
  *data = TWDR;
  return getCurrentStatus();
  }
 2ec:	81 b1       	in	r24, 0x01	; 1
 2ee:	e8 2f       	mov	r30, r24
 2f0:	e8 7f       	andi	r30, 0xF8	; 248
 2f2:	8e 2f       	mov	r24, r30
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	38 97       	sbiw	r30, 0x08	; 8
 2fa:	e1 35       	cpi	r30, 0x51	; 81
 2fc:	f1 05       	cpc	r31, r1
 2fe:	c0 f4       	brcc	.+48     	; 0x330 <getCurrentStatus+0x44>
 300:	e6 5d       	subi	r30, 0xD6	; 214
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__tablejump2__>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	08 95       	ret
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	08 95       	ret
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	08 95       	ret
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	08 95       	ret
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	08 95       	ret
 320:	87 e0       	ldi	r24, 0x07	; 7
 322:	08 95       	ret
 324:	88 e0       	ldi	r24, 0x08	; 8
 326:	08 95       	ret
 328:	89 e0       	ldi	r24, 0x09	; 9
 32a:	08 95       	ret
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	08 95       	ret
 330:	8b e0       	ldi	r24, 0x0B	; 11
 332:	08 95       	ret
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	08 95       	ret

00000338 <I2C_init>:
 338:	11 b8       	out	0x01, r1	; 1
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	80 b9       	out	0x00, r24	; 0
 33e:	08 95       	ret

00000340 <I2C_start>:
 340:	84 ea       	ldi	r24, 0xA4	; 164
 342:	86 bf       	out	0x36, r24	; 54
 344:	06 b6       	in	r0, 0x36	; 54
 346:	07 fe       	sbrs	r0, 7
 348:	fd cf       	rjmp	.-6      	; 0x344 <I2C_start+0x4>
 34a:	0e 94 76 01 	call	0x2ec	; 0x2ec <getCurrentStatus>
 34e:	08 95       	ret

00000350 <I2C_write>:
 350:	83 b9       	out	0x03, r24	; 3
 352:	84 e8       	ldi	r24, 0x84	; 132
 354:	86 bf       	out	0x36, r24	; 54
 356:	06 b6       	in	r0, 0x36	; 54
 358:	07 fe       	sbrs	r0, 7
 35a:	fd cf       	rjmp	.-6      	; 0x356 <I2C_write+0x6>
 35c:	0e 94 76 01 	call	0x2ec	; 0x2ec <getCurrentStatus>
 360:	08 95       	ret

00000362 <I2C_stop>:

void I2C_stop(void) {
  TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
 362:	84 e9       	ldi	r24, 0x94	; 148
 364:	86 bf       	out	0x36, r24	; 54
  while (read_bit(TWCR, TWSTO));	// Wait until stop condition finishes
 366:	06 b6       	in	r0, 0x36	; 54
 368:	04 fc       	sbrc	r0, 4
 36a:	fd cf       	rjmp	.-6      	; 0x366 <I2C_stop+0x4>
  }
 36c:	08 95       	ret

0000036e <eeprom_fill_zeroes>:

void set_alarm(void) {
  Buzzer_on(BUZZER_PORT, BUZZER_PIN);
  }

void eeprom_fill_zeroes(void) {
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	60 97       	sbiw	r28, 0x10	; 16
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
  uint8_t page;
  uint16_t byte;
  char zeroes[16] = { 0 };
 388:	fe 01       	movw	r30, r28
 38a:	31 96       	adiw	r30, 0x01	; 1
 38c:	80 e1       	ldi	r24, 0x10	; 16
 38e:	df 01       	movw	r26, r30
 390:	1d 92       	st	X+, r1
 392:	8a 95       	dec	r24
 394:	e9 f7       	brne	.-6      	; 0x390 <eeprom_fill_zeroes+0x22>
  for (page = 0; page < 8;page++) {
 396:	f1 2c       	mov	r15, r1
 398:	13 c0       	rjmp	.+38     	; 0x3c0 <eeprom_fill_zeroes+0x52>
    for (byte = 0; byte < 256; byte += 16) {
      EEPROM_write_block(page, byte, 16, zeroes);
 39a:	9e 01       	movw	r18, r28
 39c:	2f 5f       	subi	r18, 0xFF	; 255
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	40 e1       	ldi	r20, 0x10	; 16
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	60 2f       	mov	r22, r16
 3a6:	8f 2d       	mov	r24, r15
 3a8:	0e 94 bc 00 	call	0x178	; 0x178 <EEPROM_write_block>
void eeprom_fill_zeroes(void) {
  uint8_t page;
  uint16_t byte;
  char zeroes[16] = { 0 };
  for (page = 0; page < 8;page++) {
    for (byte = 0; byte < 256; byte += 16) {
 3ac:	00 5f       	subi	r16, 0xF0	; 240
 3ae:	1f 4f       	sbci	r17, 0xFF	; 255
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <eeprom_fill_zeroes+0x48>
 3b2:	00 e0       	ldi	r16, 0x00	; 0
 3b4:	10 e0       	ldi	r17, 0x00	; 0
 3b6:	0f 3f       	cpi	r16, 0xFF	; 255
 3b8:	11 05       	cpc	r17, r1
 3ba:	79 f3       	breq	.-34     	; 0x39a <eeprom_fill_zeroes+0x2c>
 3bc:	70 f3       	brcs	.-36     	; 0x39a <eeprom_fill_zeroes+0x2c>

void eeprom_fill_zeroes(void) {
  uint8_t page;
  uint16_t byte;
  char zeroes[16] = { 0 };
  for (page = 0; page < 8;page++) {
 3be:	f3 94       	inc	r15
 3c0:	b7 e0       	ldi	r27, 0x07	; 7
 3c2:	bf 15       	cp	r27, r15
 3c4:	b0 f7       	brcc	.-20     	; 0x3b2 <eeprom_fill_zeroes+0x44>
    for (byte = 0; byte < 256; byte += 16) {
      EEPROM_write_block(page, byte, 16, zeroes);
      }
    }
  }
 3c6:	60 96       	adiw	r28, 0x10	; 16
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	08 95       	ret

000003de <write_first_user>:

void write_first_user(void) {
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	6f 97       	sbiw	r28, 0x1f	; 31
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
  // Write that the first user block is in use
  EEPROM_write_byte(0, 0, 1);
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 9d 00 	call	0x13a	; 0x13a <EEPROM_write_byte>
  // Wite that the first user's an admin
  EEPROM_write_byte(0, 1, 1);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 9d 00 	call	0x13a	; 0x13a <EEPROM_write_byte>
  char name[13] = "admin";
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	e0 e6       	ldi	r30, 0x60	; 96
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	de 01       	movw	r26, r28
 40e:	11 96       	adiw	r26, 0x01	; 1
 410:	01 90       	ld	r0, Z+
 412:	0d 92       	st	X+, r0
 414:	8a 95       	dec	r24
 416:	e1 f7       	brne	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	fe 01       	movw	r30, r28
 41a:	37 96       	adiw	r30, 0x07	; 7
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	df 01       	movw	r26, r30
 420:	1d 92       	st	X+, r1
 422:	8a 95       	dec	r24
 424:	e9 f7       	brne	.-6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
  char code[7] = "000000";
 426:	87 e0       	ldi	r24, 0x07	; 7
 428:	e8 e7       	ldi	r30, 0x78	; 120
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	de 01       	movw	r26, r28
 42e:	1e 96       	adiw	r26, 0x0e	; 14
 430:	01 90       	ld	r0, Z+
 432:	0d 92       	st	X+, r0
 434:	8a 95       	dec	r24
 436:	e1 f7       	brne	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
  char password[11] = "123456";
 438:	87 e0       	ldi	r24, 0x07	; 7
 43a:	ed e6       	ldi	r30, 0x6D	; 109
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	de 01       	movw	r26, r28
 440:	55 96       	adiw	r26, 0x15	; 21
 442:	01 90       	ld	r0, Z+
 444:	0d 92       	st	X+, r0
 446:	8a 95       	dec	r24
 448:	e1 f7       	brne	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	fe 01       	movw	r30, r28
 44c:	7c 96       	adiw	r30, 0x1c	; 28
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	df 01       	movw	r26, r30
 452:	1d 92       	st	X+, r1
 454:	8a 95       	dec	r24
 456:	e9 f7       	brne	.-6      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
  EEPROM_write_block(0, 2, 13, name);
 458:	9e 01       	movw	r18, r28
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	3f 4f       	sbci	r19, 0xFF	; 255
 45e:	4d e0       	ldi	r20, 0x0D	; 13
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 bc 00 	call	0x178	; 0x178 <EEPROM_write_block>
  EEPROM_write_block(0, 15, 7, code);
 46a:	9e 01       	movw	r18, r28
 46c:	22 5f       	subi	r18, 0xF2	; 242
 46e:	3f 4f       	sbci	r19, 0xFF	; 255
 470:	47 e0       	ldi	r20, 0x07	; 7
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	6f e0       	ldi	r22, 0x0F	; 15
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 bc 00 	call	0x178	; 0x178 <EEPROM_write_block>
  EEPROM_write_block(0, 22, 11, password);
 47c:	9e 01       	movw	r18, r28
 47e:	2b 5e       	subi	r18, 0xEB	; 235
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	4b e0       	ldi	r20, 0x0B	; 11
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	66 e1       	ldi	r22, 0x16	; 22
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 bc 00 	call	0x178	; 0x178 <EEPROM_write_block>
  }
 48e:	6f 96       	adiw	r28, 0x1f	; 31
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <format_users_db>:

EN_UserStatusCode_t format_users_db(void) {
  eeprom_fill_zeroes();
 4a0:	0e 94 b7 01 	call	0x36e	; 0x36e <eeprom_fill_zeroes>
  write_first_user();
 4a4:	0e 94 ef 01 	call	0x3de	; 0x3de <write_first_user>
  return USERS_DB_FORMATTED_SUCCESSFULLY;
  }
 4a8:	88 e0       	ldi	r24, 0x08	; 8
 4aa:	08 95       	ret

000004ac <__tablejump2__>:
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	05 90       	lpm	r0, Z+
 4b2:	f4 91       	lpm	r31, Z
 4b4:	e0 2d       	mov	r30, r0
 4b6:	09 94       	ijmp

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
